%%------------------------------------------------------------------------------
%% Author: Serge Aleynikov <saleyn at gmail dot com>
%%
%% The work is derived from Maxim Lapshin's open source work:
%% https://github.com/maxlapshin/fix under the same open source MIT
%% licensing terms as the original.
%%------------------------------------------------------------------------------
%% *** This file is auto-generated, don't modify by hand!!! ***
%%------------------------------------------------------------------------------

-module(fix_decoder).
-export([decode_msg/2, decode_msg_header/1]).

-include("fix.hrl").
-include("fix_adm_msgs.hrl").
-include("fix_app_msgs.hrl").

-define(MAP_SET(_R, _M, _F, _V), _R#_M{fields = (R#_M.fields)#{_F => _V}}).

decode_msg_header(Msg) ->
  decode_msg_header(Msg, #header{}, 0, []).

decode_msg('Heartbeat'                              ,L)                                        -> decode_msg_Heartbeat                              (L, #'Heartbeat'{}, 0, []);
decode_msg('TestRequest'                            ,L)                                        -> decode_msg_TestRequest                            (L, #'TestRequest'{}, 0, []);
decode_msg('ResendRequest'                          ,L)                                        -> decode_msg_ResendRequest                          (L, #'ResendRequest'{}, 0, []);
decode_msg('Reject'                                 ,L)                                        -> decode_msg_Reject                                 (L, #'Reject'{}, 0, []);
decode_msg('SequenceReset'                          ,L)                                        -> decode_msg_SequenceReset                          (L, #'SequenceReset'{}, 0, []);
decode_msg('Logout'                                 ,L)                                        -> decode_msg_Logout                                 (L, #'Logout'{}, 0, []);
decode_msg('IOI'                                    ,L)                                        -> decode_msg_IOI                                    (L, #'IOI'{}, 0, []);
decode_msg('Advertisement'                          ,L)                                        -> decode_msg_Advertisement                          (L, #'Advertisement'{}, 0, []);
decode_msg('ExecutionReport'                        ,L)                                        -> decode_msg_ExecutionReport                        (L, #'ExecutionReport'{}, 0, []);
decode_msg('OrderCancelReject'                      ,L)                                        -> decode_msg_OrderCancelReject                      (L, #'OrderCancelReject'{}, 0, []);
decode_msg('Logon'                                  ,L)                                        -> decode_msg_Logon                                  (L, #'Logon'{}, 0, []);
decode_msg('News'                                   ,L)                                        -> decode_msg_News                                   (L, #'News'{}, 0, []);
decode_msg('Email'                                  ,L)                                        -> decode_msg_Email                                  (L, #'Email'{}, 0, []);
decode_msg('NewOrderSingle'                         ,L)                                        -> decode_msg_NewOrderSingle                         (L, #'NewOrderSingle'{}, 0, []);
decode_msg('NewOrderList'                           ,L)                                        -> decode_msg_NewOrderList                           (L, #'NewOrderList'{}, 0, []);
decode_msg('OrderCancelRequest'                     ,L)                                        -> decode_msg_OrderCancelRequest                     (L, #'OrderCancelRequest'{}, 0, []);
decode_msg('OrderCancelReplaceRequest'              ,L)                                        -> decode_msg_OrderCancelReplaceRequest              (L, #'OrderCancelReplaceRequest'{}, 0, []);
decode_msg('OrderStatusRequest'                     ,L)                                        -> decode_msg_OrderStatusRequest                     (L, #'OrderStatusRequest'{}, 0, []);
decode_msg('AllocationInstruction'                  ,L)                                        -> decode_msg_AllocationInstruction                  (L, #'AllocationInstruction'{}, 0, []);
decode_msg('ListCancelRequest'                      ,L)                                        -> decode_msg_ListCancelRequest                      (L, #'ListCancelRequest'{}, 0, []);
decode_msg('ListExecute'                            ,L)                                        -> decode_msg_ListExecute                            (L, #'ListExecute'{}, 0, []);
decode_msg('ListStatusRequest'                      ,L)                                        -> decode_msg_ListStatusRequest                      (L, #'ListStatusRequest'{}, 0, []);
decode_msg('ListStatus'                             ,L)                                        -> decode_msg_ListStatus                             (L, #'ListStatus'{}, 0, []);
decode_msg('AllocationInstructionAck'               ,L)                                        -> decode_msg_AllocationInstructionAck               (L, #'AllocationInstructionAck'{}, 0, []);
decode_msg('DontKnowTrade'                          ,L)                                        -> decode_msg_DontKnowTrade                          (L, #'DontKnowTrade'{}, 0, []);
decode_msg('QuoteRequest'                           ,L)                                        -> decode_msg_QuoteRequest                           (L, #'QuoteRequest'{}, 0, []);
decode_msg('Quote'                                  ,L)                                        -> decode_msg_Quote                                  (L, #'Quote'{}, 0, []);
decode_msg('SettlementInstructions'                 ,L)                                        -> decode_msg_SettlementInstructions                 (L, #'SettlementInstructions'{}, 0, []);
decode_msg('MarketDataRequest'                      ,L)                                        -> decode_msg_MarketDataRequest                      (L, #'MarketDataRequest'{}, 0, []);
decode_msg('MarketDataSnapshotFullRefresh'          ,L)                                        -> decode_msg_MarketDataSnapshotFullRefresh          (L, #'MarketDataSnapshotFullRefresh'{}, 0, []);
decode_msg('MarketDataIncrementalRefresh'           ,L)                                        -> decode_msg_MarketDataIncrementalRefresh           (L, #'MarketDataIncrementalRefresh'{}, 0, []);
decode_msg('MarketDataRequestReject'                ,L)                                        -> decode_msg_MarketDataRequestReject                (L, #'MarketDataRequestReject'{}, 0, []);
decode_msg('QuoteCancel'                            ,L)                                        -> decode_msg_QuoteCancel                            (L, #'QuoteCancel'{}, 0, []);
decode_msg('QuoteStatusRequest'                     ,L)                                        -> decode_msg_QuoteStatusRequest                     (L, #'QuoteStatusRequest'{}, 0, []);
decode_msg('MassQuoteAcknowledgement'               ,L)                                        -> decode_msg_MassQuoteAcknowledgement               (L, #'MassQuoteAcknowledgement'{}, 0, []);
decode_msg('SecurityDefinitionRequest'              ,L)                                        -> decode_msg_SecurityDefinitionRequest              (L, #'SecurityDefinitionRequest'{}, 0, []);
decode_msg('SecurityDefinition'                     ,L)                                        -> decode_msg_SecurityDefinition                     (L, #'SecurityDefinition'{}, 0, []);
decode_msg('SecurityStatusRequest'                  ,L)                                        -> decode_msg_SecurityStatusRequest                  (L, #'SecurityStatusRequest'{}, 0, []);
decode_msg('SecurityStatus'                         ,L)                                        -> decode_msg_SecurityStatus                         (L, #'SecurityStatus'{}, 0, []);
decode_msg('TradingSessionStatusRequest'            ,L)                                        -> decode_msg_TradingSessionStatusRequest            (L, #'TradingSessionStatusRequest'{}, 0, []);
decode_msg('TradingSessionStatus'                   ,L)                                        -> decode_msg_TradingSessionStatus                   (L, #'TradingSessionStatus'{}, 0, []);
decode_msg('MassQuote'                              ,L)                                        -> decode_msg_MassQuote                              (L, #'MassQuote'{}, 0, []);
decode_msg('BusinessMessageReject'                  ,L)                                        -> decode_msg_BusinessMessageReject                  (L, #'BusinessMessageReject'{}, 0, []);
decode_msg('BidRequest'                             ,L)                                        -> decode_msg_BidRequest                             (L, #'BidRequest'{}, 0, []);
decode_msg('BidResponse'                            ,L)                                        -> decode_msg_BidResponse                            (L, #'BidResponse'{}, 0, []);
decode_msg('ListStrikePrice'                        ,L)                                        -> decode_msg_ListStrikePrice                        (L, #'ListStrikePrice'{}, 0, []);
decode_msg('RegistrationInstructions'               ,L)                                        -> decode_msg_RegistrationInstructions               (L, #'RegistrationInstructions'{}, 0, []);
decode_msg('RegistrationInstructionsResponse'       ,L)                                        -> decode_msg_RegistrationInstructionsResponse       (L, #'RegistrationInstructionsResponse'{}, 0, []);
decode_msg('OrderMassCancelRequest'                 ,L)                                        -> decode_msg_OrderMassCancelRequest                 (L, #'OrderMassCancelRequest'{}, 0, []);
decode_msg('OrderMassCancelReport'                  ,L)                                        -> decode_msg_OrderMassCancelReport                  (L, #'OrderMassCancelReport'{}, 0, []);
decode_msg('NewOrderCross'                          ,L)                                        -> decode_msg_NewOrderCross                          (L, #'NewOrderCross'{}, 0, []);
decode_msg('CrossOrderCancelReplaceRequest'         ,L)                                        -> decode_msg_CrossOrderCancelReplaceRequest         (L, #'CrossOrderCancelReplaceRequest'{}, 0, []);
decode_msg('CrossOrderCancelRequest'                ,L)                                        -> decode_msg_CrossOrderCancelRequest                (L, #'CrossOrderCancelRequest'{}, 0, []);
decode_msg('SecurityTypeRequest'                    ,L)                                        -> decode_msg_SecurityTypeRequest                    (L, #'SecurityTypeRequest'{}, 0, []);
decode_msg('SecurityTypes'                          ,L)                                        -> decode_msg_SecurityTypes                          (L, #'SecurityTypes'{}, 0, []);
decode_msg('SecurityListRequest'                    ,L)                                        -> decode_msg_SecurityListRequest                    (L, #'SecurityListRequest'{}, 0, []);
decode_msg('SecurityList'                           ,L)                                        -> decode_msg_SecurityList                           (L, #'SecurityList'{}, 0, []);
decode_msg('DerivativeSecurityListRequest'          ,L)                                        -> decode_msg_DerivativeSecurityListRequest          (L, #'DerivativeSecurityListRequest'{}, 0, []);
decode_msg('DerivativeSecurityList'                 ,L)                                        -> decode_msg_DerivativeSecurityList                 (L, #'DerivativeSecurityList'{}, 0, []);
decode_msg('NewOrderMultileg'                       ,L)                                        -> decode_msg_NewOrderMultileg                       (L, #'NewOrderMultileg'{}, 0, []);
decode_msg('MultilegOrderCancelReplace'             ,L)                                        -> decode_msg_MultilegOrderCancelReplace             (L, #'MultilegOrderCancelReplace'{}, 0, []);
decode_msg('TradeCaptureReportRequest'              ,L)                                        -> decode_msg_TradeCaptureReportRequest              (L, #'TradeCaptureReportRequest'{}, 0, []);
decode_msg('TradeCaptureReport'                     ,L)                                        -> decode_msg_TradeCaptureReport                     (L, #'TradeCaptureReport'{}, 0, []);
decode_msg('OrderMassStatusRequest'                 ,L)                                        -> decode_msg_OrderMassStatusRequest                 (L, #'OrderMassStatusRequest'{}, 0, []);
decode_msg('QuoteRequestReject'                     ,L)                                        -> decode_msg_QuoteRequestReject                     (L, #'QuoteRequestReject'{}, 0, []);
decode_msg('RFQRequest'                             ,L)                                        -> decode_msg_RFQRequest                             (L, #'RFQRequest'{}, 0, []);
decode_msg('QuoteStatusReport'                      ,L)                                        -> decode_msg_QuoteStatusReport                      (L, #'QuoteStatusReport'{}, 0, []);
decode_msg('QuoteResponse'                          ,L)                                        -> decode_msg_QuoteResponse                          (L, #'QuoteResponse'{}, 0, []);
decode_msg('Confirmation'                           ,L)                                        -> decode_msg_Confirmation                           (L, #'Confirmation'{}, 0, []);
decode_msg('PositionMaintenanceRequest'             ,L)                                        -> decode_msg_PositionMaintenanceRequest             (L, #'PositionMaintenanceRequest'{}, 0, []);
decode_msg('PositionMaintenanceReport'              ,L)                                        -> decode_msg_PositionMaintenanceReport              (L, #'PositionMaintenanceReport'{}, 0, []);
decode_msg('RequestForPositions'                    ,L)                                        -> decode_msg_RequestForPositions                    (L, #'RequestForPositions'{}, 0, []);
decode_msg('RequestForPositionsAck'                 ,L)                                        -> decode_msg_RequestForPositionsAck                 (L, #'RequestForPositionsAck'{}, 0, []);
decode_msg('PositionReport'                         ,L)                                        -> decode_msg_PositionReport                         (L, #'PositionReport'{}, 0, []);
decode_msg('TradeCaptureReportRequestAck'           ,L)                                        -> decode_msg_TradeCaptureReportRequestAck           (L, #'TradeCaptureReportRequestAck'{}, 0, []);
decode_msg('TradeCaptureReportAck'                  ,L)                                        -> decode_msg_TradeCaptureReportAck                  (L, #'TradeCaptureReportAck'{}, 0, []);
decode_msg('AllocationReport'                       ,L)                                        -> decode_msg_AllocationReport                       (L, #'AllocationReport'{}, 0, []);
decode_msg('AllocationReportAck'                    ,L)                                        -> decode_msg_AllocationReportAck                    (L, #'AllocationReportAck'{}, 0, []);
decode_msg('ConfirmationAck'                        ,L)                                        -> decode_msg_ConfirmationAck                        (L, #'ConfirmationAck'{}, 0, []);
decode_msg('SettlementInstructionRequest'           ,L)                                        -> decode_msg_SettlementInstructionRequest           (L, #'SettlementInstructionRequest'{}, 0, []);
decode_msg('AssignmentReport'                       ,L)                                        -> decode_msg_AssignmentReport                       (L, #'AssignmentReport'{}, 0, []);
decode_msg('CollateralRequest'                      ,L)                                        -> decode_msg_CollateralRequest                      (L, #'CollateralRequest'{}, 0, []);
decode_msg('CollateralAssignment'                   ,L)                                        -> decode_msg_CollateralAssignment                   (L, #'CollateralAssignment'{}, 0, []);
decode_msg('CollateralResponse'                     ,L)                                        -> decode_msg_CollateralResponse                     (L, #'CollateralResponse'{}, 0, []);
decode_msg('CollateralReport'                       ,L)                                        -> decode_msg_CollateralReport                       (L, #'CollateralReport'{}, 0, []);
decode_msg('CollateralInquiry'                      ,L)                                        -> decode_msg_CollateralInquiry                      (L, #'CollateralInquiry'{}, 0, []);
decode_msg('NetworkCounterpartySystemStatusRequest' ,L)                                        -> decode_msg_NetworkCounterpartySystemStatusRequest (L, #'NetworkCounterpartySystemStatusRequest'{}, 0, []);
decode_msg('NetworkCounterpartySystemStatusResponse',L)                                        -> decode_msg_NetworkCounterpartySystemStatusResponse(L, #'NetworkCounterpartySystemStatusResponse'{}, 0, []);
decode_msg('UserRequest'                            ,L)                                        -> decode_msg_UserRequest                            (L, #'UserRequest'{}, 0, []);
decode_msg('UserResponse'                           ,L)                                        -> decode_msg_UserResponse                           (L, #'UserResponse'{}, 0, []);
decode_msg('CollateralInquiryAck'                   ,L)                                        -> decode_msg_CollateralInquiryAck                   (L, #'CollateralInquiryAck'{}, 0, []);
decode_msg('ConfirmationRequest'                    ,L)                                        -> decode_msg_ConfirmationRequest                    (L, #'ConfirmationRequest'{}, 0, []);
decode_msg(_,_                                        )                                        -> false.

decode_msg_header                                 ([{'BeginString'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'BeginString'           , V), I+1, U);
decode_msg_header                                 ([{'BodyLength'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'BodyLength'            , V), I+1, U);
decode_msg_header                                 ([{'MsgType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'MsgType'               , V), I+1, U);
decode_msg_header                                 ([{'SenderCompID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'SenderCompID'          , V), I+1, U);
decode_msg_header                                 ([{'TargetCompID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'TargetCompID'          , V), I+1, U);
decode_msg_header                                 ([{'OnBehalfOfCompID'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'OnBehalfOfCompID'      , V), I+1, U);
decode_msg_header                                 ([{'DeliverToCompID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'DeliverToCompID'       , V), I+1, U);
decode_msg_header                                 ([{'SecureDataLen'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'SecureDataLen'         , V), I+1, U);
decode_msg_header                                 ([{'SecureData'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'SecureData'            , V), I+1, U);
decode_msg_header                                 ([{'MsgSeqNum'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'MsgSeqNum'             , V), I+1, U);
decode_msg_header                                 ([{'SenderSubID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'SenderSubID'           , V), I+1, U);
decode_msg_header                                 ([{'SenderLocationID'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'SenderLocationID'      , V), I+1, U);
decode_msg_header                                 ([{'TargetSubID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'TargetSubID'           , V), I+1, U);
decode_msg_header                                 ([{'TargetLocationID'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'TargetLocationID'      , V), I+1, U);
decode_msg_header                                 ([{'OnBehalfOfSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'OnBehalfOfSubID'       , V), I+1, U);
decode_msg_header                                 ([{'OnBehalfOfLocationID'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'OnBehalfOfLocationID'  , V), I+1, U);
decode_msg_header                                 ([{'DeliverToSubID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'DeliverToSubID'        , V), I+1, U);
decode_msg_header                                 ([{'DeliverToLocationID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'DeliverToLocationID'   , V), I+1, U);
decode_msg_header                                 ([{'PossDupFlag'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'PossDupFlag'           , V), I+1, U);
decode_msg_header                                 ([{'PossResend'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'PossResend'            , V), I+1, U);
decode_msg_header                                 ([{'SendingTime'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'SendingTime'           , V), I+1, U);
decode_msg_header                                 ([{'OrigSendingTime'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'OrigSendingTime'       , V), I+1, U);
decode_msg_header                                 ([{'XmlDataLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'XmlDataLen'            , V), I+1, U);
decode_msg_header                                 ([{'XmlData'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'XmlData'               , V), I+1, U);
decode_msg_header                                 ([{'MessageEncoding'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'MessageEncoding'       , V), I+1, U);
decode_msg_header                                 ([{'LastMsgSeqNumProcessed', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_header(T, ?MAP_SET(R, 'header', 'LastMsgSeqNumProcessed', V), I+1, U);
decode_msg_header                                 ([{'NoHops'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpHops, N, T, fun fix_groups:decode_header_grpHops/2), decode_msg_header(L, ?MAP_SET(R, 'header', 'NoHops'                , G), I+1, U);
decode_msg_header                                 ([{K,V}|T], R, I, U)                                   -> decode_msg_header([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_header                                 (L, R, I, _) -> {R, I, L}.

decode_msg_Heartbeat                              ([{'TestReqID', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Heartbeat(T, ?MAP_SET(R, 'Heartbeat', 'TestReqID', V), I+1, U);
decode_msg_Heartbeat                              ([{K,V}|T], R, I, U)                      -> decode_msg_Heartbeat([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Heartbeat                              ([H|T], R, I, U) -> decode_msg_Heartbeat(T, R, I, [H|U]);
decode_msg_Heartbeat                              ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TestRequest                            ([{'TestReqID', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TestRequest(T, ?MAP_SET(R, 'TestRequest', 'TestReqID', V), I+1, U);
decode_msg_TestRequest                            ([{K,V}|T], R, I, U)                      -> decode_msg_TestRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TestRequest                            ([H|T], R, I, U) -> decode_msg_TestRequest(T, R, I, [H|U]);
decode_msg_TestRequest                            ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ResendRequest                          ([{'BeginSeqNo', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ResendRequest(T, ?MAP_SET(R, 'ResendRequest', 'BeginSeqNo', V), I+1, U);
decode_msg_ResendRequest                          ([{'EndSeqNo'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ResendRequest(T, ?MAP_SET(R, 'ResendRequest', 'EndSeqNo'  , V), I+1, U);
decode_msg_ResendRequest                          ([{K,V}|T], R, I, U)                       -> decode_msg_ResendRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ResendRequest                          ([H|T], R, I, U) -> decode_msg_ResendRequest(T, R, I, [H|U]);
decode_msg_ResendRequest                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Reject                                 ([{'RefSeqNum'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'RefSeqNum'          , V), I+1, U);
decode_msg_Reject                                 ([{'RefTagID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'RefTagID'           , V), I+1, U);
decode_msg_Reject                                 ([{'RefMsgType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'RefMsgType'         , V), I+1, U);
decode_msg_Reject                                 ([{'SessionRejectReason', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'SessionRejectReason', V), I+1, U);
decode_msg_Reject                                 ([{'Text'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'Text'               , V), I+1, U);
decode_msg_Reject                                 ([{'EncodedTextLen'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'EncodedTextLen'     , V), I+1, U);
decode_msg_Reject                                 ([{'EncodedText'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Reject(T, ?MAP_SET(R, 'Reject', 'EncodedText'        , V), I+1, U);
decode_msg_Reject                                 ([{K,V}|T], R, I, U)                                -> decode_msg_Reject([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Reject                                 ([H|T], R, I, U) -> decode_msg_Reject(T, R, I, [H|U]);
decode_msg_Reject                                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SequenceReset                          ([{'GapFillFlag', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SequenceReset(T, ?MAP_SET(R, 'SequenceReset', 'GapFillFlag', V), I+1, U);
decode_msg_SequenceReset                          ([{'NewSeqNo'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SequenceReset(T, ?MAP_SET(R, 'SequenceReset', 'NewSeqNo'   , V), I+1, U);
decode_msg_SequenceReset                          ([{K,V}|T], R, I, U)                        -> decode_msg_SequenceReset([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SequenceReset                          ([H|T], R, I, U) -> decode_msg_SequenceReset(T, R, I, [H|U]);
decode_msg_SequenceReset                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Logout                                 ([{'Text'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logout(T, ?MAP_SET(R, 'Logout', 'Text'          , V), I+1, U);
decode_msg_Logout                                 ([{'EncodedTextLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logout(T, ?MAP_SET(R, 'Logout', 'EncodedTextLen', V), I+1, U);
decode_msg_Logout                                 ([{'EncodedText'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logout(T, ?MAP_SET(R, 'Logout', 'EncodedText'   , V), I+1, U);
decode_msg_Logout                                 ([{K,V}|T], R, I, U)                           -> decode_msg_Logout([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Logout                                 ([H|T], R, I, U) -> decode_msg_Logout(T, R, I, [H|U]);
decode_msg_Logout                                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_IOI                                    ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IOIID'                     , V), I+1, U);
decode_msg_IOI                                    ([{'IOITransType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IOITransType'              , V), I+1, U);
decode_msg_IOI                                    ([{'IOIRefID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IOIRefID'                  , V), I+1, U);
decode_msg_IOI                                    ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Symbol'                    , V), I+1, U);
decode_msg_IOI                                    ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SymbolSfx'                 , V), I+1, U);
decode_msg_IOI                                    ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SecurityID'                , V), I+1, U);
decode_msg_IOI                                    ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SecurityIDSource'          , V), I+1, U);
decode_msg_IOI                                    ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_IOI_grpSecurityAltID/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_IOI                                    ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Product'                   , V), I+1, U);
decode_msg_IOI                                    ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CFICode'                   , V), I+1, U);
decode_msg_IOI                                    ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SecurityType'              , V), I+1, U);
decode_msg_IOI                                    ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SecuritySubType'           , V), I+1, U);
decode_msg_IOI                                    ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_IOI                                    ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'MaturityDate'              , V), I+1, U);
decode_msg_IOI                                    ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'PutOrCall'                 , V), I+1, U);
decode_msg_IOI                                    ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_IOI                                    ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IssueDate'                 , V), I+1, U);
decode_msg_IOI                                    ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_IOI                                    ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_IOI                                    ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'RepurchaseRate'            , V), I+1, U);
decode_msg_IOI                                    ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Factor'                    , V), I+1, U);
decode_msg_IOI                                    ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CreditRating'              , V), I+1, U);
decode_msg_IOI                                    ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'InstrRegistry'             , V), I+1, U);
decode_msg_IOI                                    ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CountryOfIssue'            , V), I+1, U);
decode_msg_IOI                                    ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_IOI                                    ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_IOI                                    ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'RedemptionDate'            , V), I+1, U);
decode_msg_IOI                                    ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'StrikePrice'               , V), I+1, U);
decode_msg_IOI                                    ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'StrikeCurrency'            , V), I+1, U);
decode_msg_IOI                                    ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'OptAttribute'              , V), I+1, U);
decode_msg_IOI                                    ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'ContractMultiplier'        , V), I+1, U);
decode_msg_IOI                                    ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CouponRate'                , V), I+1, U);
decode_msg_IOI                                    ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SecurityExchange'          , V), I+1, U);
decode_msg_IOI                                    ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Issuer'                    , V), I+1, U);
decode_msg_IOI                                    ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_IOI                                    ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EncodedIssuer'             , V), I+1, U);
decode_msg_IOI                                    ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'SecurityDesc'              , V), I+1, U);
decode_msg_IOI                                    ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_IOI                                    ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_IOI                                    ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Pool'                      , V), I+1, U);
decode_msg_IOI                                    ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_IOI                                    ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CPProgram'                 , V), I+1, U);
decode_msg_IOI                                    ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CPRegType'                 , V), I+1, U);
decode_msg_IOI                                    ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_IOI_grpEvents/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoEvents'                  , G), I+1, U);
decode_msg_IOI                                    ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'DatedDate'                 , V), I+1, U);
decode_msg_IOI                                    ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_IOI                                    ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'AgreementDesc'             , V), I+1, U);
decode_msg_IOI                                    ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'AgreementID'               , V), I+1, U);
decode_msg_IOI                                    ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'AgreementDate'             , V), I+1, U);
decode_msg_IOI                                    ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'AgreementCurrency'         , V), I+1, U);
decode_msg_IOI                                    ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'TerminationType'           , V), I+1, U);
decode_msg_IOI                                    ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'StartDate'                 , V), I+1, U);
decode_msg_IOI                                    ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EndDate'                   , V), I+1, U);
decode_msg_IOI                                    ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'DeliveryType'              , V), I+1, U);
decode_msg_IOI                                    ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'MarginRatio'               , V), I+1, U);
decode_msg_IOI                                    ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_IOI_grpUnderlyings/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoUnderlyings'             , G), I+1, U);
decode_msg_IOI                                    ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Side'                      , V), I+1, U);
decode_msg_IOI                                    ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'QtyType'                   , V), I+1, U);
decode_msg_IOI                                    ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'OrderQty'                  , V), I+1, U);
decode_msg_IOI                                    ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'CashOrderQty'              , V), I+1, U);
decode_msg_IOI                                    ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'OrderPercent'              , V), I+1, U);
decode_msg_IOI                                    ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'RoundingDirection'         , V), I+1, U);
decode_msg_IOI                                    ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'RoundingModulus'           , V), I+1, U);
decode_msg_IOI                                    ([{'IOIQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IOIQty'                    , V), I+1, U);
decode_msg_IOI                                    ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Currency'                  , V), I+1, U);
decode_msg_IOI                                    ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_IOI_grpStipulations/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoStipulations'            , G), I+1, U);
decode_msg_IOI                                    ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_IOI_grpLegs/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoLegs'                    , G), I+1, U);
decode_msg_IOI                                    ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'PriceType'                 , V), I+1, U);
decode_msg_IOI                                    ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Price'                     , V), I+1, U);
decode_msg_IOI                                    ([{'ValidUntilTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'ValidUntilTime'            , V), I+1, U);
decode_msg_IOI                                    ([{'IOIQltyInd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IOIQltyInd'                , V), I+1, U);
decode_msg_IOI                                    ([{'IOINaturalFlag'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'IOINaturalFlag'            , V), I+1, U);
decode_msg_IOI                                    ([{'NoIOIQualifiers'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpIOIQualifiers, N, T, fun fix_groups:decode_IOI_grpIOIQualifiers/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoIOIQualifiers'           , G), I+1, U);
decode_msg_IOI                                    ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Text'                      , V), I+1, U);
decode_msg_IOI                                    ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EncodedTextLen'            , V), I+1, U);
decode_msg_IOI                                    ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'EncodedText'               , V), I+1, U);
decode_msg_IOI                                    ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'TransactTime'              , V), I+1, U);
decode_msg_IOI                                    ([{'URLLink'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'URLLink'                   , V), I+1, U);
decode_msg_IOI                                    ([{'NoRoutingIDs'              , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRoutingIDs, N, T, fun fix_groups:decode_IOI_grpRoutingIDs/2), decode_msg_IOI(L, ?MAP_SET(R, 'IOI', 'NoRoutingIDs'              , G), I+1, U);
decode_msg_IOI                                    ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Spread'                    , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_IOI                                    ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_IOI                                    ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'YieldType'                 , V), I+1, U);
decode_msg_IOI                                    ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'Yield'                     , V), I+1, U);
decode_msg_IOI                                    ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'YieldCalcDate'             , V), I+1, U);
decode_msg_IOI                                    ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_IOI                                    ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_IOI                                    ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_IOI(T, ?MAP_SET(R, 'IOI', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_IOI                                    ([{K,V}|T], R, I, U)                                       -> decode_msg_IOI([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_IOI                                    ([H|T], R, I, U) -> decode_msg_IOI(T, R, I, [H|U]);
decode_msg_IOI                                    ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Advertisement                          ([{'AdvId'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'AdvId'                     , V), I+1, U);
decode_msg_Advertisement                          ([{'AdvTransType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'AdvTransType'              , V), I+1, U);
decode_msg_Advertisement                          ([{'AdvRefID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'AdvRefID'                  , V), I+1, U);
decode_msg_Advertisement                          ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Symbol'                    , V), I+1, U);
decode_msg_Advertisement                          ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SymbolSfx'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SecurityID'                , V), I+1, U);
decode_msg_Advertisement                          ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SecurityIDSource'          , V), I+1, U);
decode_msg_Advertisement                          ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_Advertisement_grpSecurityAltID/2), decode_msg_Advertisement(L, ?MAP_SET(R, 'Advertisement', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_Advertisement                          ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Product'                   , V), I+1, U);
decode_msg_Advertisement                          ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CFICode'                   , V), I+1, U);
decode_msg_Advertisement                          ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SecurityType'              , V), I+1, U);
decode_msg_Advertisement                          ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SecuritySubType'           , V), I+1, U);
decode_msg_Advertisement                          ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_Advertisement                          ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'MaturityDate'              , V), I+1, U);
decode_msg_Advertisement                          ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'PutOrCall'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_Advertisement                          ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'IssueDate'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_Advertisement                          ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_Advertisement                          ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'RepurchaseRate'            , V), I+1, U);
decode_msg_Advertisement                          ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Factor'                    , V), I+1, U);
decode_msg_Advertisement                          ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CreditRating'              , V), I+1, U);
decode_msg_Advertisement                          ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'InstrRegistry'             , V), I+1, U);
decode_msg_Advertisement                          ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CountryOfIssue'            , V), I+1, U);
decode_msg_Advertisement                          ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_Advertisement                          ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_Advertisement                          ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'RedemptionDate'            , V), I+1, U);
decode_msg_Advertisement                          ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'StrikePrice'               , V), I+1, U);
decode_msg_Advertisement                          ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'StrikeCurrency'            , V), I+1, U);
decode_msg_Advertisement                          ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'OptAttribute'              , V), I+1, U);
decode_msg_Advertisement                          ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'ContractMultiplier'        , V), I+1, U);
decode_msg_Advertisement                          ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CouponRate'                , V), I+1, U);
decode_msg_Advertisement                          ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SecurityExchange'          , V), I+1, U);
decode_msg_Advertisement                          ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Issuer'                    , V), I+1, U);
decode_msg_Advertisement                          ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_Advertisement                          ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'EncodedIssuer'             , V), I+1, U);
decode_msg_Advertisement                          ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'SecurityDesc'              , V), I+1, U);
decode_msg_Advertisement                          ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_Advertisement                          ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_Advertisement                          ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Pool'                      , V), I+1, U);
decode_msg_Advertisement                          ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_Advertisement                          ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CPProgram'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'CPRegType'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_Advertisement_grpEvents/2), decode_msg_Advertisement(L, ?MAP_SET(R, 'Advertisement', 'NoEvents'                  , G), I+1, U);
decode_msg_Advertisement                          ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'DatedDate'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_Advertisement                          ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_Advertisement_grpLegs/2), decode_msg_Advertisement(L, ?MAP_SET(R, 'Advertisement', 'NoLegs'                    , G), I+1, U);
decode_msg_Advertisement                          ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_Advertisement_grpUnderlyings/2), decode_msg_Advertisement(L, ?MAP_SET(R, 'Advertisement', 'NoUnderlyings'             , G), I+1, U);
decode_msg_Advertisement                          ([{'AdvSide'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'AdvSide'                   , V), I+1, U);
decode_msg_Advertisement                          ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Quantity'                  , V), I+1, U);
decode_msg_Advertisement                          ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'QtyType'                   , V), I+1, U);
decode_msg_Advertisement                          ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Price'                     , V), I+1, U);
decode_msg_Advertisement                          ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Currency'                  , V), I+1, U);
decode_msg_Advertisement                          ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'TradeDate'                 , V), I+1, U);
decode_msg_Advertisement                          ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'TransactTime'              , V), I+1, U);
decode_msg_Advertisement                          ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'Text'                      , V), I+1, U);
decode_msg_Advertisement                          ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'EncodedTextLen'            , V), I+1, U);
decode_msg_Advertisement                          ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'EncodedText'               , V), I+1, U);
decode_msg_Advertisement                          ([{'URLLink'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'URLLink'                   , V), I+1, U);
decode_msg_Advertisement                          ([{'LastMkt'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'LastMkt'                   , V), I+1, U);
decode_msg_Advertisement                          ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'TradingSessionID'          , V), I+1, U);
decode_msg_Advertisement                          ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Advertisement(T, ?MAP_SET(R, 'Advertisement', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_Advertisement                          ([{K,V}|T], R, I, U)                                       -> decode_msg_Advertisement([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Advertisement                          ([H|T], R, I, U) -> decode_msg_Advertisement(T, R, I, [H|U]);
decode_msg_Advertisement                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ExecutionReport                        ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrderID'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecondaryExecID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecondaryExecID'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ClOrdID'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrigClOrdID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrigClOrdID'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'QuoteRespID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'QuoteRespID'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrdStatusReqID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrdStatusReqID'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MassStatusReqID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MassStatusReqID'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TotNumReports'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TotNumReports'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastRptRequested'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastRptRequested'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_ExecutionReport_grpPartyIDs/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_ExecutionReport                        ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoContraBrokers'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpContraBrokers, N, T, fun fix_groups:decode_ExecutionReport_grpContraBrokers/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoContraBrokers'           , G), I+1, U);
decode_msg_ExecutionReport                        ([{'ListID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ListID'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CrossID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CrossID'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrigCrossID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrigCrossID'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CrossType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CrossType'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecID'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecRefID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecRefID'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecType'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrdStatus'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrdStatus'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'WorkingIndicator'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'WorkingIndicator'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrdRejReason'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrdRejReason'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecRestatementReason'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecRestatementReason'     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Account'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AcctIDSource'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AccountType'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DayBookingInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DayBookingInst'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BookingUnit'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BookingUnit'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PreallocMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PreallocMethod'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlType'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlDate'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CashMargin'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CashMargin'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ClearingFeeIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ClearingFeeIndicator'      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Symbol'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecurityID'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_ExecutionReport_grpSecurityAltID/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_ExecutionReport                        ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Product'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CFICode'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecurityType'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MaturityDate'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'IssueDate'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_ExecutionReport                        ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Factor'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CreditRating'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'StrikePrice'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OptAttribute'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CouponRate'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Issuer'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Pool'                      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CPProgram'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CPRegType'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_ExecutionReport_grpEvents/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoEvents'                  , G), I+1, U);
decode_msg_ExecutionReport                        ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DatedDate'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AgreementDesc'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AgreementID'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AgreementDate'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AgreementCurrency'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TerminationType'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'StartDate'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EndDate'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DeliveryType'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MarginRatio'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_ExecutionReport_grpUnderlyings/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_ExecutionReport                        ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Side'                      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_ExecutionReport_grpStipulations/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoStipulations'            , G), I+1, U);
decode_msg_ExecutionReport                        ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'QtyType'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrderQty'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CashOrderQty'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrderPercent'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RoundingDirection'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RoundingModulus'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrdType'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PriceType'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Price'                     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'StopPx'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PegOffsetValue'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PegMoveType'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PegOffsetType'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PegLimitType'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PegRoundDirection'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PegScope'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionInst'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionScope'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PeggedPrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PeggedPrice'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DiscretionPrice'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DiscretionPrice'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TargetStrategy'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ParticipationRate'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TargetStrategyPerformance' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TargetStrategyPerformance' , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Currency'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ComplianceID'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SolicitedFlag'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SolicitedFlag'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TimeInForce'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EffectiveTime'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExpireDate'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExpireTime'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecInst'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrderCapacity'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrderRestrictions'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrderRestrictions'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastQty'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastQty'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'UnderlyingLastQty'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'UnderlyingLastQty'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastPx'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'UnderlyingLastPx'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'UnderlyingLastPx'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastParPx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastParPx'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastSpotRate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastSpotRate'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastForwardPoints'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastForwardPoints'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastMkt'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastMkt'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TradingSessionID'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TimeBracket'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TimeBracket'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastCapacity'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastCapacity'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LeavesQty'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LeavesQty'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CumQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CumQty'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AvgPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AvgPx'                     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DayOrderQty'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DayOrderQty'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DayCumQty'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DayCumQty'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'DayAvgPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'DayAvgPx'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'GTBookingInst'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TradeDate'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TransactTime'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ReportToExch'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ReportToExch'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Commission'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CommType'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CommCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CommCurrency'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'FundRenewWaiv'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'FundRenewWaiv'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Spread'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_ExecutionReport                        ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'YieldType'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Yield'                     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'YieldCalcDate'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'GrossTradeAmt'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'GrossTradeAmt'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NumDaysInterest'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'NumDaysInterest'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExDate'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AccruedInterestRate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AccruedInterestRate'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'InterestAtMaturity'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'InterestAtMaturity'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'StartCash'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EndCash'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TradedFlatSwitch'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TradedFlatSwitch'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BasisFeatureDate'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BasisFeatureDate'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BasisFeaturePrice'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BasisFeaturePrice'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Concession'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Concession'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TotalTakedown'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TotalTakedown'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NetMoney'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'NetMoney'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlCurrAmt'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlCurrAmt'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlCurrency'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlCurrency'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlCurrFxRate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlCurrFxRate'           , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlCurrFxRateCalc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlCurrFxRateCalc'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'HandlInst'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MinQty'                    , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MaxFloor'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PositionEffect'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MaxShow'                   , V), I+1, U);
decode_msg_ExecutionReport                        ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'BookingType'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Text'                      , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_ExecutionReport                        ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'EncodedText'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'SettlDate2'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'SettlDate2'                , V), I+1, U);
decode_msg_ExecutionReport                        ([{'OrderQty2'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'OrderQty2'                 , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastForwardPoints2'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastForwardPoints2'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MultiLegReportingType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MultiLegReportingType'     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CancellationRights'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_ExecutionReport                        ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'RegistID'                  , V), I+1, U);
decode_msg_ExecutionReport                        ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'Designation'               , V), I+1, U);
decode_msg_ExecutionReport                        ([{'TransBkdTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'TransBkdTime'              , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecValuationPoint'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecValuationPoint'        , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecPriceType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecPriceType'             , V), I+1, U);
decode_msg_ExecutionReport                        ([{'ExecPriceAdjustment'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'ExecPriceAdjustment'       , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PriorityIndicator'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PriorityIndicator'         , V), I+1, U);
decode_msg_ExecutionReport                        ([{'PriceImprovement'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'PriceImprovement'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'LastLiquidityInd'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'LastLiquidityInd'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoContAmts'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpContAmts, N, T, fun fix_groups:decode_ExecutionReport_grpContAmts/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoContAmts'                , G), I+1, U);
decode_msg_ExecutionReport                        ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_ExecutionReport_grpLegs/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoLegs'                    , G), I+1, U);
decode_msg_ExecutionReport                        ([{'CopyMsgIndicator'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ExecutionReport(T, ?MAP_SET(R, 'ExecutionReport', 'CopyMsgIndicator'          , V), I+1, U);
decode_msg_ExecutionReport                        ([{'NoMiscFees'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMiscFees, N, T, fun fix_groups:decode_ExecutionReport_grpMiscFees/2), decode_msg_ExecutionReport(L, ?MAP_SET(R, 'ExecutionReport', 'NoMiscFees'                , G), I+1, U);
decode_msg_ExecutionReport                        ([{K,V}|T], R, I, U)                                       -> decode_msg_ExecutionReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ExecutionReport                        ([H|T], R, I, U) -> decode_msg_ExecutionReport(T, R, I, [H|U]);
decode_msg_ExecutionReport                        ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderCancelReject                      ([{'OrderID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'OrderID'             , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'SecondaryOrderID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'SecondaryOrderID'    , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'SecondaryClOrdID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'SecondaryClOrdID'    , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'ClOrdID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'ClOrdID'             , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'ClOrdLinkID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'ClOrdLinkID'         , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'OrigClOrdID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'OrigClOrdID'         , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'OrdStatus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'OrdStatus'           , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'WorkingIndicator'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'WorkingIndicator'    , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'OrigOrdModTime'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'OrigOrdModTime'      , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'ListID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'ListID'              , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'Account'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'Account'             , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'AcctIDSource'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'AcctIDSource'        , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'AccountType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'AccountType'         , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'TradeOriginationDate', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'TradeOriginationDate', V), I+1, U);
decode_msg_OrderCancelReject                      ([{'TradeDate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'TradeDate'           , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'TransactTime'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'TransactTime'        , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'CxlRejResponseTo'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'CxlRejResponseTo'    , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'CxlRejReason'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'CxlRejReason'        , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'Text'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'Text'                , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'EncodedTextLen'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'EncodedTextLen'      , V), I+1, U);
decode_msg_OrderCancelReject                      ([{'EncodedText'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReject(T, ?MAP_SET(R, 'OrderCancelReject', 'EncodedText'         , V), I+1, U);
decode_msg_OrderCancelReject                      ([{K,V}|T], R, I, U)                                 -> decode_msg_OrderCancelReject([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderCancelReject                      ([H|T], R, I, U) -> decode_msg_OrderCancelReject(T, R, I, [H|U]);
decode_msg_OrderCancelReject                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Logon                                  ([{'EncryptMethod'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'EncryptMethod'        , V), I+1, U);
decode_msg_Logon                                  ([{'HeartBtInt'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'HeartBtInt'           , V), I+1, U);
decode_msg_Logon                                  ([{'RawDataLength'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'RawDataLength'        , V), I+1, U);
decode_msg_Logon                                  ([{'RawData'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'RawData'              , V), I+1, U);
decode_msg_Logon                                  ([{'ResetSeqNumFlag'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'ResetSeqNumFlag'      , V), I+1, U);
decode_msg_Logon                                  ([{'NextExpectedMsgSeqNum', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'NextExpectedMsgSeqNum', V), I+1, U);
decode_msg_Logon                                  ([{'MaxMessageSize'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'MaxMessageSize'       , V), I+1, U);
decode_msg_Logon                                  ([{'NoMsgTypes'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMsgTypes, N, T, fun fix_groups:decode_Logon_grpMsgTypes/2), decode_msg_Logon(L, ?MAP_SET(R, 'Logon', 'NoMsgTypes'           , G), I+1, U);
decode_msg_Logon                                  ([{'TestMessageIndicator' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'TestMessageIndicator' , V), I+1, U);
decode_msg_Logon                                  ([{'Username'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'Username'             , V), I+1, U);
decode_msg_Logon                                  ([{'Password'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Logon(T, ?MAP_SET(R, 'Logon', 'Password'             , V), I+1, U);
decode_msg_Logon                                  ([{K,V}|T], R, I, U)                                  -> decode_msg_Logon([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Logon                                  ([H|T], R, I, U) -> decode_msg_Logon(T, R, I, [H|U]);
decode_msg_Logon                                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_News                                   ([{'OrigTime'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'OrigTime'          , V), I+1, U);
decode_msg_News                                   ([{'Urgency'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'Urgency'           , V), I+1, U);
decode_msg_News                                   ([{'Headline'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'Headline'          , V), I+1, U);
decode_msg_News                                   ([{'EncodedHeadlineLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'EncodedHeadlineLen', V), I+1, U);
decode_msg_News                                   ([{'EncodedHeadline'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'EncodedHeadline'   , V), I+1, U);
decode_msg_News                                   ([{'NoRoutingIDs'      , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRoutingIDs, N, T, fun fix_groups:decode_News_grpRoutingIDs/2), decode_msg_News(L, ?MAP_SET(R, 'News', 'NoRoutingIDs'      , G), I+1, U);
decode_msg_News                                   ([{'NoRelatedSym'      , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_News_grpRelatedSym/2), decode_msg_News(L, ?MAP_SET(R, 'News', 'NoRelatedSym'      , G), I+1, U);
decode_msg_News                                   ([{'NoLegs'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_News_grpLegs/2), decode_msg_News(L, ?MAP_SET(R, 'News', 'NoLegs'            , G), I+1, U);
decode_msg_News                                   ([{'NoUnderlyings'     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_News_grpUnderlyings/2), decode_msg_News(L, ?MAP_SET(R, 'News', 'NoUnderlyings'     , G), I+1, U);
decode_msg_News                                   ([{'NoLinesOfText'     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLinesOfText, N, T, fun fix_groups:decode_News_grpLinesOfText/2), decode_msg_News(L, ?MAP_SET(R, 'News', 'NoLinesOfText'     , G), I+1, U);
decode_msg_News                                   ([{'URLLink'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'URLLink'           , V), I+1, U);
decode_msg_News                                   ([{'RawDataLength'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'RawDataLength'     , V), I+1, U);
decode_msg_News                                   ([{'RawData'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_News(T, ?MAP_SET(R, 'News', 'RawData'           , V), I+1, U);
decode_msg_News                                   ([{K,V}|T], R, I, U)                               -> decode_msg_News([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_News                                   ([H|T], R, I, U) -> decode_msg_News(T, R, I, [H|U]);
decode_msg_News                                   ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Email                                  ([{'EmailThreadID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'EmailThreadID'    , V), I+1, U);
decode_msg_Email                                  ([{'EmailType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'EmailType'        , V), I+1, U);
decode_msg_Email                                  ([{'OrigTime'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'OrigTime'         , V), I+1, U);
decode_msg_Email                                  ([{'Subject'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'Subject'          , V), I+1, U);
decode_msg_Email                                  ([{'EncodedSubjectLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'EncodedSubjectLen', V), I+1, U);
decode_msg_Email                                  ([{'EncodedSubject'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'EncodedSubject'   , V), I+1, U);
decode_msg_Email                                  ([{'NoRoutingIDs'     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRoutingIDs, N, T, fun fix_groups:decode_Email_grpRoutingIDs/2), decode_msg_Email(L, ?MAP_SET(R, 'Email', 'NoRoutingIDs'     , G), I+1, U);
decode_msg_Email                                  ([{'NoRelatedSym'     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_Email_grpRelatedSym/2), decode_msg_Email(L, ?MAP_SET(R, 'Email', 'NoRelatedSym'     , G), I+1, U);
decode_msg_Email                                  ([{'NoUnderlyings'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_Email_grpUnderlyings/2), decode_msg_Email(L, ?MAP_SET(R, 'Email', 'NoUnderlyings'    , G), I+1, U);
decode_msg_Email                                  ([{'NoLegs'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_Email_grpLegs/2), decode_msg_Email(L, ?MAP_SET(R, 'Email', 'NoLegs'           , G), I+1, U);
decode_msg_Email                                  ([{'OrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'OrderID'          , V), I+1, U);
decode_msg_Email                                  ([{'ClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'ClOrdID'          , V), I+1, U);
decode_msg_Email                                  ([{'NoLinesOfText'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLinesOfText, N, T, fun fix_groups:decode_Email_grpLinesOfText/2), decode_msg_Email(L, ?MAP_SET(R, 'Email', 'NoLinesOfText'    , G), I+1, U);
decode_msg_Email                                  ([{'RawDataLength'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'RawDataLength'    , V), I+1, U);
decode_msg_Email                                  ([{'RawData'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Email(T, ?MAP_SET(R, 'Email', 'RawData'          , V), I+1, U);
decode_msg_Email                                  ([{K,V}|T], R, I, U)                              -> decode_msg_Email([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Email                                  ([H|T], R, I, U) -> decode_msg_Email(T, R, I, [H|U]);
decode_msg_Email                                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_NewOrderSingle                         ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ClOrdID'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_NewOrderSingle_grpPartyIDs/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoPartyIDs'                , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TradeDate'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Account'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AcctIDSource'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AccountType'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DayBookingInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DayBookingInst'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BookingUnit'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BookingUnit'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PreallocMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PreallocMethod'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AllocID'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_NewOrderSingle_grpAllocs/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoAllocs'                  , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SettlType'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SettlDate'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CashMargin'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CashMargin'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ClearingFeeIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ClearingFeeIndicator'      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'HandlInst'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ExecInst'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MinQty'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MaxFloor'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ExDestination'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_NewOrderSingle_grpTradingSessions/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoTradingSessions'         , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'ProcessCode'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ProcessCode'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Symbol'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SymbolSfx'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecurityID'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecurityIDSource'          , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_NewOrderSingle_grpSecurityAltID/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Product'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CFICode'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecurityType'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecuritySubType'           , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MaturityDate'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PutOrCall'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'IssueDate'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RepurchaseRate'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Factor'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CreditRating'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'InstrRegistry'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CountryOfIssue'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RedemptionDate'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'StrikePrice'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'StrikeCurrency'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OptAttribute'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ContractMultiplier'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CouponRate'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecurityExchange'          , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Issuer'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EncodedIssuer'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SecurityDesc'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Pool'                      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CPProgram'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CPRegType'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_NewOrderSingle_grpEvents/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoEvents'                  , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DatedDate'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AgreementDesc'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AgreementID'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AgreementDate'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'AgreementCurrency'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TerminationType'           , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'StartDate'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EndDate'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DeliveryType'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MarginRatio'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_NewOrderSingle_grpUnderlyings/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoUnderlyings'             , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'PrevClosePx'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PrevClosePx'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Side'                      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'LocateReqd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'LocateReqd'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TransactTime'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_NewOrderSingle_grpStipulations/2), decode_msg_NewOrderSingle(L, ?MAP_SET(R, 'NewOrderSingle', 'NoStipulations'            , G), I+1, U);
decode_msg_NewOrderSingle                         ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'QtyType'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OrderQty'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CashOrderQty'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OrderPercent'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RoundingDirection'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RoundingModulus'           , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OrdType'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PriceType'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Price'                     , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'StopPx'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Spread'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'YieldType'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Yield'                     , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'YieldCalcDate'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Currency'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ComplianceID'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SolicitedFlag'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SolicitedFlag'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'IOIID'                     , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'QuoteID'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TimeInForce'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EffectiveTime'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ExpireDate'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ExpireTime'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'GTBookingInst'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Commission'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CommType'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CommCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CommCurrency'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'FundRenewWaiv'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'FundRenewWaiv'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OrderCapacity'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OrderRestrictions'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OrderRestrictions'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ForexReq'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ForexReq'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SettlCurrency'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SettlCurrency'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'BookingType'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Text'                      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EncodedTextLen'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'EncodedText'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'SettlDate2'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'SettlDate2'                , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'OrderQty2'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'OrderQty2'                 , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Price2'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Price2'                    , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PositionEffect'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CoveredOrUncovered'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CoveredOrUncovered'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MaxShow'                   , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PegOffsetValue'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PegMoveType'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PegOffsetType'             , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PegLimitType'              , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PegRoundDirection'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'PegScope'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionInst'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'DiscretionScope'           , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TargetStrategy'            , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'ParticipationRate'         , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'CancellationRights'        , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'RegistID'                  , V), I+1, U);
decode_msg_NewOrderSingle                         ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderSingle(T, ?MAP_SET(R, 'NewOrderSingle', 'Designation'               , V), I+1, U);
decode_msg_NewOrderSingle                         ([{K,V}|T], R, I, U)                                       -> decode_msg_NewOrderSingle([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_NewOrderSingle                         ([H|T], R, I, U) -> decode_msg_NewOrderSingle(T, R, I, [H|U]);
decode_msg_NewOrderSingle                         ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_NewOrderList                           ([{'ListID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'ListID'                    , V), I+1, U);
decode_msg_NewOrderList                           ([{'BidID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'BidID'                     , V), I+1, U);
decode_msg_NewOrderList                           ([{'ClientBidID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'ClientBidID'               , V), I+1, U);
decode_msg_NewOrderList                           ([{'ProgRptReqs'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'ProgRptReqs'               , V), I+1, U);
decode_msg_NewOrderList                           ([{'BidType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'BidType'                   , V), I+1, U);
decode_msg_NewOrderList                           ([{'ProgPeriodInterval'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'ProgPeriodInterval'        , V), I+1, U);
decode_msg_NewOrderList                           ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'CancellationRights'        , V), I+1, U);
decode_msg_NewOrderList                           ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_NewOrderList                           ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'RegistID'                  , V), I+1, U);
decode_msg_NewOrderList                           ([{'ListExecInstType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'ListExecInstType'          , V), I+1, U);
decode_msg_NewOrderList                           ([{'ListExecInst'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'ListExecInst'              , V), I+1, U);
decode_msg_NewOrderList                           ([{'EncodedListExecInstLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'EncodedListExecInstLen'    , V), I+1, U);
decode_msg_NewOrderList                           ([{'EncodedListExecInst'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'EncodedListExecInst'       , V), I+1, U);
decode_msg_NewOrderList                           ([{'AllowableOneSidednessPct'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'AllowableOneSidednessPct'  , V), I+1, U);
decode_msg_NewOrderList                           ([{'AllowableOneSidednessValue', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'AllowableOneSidednessValue', V), I+1, U);
decode_msg_NewOrderList                           ([{'AllowableOneSidednessCurr' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'AllowableOneSidednessCurr' , V), I+1, U);
decode_msg_NewOrderList                           ([{'TotNoOrders'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'TotNoOrders'               , V), I+1, U);
decode_msg_NewOrderList                           ([{'LastFragment'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderList(T, ?MAP_SET(R, 'NewOrderList', 'LastFragment'              , V), I+1, U);
decode_msg_NewOrderList                           ([{'NoOrders'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpOrders, N, T, fun fix_groups:decode_NewOrderList_grpOrders/2), decode_msg_NewOrderList(L, ?MAP_SET(R, 'NewOrderList', 'NoOrders'                  , G), I+1, U);
decode_msg_NewOrderList                           ([{K,V}|T], R, I, U)                                       -> decode_msg_NewOrderList([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_NewOrderList                           ([H|T], R, I, U) -> decode_msg_NewOrderList(T, R, I, [H|U]);
decode_msg_NewOrderList                           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderCancelRequest                     ([{'OrigClOrdID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'OrigClOrdID'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'OrderID'                   , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'ClOrdID'                   , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'ListID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'ListID'                    , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'OrigOrdModTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'OrigOrdModTime'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Account'                   , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'AcctIDSource'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'AccountType'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_OrderCancelRequest_grpPartyIDs/2), decode_msg_OrderCancelRequest(L, ?MAP_SET(R, 'OrderCancelRequest', 'NoPartyIDs'                , G), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Symbol'                    , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecurityID'                , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_OrderCancelRequest_grpSecurityAltID/2), decode_msg_OrderCancelRequest(L, ?MAP_SET(R, 'OrderCancelRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Product'                   , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CFICode'                   , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecurityType'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Factor'                    , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CreditRating'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CouponRate'                , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Issuer'                    , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Pool'                      , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_OrderCancelRequest_grpEvents/2), decode_msg_OrderCancelRequest(L, ?MAP_SET(R, 'OrderCancelRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_OrderCancelRequest                     ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'AgreementID'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'TerminationType'           , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'StartDate'                 , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EndDate'                   , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_OrderCancelRequest_grpUnderlyings/2), decode_msg_OrderCancelRequest(L, ?MAP_SET(R, 'OrderCancelRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Side'                      , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'TransactTime'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'OrderQty'                  , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'CashOrderQty'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'OrderPercent'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'RoundingDirection'         , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'RoundingModulus'           , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'ComplianceID'              , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'Text'                      , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EncodedTextLen'            , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelRequest(T, ?MAP_SET(R, 'OrderCancelRequest', 'EncodedText'               , V), I+1, U);
decode_msg_OrderCancelRequest                     ([{K,V}|T], R, I, U)                                       -> decode_msg_OrderCancelRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderCancelRequest                     ([H|T], R, I, U) -> decode_msg_OrderCancelRequest(T, R, I, [H|U]);
decode_msg_OrderCancelRequest                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderCancelReplaceRequest              ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrderID'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_OrderCancelReplaceRequest_grpPartyIDs/2), decode_msg_OrderCancelReplaceRequest(L, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'NoPartyIDs'                , G), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TradeDate'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrigClOrdID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrigClOrdID'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ClOrdID'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ListID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ListID'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrigOrdModTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrigOrdModTime'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Account'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AcctIDSource'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AccountType'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DayBookingInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DayBookingInst'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BookingUnit'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BookingUnit'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PreallocMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PreallocMethod'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AllocID'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_OrderCancelReplaceRequest_grpAllocs/2), decode_msg_OrderCancelReplaceRequest(L, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'NoAllocs'                  , G), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SettlType'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SettlDate'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CashMargin'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CashMargin'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ClearingFeeIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ClearingFeeIndicator'      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'HandlInst'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ExecInst'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MinQty'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MaxFloor'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ExDestination'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_OrderCancelReplaceRequest_grpTradingSessions/2), decode_msg_OrderCancelReplaceRequest(L, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'NoTradingSessions'         , G), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Symbol'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecurityID'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_OrderCancelReplaceRequest_grpSecurityAltID/2), decode_msg_OrderCancelReplaceRequest(L, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Product'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CFICode'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecurityType'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Factor'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CreditRating'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CouponRate'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Issuer'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Pool'                      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_OrderCancelReplaceRequest_grpEvents/2), decode_msg_OrderCancelReplaceRequest(L, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AgreementID'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TerminationType'           , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'StartDate'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EndDate'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_OrderCancelReplaceRequest_grpUnderlyings/2), decode_msg_OrderCancelReplaceRequest(L, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Side'                      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TransactTime'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'QtyType'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrderQty'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CashOrderQty'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrderPercent'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RoundingDirection'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RoundingModulus'           , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrdType'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PriceType'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Price'                     , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'StopPx'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Spread'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'YieldType'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Yield'                     , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'YieldCalcDate'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PegOffsetValue'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PegMoveType'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PegOffsetType'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PegLimitType'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PegRoundDirection'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PegScope'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionInst'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'DiscretionScope'           , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TargetStrategy'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ParticipationRate'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ComplianceID'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SolicitedFlag'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SolicitedFlag'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Currency'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'TimeInForce'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EffectiveTime'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ExpireDate'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ExpireTime'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'GTBookingInst'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Commission'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CommType'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CommCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CommCurrency'              , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'FundRenewWaiv'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'FundRenewWaiv'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrderCapacity'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrderRestrictions'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrderRestrictions'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'ForexReq'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'ForexReq'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SettlCurrency'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SettlCurrency'             , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'BookingType'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Text'                      , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EncodedTextLen'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'EncodedText'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'SettlDate2'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'SettlDate2'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'OrderQty2'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'OrderQty2'                 , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Price2'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Price2'                    , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'PositionEffect'            , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CoveredOrUncovered'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CoveredOrUncovered'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MaxShow'                   , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'LocateReqd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'LocateReqd'                , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'CancellationRights'        , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'RegistID'                  , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, ?MAP_SET(R, 'OrderCancelReplaceRequest', 'Designation'               , V), I+1, U);
decode_msg_OrderCancelReplaceRequest              ([{K,V}|T], R, I, U)                                       -> decode_msg_OrderCancelReplaceRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderCancelReplaceRequest              ([H|T], R, I, U) -> decode_msg_OrderCancelReplaceRequest(T, R, I, [H|U]);
decode_msg_OrderCancelReplaceRequest              ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderStatusRequest                     ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'OrderID'                   , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'ClOrdID'                   , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_OrderStatusRequest_grpPartyIDs/2), decode_msg_OrderStatusRequest(L, ?MAP_SET(R, 'OrderStatusRequest', 'NoPartyIDs'                , G), I+1, U);
decode_msg_OrderStatusRequest                     ([{'OrdStatusReqID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'OrdStatusReqID'            , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Account'                   , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'AcctIDSource'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Symbol'                    , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecurityID'                , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_OrderStatusRequest_grpSecurityAltID/2), decode_msg_OrderStatusRequest(L, ?MAP_SET(R, 'OrderStatusRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Product'                   , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CFICode'                   , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecurityType'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Factor'                    , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CreditRating'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CouponRate'                , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Issuer'                    , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Pool'                      , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_OrderStatusRequest_grpEvents/2), decode_msg_OrderStatusRequest(L, ?MAP_SET(R, 'OrderStatusRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_OrderStatusRequest                     ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'AgreementID'               , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'TerminationType'           , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'StartDate'                 , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'EndDate'                   , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_OrderStatusRequest_grpUnderlyings/2), decode_msg_OrderStatusRequest(L, ?MAP_SET(R, 'OrderStatusRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_OrderStatusRequest                     ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderStatusRequest(T, ?MAP_SET(R, 'OrderStatusRequest', 'Side'                      , V), I+1, U);
decode_msg_OrderStatusRequest                     ([{K,V}|T], R, I, U)                                       -> decode_msg_OrderStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderStatusRequest                     ([H|T], R, I, U) -> decode_msg_OrderStatusRequest(T, R, I, [H|U]);
decode_msg_OrderStatusRequest                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_AllocationInstruction                  ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocID'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocTransType'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocTransType'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocType'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecondaryAllocID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecondaryAllocID'          , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'RefAllocID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'RefAllocID'                , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocCancReplaceReason'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocCancReplaceReason'    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocIntermedReqType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocIntermedReqType'      , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocLinkID'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocLinkType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocLinkType'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BookingRefID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BookingRefID'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AllocNoOrdersType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AllocNoOrdersType'         , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoOrders'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpOrders, N, T, fun fix_groups:decode_AllocationInstruction_grpOrders/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoOrders'                  , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_AllocationInstruction_grpExecs/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoExecs'                   , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'PreviouslyReported'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'PreviouslyReported'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'ReversalIndicator'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'ReversalIndicator'         , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'MatchType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'MatchType'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Side'                      , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Symbol'                    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SymbolSfx'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecurityID'                , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecurityIDSource'          , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_AllocationInstruction_grpSecurityAltID/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Product'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CFICode'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecurityType'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecuritySubType'           , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'MaturityDate'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'PutOrCall'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'IssueDate'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_AllocationInstruction                  ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'RepurchaseRate'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Factor'                    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CreditRating'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'InstrRegistry'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CountryOfIssue'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'RedemptionDate'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'StrikePrice'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'StrikeCurrency'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'OptAttribute'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'ContractMultiplier'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CouponRate'                , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecurityExchange'          , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Issuer'                    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EncodedIssuer'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SecurityDesc'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Pool'                      , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CPProgram'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'CPRegType'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_AllocationInstruction_grpEvents/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoEvents'                  , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'DatedDate'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'DeliveryForm'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'PctAtRisk'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_AllocationInstruction_grpInstrAttrib/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AgreementDesc'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AgreementID'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AgreementDate'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AgreementCurrency'         , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TerminationType'           , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'StartDate'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EndDate'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'DeliveryType'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'MarginRatio'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_AllocationInstruction_grpUnderlyings/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoUnderlyings'             , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_AllocationInstruction_grpLegs/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoLegs'                    , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Quantity'                  , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'QtyType'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'LastMkt'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'LastMkt'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TradingSessionID'          , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'PriceType'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AvgPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AvgPx'                     , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AvgParPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AvgParPx'                  , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Spread'                    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Currency'                  , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AvgPxPrecision'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AvgPxPrecision'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_AllocationInstruction_grpPartyIDs/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoPartyIDs'                , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TradeDate'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TransactTime'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SettlType'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'SettlDate'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'BookingType'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'GrossTradeAmt'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'GrossTradeAmt'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Concession'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Concession'                , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TotalTakedown'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TotalTakedown'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NetMoney'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'NetMoney'                  , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'PositionEffect'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AutoAcceptIndicator'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AutoAcceptIndicator'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Text'                      , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EncodedTextLen'            , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EncodedText'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NumDaysInterest'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'NumDaysInterest'           , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AccruedInterestRate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AccruedInterestRate'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TotalAccruedInterestAmt'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TotalAccruedInterestAmt'   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'InterestAtMaturity'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'InterestAtMaturity'        , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'StartCash'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'EndCash'                   , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'LegalConfirm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'LegalConfirm'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_AllocationInstruction_grpStipulations/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoStipulations'            , G), I+1, U);
decode_msg_AllocationInstruction                  ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'YieldType'                 , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'Yield'                     , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'YieldCalcDate'             , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'TotNoAllocs'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'TotNoAllocs'               , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'LastFragment'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstruction(T, ?MAP_SET(R, 'AllocationInstruction', 'LastFragment'              , V), I+1, U);
decode_msg_AllocationInstruction                  ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_AllocationInstruction_grpAllocs/2), decode_msg_AllocationInstruction(L, ?MAP_SET(R, 'AllocationInstruction', 'NoAllocs'                  , G), I+1, U);
decode_msg_AllocationInstruction                  ([{K,V}|T], R, I, U)                                       -> decode_msg_AllocationInstruction([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_AllocationInstruction                  ([H|T], R, I, U) -> decode_msg_AllocationInstruction(T, R, I, [H|U]);
decode_msg_AllocationInstruction                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ListCancelRequest                      ([{'ListID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'ListID'              , V), I+1, U);
decode_msg_ListCancelRequest                      ([{'TransactTime'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'TransactTime'        , V), I+1, U);
decode_msg_ListCancelRequest                      ([{'TradeOriginationDate', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'TradeOriginationDate', V), I+1, U);
decode_msg_ListCancelRequest                      ([{'TradeDate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'TradeDate'           , V), I+1, U);
decode_msg_ListCancelRequest                      ([{'Text'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'Text'                , V), I+1, U);
decode_msg_ListCancelRequest                      ([{'EncodedTextLen'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'EncodedTextLen'      , V), I+1, U);
decode_msg_ListCancelRequest                      ([{'EncodedText'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListCancelRequest(T, ?MAP_SET(R, 'ListCancelRequest', 'EncodedText'         , V), I+1, U);
decode_msg_ListCancelRequest                      ([{K,V}|T], R, I, U)                                 -> decode_msg_ListCancelRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ListCancelRequest                      ([H|T], R, I, U) -> decode_msg_ListCancelRequest(T, R, I, [H|U]);
decode_msg_ListCancelRequest                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ListExecute                            ([{'ListID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'ListID'        , V), I+1, U);
decode_msg_ListExecute                            ([{'ClientBidID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'ClientBidID'   , V), I+1, U);
decode_msg_ListExecute                            ([{'BidID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'BidID'         , V), I+1, U);
decode_msg_ListExecute                            ([{'TransactTime'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'TransactTime'  , V), I+1, U);
decode_msg_ListExecute                            ([{'Text'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'Text'          , V), I+1, U);
decode_msg_ListExecute                            ([{'EncodedTextLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'EncodedTextLen', V), I+1, U);
decode_msg_ListExecute                            ([{'EncodedText'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListExecute(T, ?MAP_SET(R, 'ListExecute', 'EncodedText'   , V), I+1, U);
decode_msg_ListExecute                            ([{K,V}|T], R, I, U)                           -> decode_msg_ListExecute([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ListExecute                            ([H|T], R, I, U) -> decode_msg_ListExecute(T, R, I, [H|U]);
decode_msg_ListExecute                            ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ListStatusRequest                      ([{'ListID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatusRequest(T, ?MAP_SET(R, 'ListStatusRequest', 'ListID'        , V), I+1, U);
decode_msg_ListStatusRequest                      ([{'Text'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatusRequest(T, ?MAP_SET(R, 'ListStatusRequest', 'Text'          , V), I+1, U);
decode_msg_ListStatusRequest                      ([{'EncodedTextLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatusRequest(T, ?MAP_SET(R, 'ListStatusRequest', 'EncodedTextLen', V), I+1, U);
decode_msg_ListStatusRequest                      ([{'EncodedText'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatusRequest(T, ?MAP_SET(R, 'ListStatusRequest', 'EncodedText'   , V), I+1, U);
decode_msg_ListStatusRequest                      ([{K,V}|T], R, I, U)                           -> decode_msg_ListStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ListStatusRequest                      ([H|T], R, I, U) -> decode_msg_ListStatusRequest(T, R, I, [H|U]);
decode_msg_ListStatusRequest                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ListStatus                             ([{'ListID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'ListID'                  , V), I+1, U);
decode_msg_ListStatus                             ([{'ListStatusType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'ListStatusType'          , V), I+1, U);
decode_msg_ListStatus                             ([{'NoRpts'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'NoRpts'                  , V), I+1, U);
decode_msg_ListStatus                             ([{'ListOrderStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'ListOrderStatus'         , V), I+1, U);
decode_msg_ListStatus                             ([{'RptSeq'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'RptSeq'                  , V), I+1, U);
decode_msg_ListStatus                             ([{'ListStatusText'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'ListStatusText'          , V), I+1, U);
decode_msg_ListStatus                             ([{'EncodedListStatusTextLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'EncodedListStatusTextLen', V), I+1, U);
decode_msg_ListStatus                             ([{'EncodedListStatusText'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'EncodedListStatusText'   , V), I+1, U);
decode_msg_ListStatus                             ([{'TransactTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'TransactTime'            , V), I+1, U);
decode_msg_ListStatus                             ([{'TotNoOrders'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'TotNoOrders'             , V), I+1, U);
decode_msg_ListStatus                             ([{'LastFragment'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStatus(T, ?MAP_SET(R, 'ListStatus', 'LastFragment'            , V), I+1, U);
decode_msg_ListStatus                             ([{'NoOrders'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpOrders, N, T, fun fix_groups:decode_ListStatus_grpOrders/2), decode_msg_ListStatus(L, ?MAP_SET(R, 'ListStatus', 'NoOrders'                , G), I+1, U);
decode_msg_ListStatus                             ([{K,V}|T], R, I, U)                                     -> decode_msg_ListStatus([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ListStatus                             ([H|T], R, I, U) -> decode_msg_ListStatus(T, R, I, [H|U]);
decode_msg_ListStatus                             ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_AllocationInstructionAck               ([{'AllocID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'AllocID'             , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'NoPartyIDs'          , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_AllocationInstructionAck_grpPartyIDs/2), decode_msg_AllocationInstructionAck(L, ?MAP_SET(R, 'AllocationInstructionAck', 'NoPartyIDs'          , G), I+1, U);
decode_msg_AllocationInstructionAck               ([{'SecondaryAllocID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'SecondaryAllocID'    , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'TradeDate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'TradeDate'           , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'TransactTime'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'TransactTime'        , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'AllocStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'AllocStatus'         , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'AllocRejCode'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'AllocRejCode'        , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'AllocType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'AllocType'           , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'AllocIntermedReqType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'AllocIntermedReqType', V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'MatchStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'MatchStatus'         , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'Product'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'Product'             , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'SecurityType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'SecurityType'        , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'Text'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'Text'                , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'EncodedTextLen'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'EncodedTextLen'      , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'EncodedText'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, ?MAP_SET(R, 'AllocationInstructionAck', 'EncodedText'         , V), I+1, U);
decode_msg_AllocationInstructionAck               ([{'NoAllocs'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_AllocationInstructionAck_grpAllocs/2), decode_msg_AllocationInstructionAck(L, ?MAP_SET(R, 'AllocationInstructionAck', 'NoAllocs'            , G), I+1, U);
decode_msg_AllocationInstructionAck               ([{K,V}|T], R, I, U)                                 -> decode_msg_AllocationInstructionAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_AllocationInstructionAck               ([H|T], R, I, U) -> decode_msg_AllocationInstructionAck(T, R, I, [H|U]);
decode_msg_AllocationInstructionAck               ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_DontKnowTrade                          ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'OrderID'                   , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'ExecID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'ExecID'                    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'DKReason'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'DKReason'                  , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Symbol'                    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SymbolSfx'                 , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecurityID'                , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecurityIDSource'          , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_DontKnowTrade_grpSecurityAltID/2), decode_msg_DontKnowTrade(L, ?MAP_SET(R, 'DontKnowTrade', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_DontKnowTrade                          ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Product'                   , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CFICode'                   , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecurityType'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecuritySubType'           , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'MaturityDate'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'PutOrCall'                 , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'IssueDate'                 , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_DontKnowTrade                          ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'RepurchaseRate'            , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Factor'                    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CreditRating'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'InstrRegistry'             , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CountryOfIssue'            , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'RedemptionDate'            , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'StrikePrice'               , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'StrikeCurrency'            , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'OptAttribute'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'ContractMultiplier'        , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CouponRate'                , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecurityExchange'          , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Issuer'                    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'EncodedIssuer'             , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'SecurityDesc'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Pool'                      , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CPProgram'                 , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CPRegType'                 , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_DontKnowTrade_grpEvents/2), decode_msg_DontKnowTrade(L, ?MAP_SET(R, 'DontKnowTrade', 'NoEvents'                  , G), I+1, U);
decode_msg_DontKnowTrade                          ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'DatedDate'                 , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_DontKnowTrade_grpUnderlyings/2), decode_msg_DontKnowTrade(L, ?MAP_SET(R, 'DontKnowTrade', 'NoUnderlyings'             , G), I+1, U);
decode_msg_DontKnowTrade                          ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_DontKnowTrade_grpLegs/2), decode_msg_DontKnowTrade(L, ?MAP_SET(R, 'DontKnowTrade', 'NoLegs'                    , G), I+1, U);
decode_msg_DontKnowTrade                          ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Side'                      , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'OrderQty'                  , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'CashOrderQty'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'OrderPercent'              , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'RoundingDirection'         , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'RoundingModulus'           , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'LastQty'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'LastQty'                   , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'LastPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'LastPx'                    , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'Text'                      , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'EncodedTextLen'            , V), I+1, U);
decode_msg_DontKnowTrade                          ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DontKnowTrade(T, ?MAP_SET(R, 'DontKnowTrade', 'EncodedText'               , V), I+1, U);
decode_msg_DontKnowTrade                          ([{K,V}|T], R, I, U)                                       -> decode_msg_DontKnowTrade([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_DontKnowTrade                          ([H|T], R, I, U) -> decode_msg_DontKnowTrade(T, R, I, [H|U]);
decode_msg_DontKnowTrade                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_QuoteRequest                           ([{'QuoteReqID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'QuoteReqID'    , V), I+1, U);
decode_msg_QuoteRequest                           ([{'RFQReqID'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'RFQReqID'      , V), I+1, U);
decode_msg_QuoteRequest                           ([{'ClOrdID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'ClOrdID'       , V), I+1, U);
decode_msg_QuoteRequest                           ([{'OrderCapacity' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'OrderCapacity' , V), I+1, U);
decode_msg_QuoteRequest                           ([{'NoRelatedSym'  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_QuoteRequest_grpRelatedSym/2), decode_msg_QuoteRequest(L, ?MAP_SET(R, 'QuoteRequest', 'NoRelatedSym'  , G), I+1, U);
decode_msg_QuoteRequest                           ([{'Text'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'Text'          , V), I+1, U);
decode_msg_QuoteRequest                           ([{'EncodedTextLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'EncodedTextLen', V), I+1, U);
decode_msg_QuoteRequest                           ([{'EncodedText'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequest(T, ?MAP_SET(R, 'QuoteRequest', 'EncodedText'   , V), I+1, U);
decode_msg_QuoteRequest                           ([{K,V}|T], R, I, U)                           -> decode_msg_QuoteRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_QuoteRequest                           ([H|T], R, I, U) -> decode_msg_QuoteRequest(T, R, I, [H|U]);
decode_msg_QuoteRequest                           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Quote                                  ([{'QuoteReqID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'QuoteReqID'                , V), I+1, U);
decode_msg_Quote                                  ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'QuoteID'                   , V), I+1, U);
decode_msg_Quote                                  ([{'QuoteRespID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'QuoteRespID'               , V), I+1, U);
decode_msg_Quote                                  ([{'QuoteType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'QuoteType'                 , V), I+1, U);
decode_msg_Quote                                  ([{'NoQuoteQualifiers'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpQuoteQualifiers, N, T, fun fix_groups:decode_Quote_grpQuoteQualifiers/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoQuoteQualifiers'         , G), I+1, U);
decode_msg_Quote                                  ([{'QuoteResponseLevel'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'QuoteResponseLevel'        , V), I+1, U);
decode_msg_Quote                                  ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_Quote_grpPartyIDs/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoPartyIDs'                , G), I+1, U);
decode_msg_Quote                                  ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'TradingSessionID'          , V), I+1, U);
decode_msg_Quote                                  ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_Quote                                  ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Symbol'                    , V), I+1, U);
decode_msg_Quote                                  ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SymbolSfx'                 , V), I+1, U);
decode_msg_Quote                                  ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SecurityID'                , V), I+1, U);
decode_msg_Quote                                  ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SecurityIDSource'          , V), I+1, U);
decode_msg_Quote                                  ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_Quote_grpSecurityAltID/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_Quote                                  ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Product'                   , V), I+1, U);
decode_msg_Quote                                  ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CFICode'                   , V), I+1, U);
decode_msg_Quote                                  ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SecurityType'              , V), I+1, U);
decode_msg_Quote                                  ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SecuritySubType'           , V), I+1, U);
decode_msg_Quote                                  ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_Quote                                  ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MaturityDate'              , V), I+1, U);
decode_msg_Quote                                  ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'PutOrCall'                 , V), I+1, U);
decode_msg_Quote                                  ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_Quote                                  ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'IssueDate'                 , V), I+1, U);
decode_msg_Quote                                  ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_Quote                                  ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_Quote                                  ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'RepurchaseRate'            , V), I+1, U);
decode_msg_Quote                                  ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Factor'                    , V), I+1, U);
decode_msg_Quote                                  ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CreditRating'              , V), I+1, U);
decode_msg_Quote                                  ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'InstrRegistry'             , V), I+1, U);
decode_msg_Quote                                  ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CountryOfIssue'            , V), I+1, U);
decode_msg_Quote                                  ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_Quote                                  ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_Quote                                  ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'RedemptionDate'            , V), I+1, U);
decode_msg_Quote                                  ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'StrikePrice'               , V), I+1, U);
decode_msg_Quote                                  ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'StrikeCurrency'            , V), I+1, U);
decode_msg_Quote                                  ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OptAttribute'              , V), I+1, U);
decode_msg_Quote                                  ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'ContractMultiplier'        , V), I+1, U);
decode_msg_Quote                                  ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CouponRate'                , V), I+1, U);
decode_msg_Quote                                  ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SecurityExchange'          , V), I+1, U);
decode_msg_Quote                                  ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Issuer'                    , V), I+1, U);
decode_msg_Quote                                  ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_Quote                                  ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EncodedIssuer'             , V), I+1, U);
decode_msg_Quote                                  ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SecurityDesc'              , V), I+1, U);
decode_msg_Quote                                  ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_Quote                                  ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_Quote                                  ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Pool'                      , V), I+1, U);
decode_msg_Quote                                  ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_Quote                                  ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CPProgram'                 , V), I+1, U);
decode_msg_Quote                                  ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CPRegType'                 , V), I+1, U);
decode_msg_Quote                                  ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_Quote_grpEvents/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoEvents'                  , G), I+1, U);
decode_msg_Quote                                  ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'DatedDate'                 , V), I+1, U);
decode_msg_Quote                                  ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_Quote                                  ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'AgreementDesc'             , V), I+1, U);
decode_msg_Quote                                  ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'AgreementID'               , V), I+1, U);
decode_msg_Quote                                  ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'AgreementDate'             , V), I+1, U);
decode_msg_Quote                                  ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'AgreementCurrency'         , V), I+1, U);
decode_msg_Quote                                  ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'TerminationType'           , V), I+1, U);
decode_msg_Quote                                  ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'StartDate'                 , V), I+1, U);
decode_msg_Quote                                  ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EndDate'                   , V), I+1, U);
decode_msg_Quote                                  ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'DeliveryType'              , V), I+1, U);
decode_msg_Quote                                  ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MarginRatio'               , V), I+1, U);
decode_msg_Quote                                  ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_Quote_grpUnderlyings/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoUnderlyings'             , G), I+1, U);
decode_msg_Quote                                  ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Side'                      , V), I+1, U);
decode_msg_Quote                                  ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OrderQty'                  , V), I+1, U);
decode_msg_Quote                                  ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CashOrderQty'              , V), I+1, U);
decode_msg_Quote                                  ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OrderPercent'              , V), I+1, U);
decode_msg_Quote                                  ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'RoundingDirection'         , V), I+1, U);
decode_msg_Quote                                  ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'RoundingModulus'           , V), I+1, U);
decode_msg_Quote                                  ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SettlType'                 , V), I+1, U);
decode_msg_Quote                                  ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SettlDate'                 , V), I+1, U);
decode_msg_Quote                                  ([{'SettlDate2'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SettlDate2'                , V), I+1, U);
decode_msg_Quote                                  ([{'OrderQty2'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OrderQty2'                 , V), I+1, U);
decode_msg_Quote                                  ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Currency'                  , V), I+1, U);
decode_msg_Quote                                  ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_Quote_grpStipulations/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoStipulations'            , G), I+1, U);
decode_msg_Quote                                  ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Account'                   , V), I+1, U);
decode_msg_Quote                                  ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'AcctIDSource'              , V), I+1, U);
decode_msg_Quote                                  ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'AccountType'               , V), I+1, U);
decode_msg_Quote                                  ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_Quote_grpLegs/2), decode_msg_Quote(L, ?MAP_SET(R, 'Quote', 'NoLegs'                    , G), I+1, U);
decode_msg_Quote                                  ([{'BidPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BidPx'                     , V), I+1, U);
decode_msg_Quote                                  ([{'OfferPx'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OfferPx'                   , V), I+1, U);
decode_msg_Quote                                  ([{'MktBidPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MktBidPx'                  , V), I+1, U);
decode_msg_Quote                                  ([{'MktOfferPx'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MktOfferPx'                , V), I+1, U);
decode_msg_Quote                                  ([{'MinBidSize'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MinBidSize'                , V), I+1, U);
decode_msg_Quote                                  ([{'BidSize'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BidSize'                   , V), I+1, U);
decode_msg_Quote                                  ([{'MinOfferSize'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MinOfferSize'              , V), I+1, U);
decode_msg_Quote                                  ([{'OfferSize'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OfferSize'                 , V), I+1, U);
decode_msg_Quote                                  ([{'ValidUntilTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'ValidUntilTime'            , V), I+1, U);
decode_msg_Quote                                  ([{'BidSpotRate'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BidSpotRate'               , V), I+1, U);
decode_msg_Quote                                  ([{'OfferSpotRate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OfferSpotRate'             , V), I+1, U);
decode_msg_Quote                                  ([{'BidForwardPoints'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BidForwardPoints'          , V), I+1, U);
decode_msg_Quote                                  ([{'OfferForwardPoints'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OfferForwardPoints'        , V), I+1, U);
decode_msg_Quote                                  ([{'MidPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MidPx'                     , V), I+1, U);
decode_msg_Quote                                  ([{'BidYield'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BidYield'                  , V), I+1, U);
decode_msg_Quote                                  ([{'MidYield'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'MidYield'                  , V), I+1, U);
decode_msg_Quote                                  ([{'OfferYield'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OfferYield'                , V), I+1, U);
decode_msg_Quote                                  ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'TransactTime'              , V), I+1, U);
decode_msg_Quote                                  ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OrdType'                   , V), I+1, U);
decode_msg_Quote                                  ([{'BidForwardPoints2'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BidForwardPoints2'         , V), I+1, U);
decode_msg_Quote                                  ([{'OfferForwardPoints2'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OfferForwardPoints2'       , V), I+1, U);
decode_msg_Quote                                  ([{'SettlCurrBidFxRate'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SettlCurrBidFxRate'        , V), I+1, U);
decode_msg_Quote                                  ([{'SettlCurrOfferFxRate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SettlCurrOfferFxRate'      , V), I+1, U);
decode_msg_Quote                                  ([{'SettlCurrFxRateCalc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'SettlCurrFxRateCalc'       , V), I+1, U);
decode_msg_Quote                                  ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CommType'                  , V), I+1, U);
decode_msg_Quote                                  ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Commission'                , V), I+1, U);
decode_msg_Quote                                  ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_Quote                                  ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'ExDestination'             , V), I+1, U);
decode_msg_Quote                                  ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'OrderCapacity'             , V), I+1, U);
decode_msg_Quote                                  ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'PriceType'                 , V), I+1, U);
decode_msg_Quote                                  ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Spread'                    , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_Quote                                  ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_Quote                                  ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'YieldType'                 , V), I+1, U);
decode_msg_Quote                                  ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Yield'                     , V), I+1, U);
decode_msg_Quote                                  ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'YieldCalcDate'             , V), I+1, U);
decode_msg_Quote                                  ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_Quote                                  ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_Quote                                  ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_Quote                                  ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'Text'                      , V), I+1, U);
decode_msg_Quote                                  ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EncodedTextLen'            , V), I+1, U);
decode_msg_Quote                                  ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Quote(T, ?MAP_SET(R, 'Quote', 'EncodedText'               , V), I+1, U);
decode_msg_Quote                                  ([{K,V}|T], R, I, U)                                       -> decode_msg_Quote([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Quote                                  ([H|T], R, I, U) -> decode_msg_Quote(T, R, I, [H|U]);
decode_msg_Quote                                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SettlementInstructions                 ([{'SettlInstMsgID'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'SettlInstMsgID'     , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'SettlInstReqID'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'SettlInstReqID'     , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'SettlInstMode'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'SettlInstMode'      , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'SettlInstReqRejCode', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'SettlInstReqRejCode', V), I+1, U);
decode_msg_SettlementInstructions                 ([{'Text'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'Text'               , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'EncodedTextLen'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'EncodedTextLen'     , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'EncodedText'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'EncodedText'        , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'ClOrdID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'ClOrdID'            , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'TransactTime'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructions(T, ?MAP_SET(R, 'SettlementInstructions', 'TransactTime'       , V), I+1, U);
decode_msg_SettlementInstructions                 ([{'NoSettlInst'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSettlInst, N, T, fun fix_groups:decode_SettlementInstructions_grpSettlInst/2), decode_msg_SettlementInstructions(L, ?MAP_SET(R, 'SettlementInstructions', 'NoSettlInst'        , G), I+1, U);
decode_msg_SettlementInstructions                 ([{K,V}|T], R, I, U)                                -> decode_msg_SettlementInstructions([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SettlementInstructions                 ([H|T], R, I, U) -> decode_msg_SettlementInstructions(T, R, I, [H|U]);
decode_msg_SettlementInstructions                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MarketDataRequest                      ([{'MDReqID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'MDReqID'                , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'SubscriptionRequestType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'SubscriptionRequestType', V), I+1, U);
decode_msg_MarketDataRequest                      ([{'MarketDepth'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'MarketDepth'            , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'MDUpdateType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'MDUpdateType'           , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'AggregatedBook'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'AggregatedBook'         , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'OpenCloseSettlFlag'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'OpenCloseSettlFlag'     , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'Scope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'Scope'                  , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'MDImplicitDelete'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'MDImplicitDelete'       , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'NoMDEntryTypes'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMDEntryTypes, N, T, fun fix_groups:decode_MarketDataRequest_grpMDEntryTypes/2), decode_msg_MarketDataRequest(L, ?MAP_SET(R, 'MarketDataRequest', 'NoMDEntryTypes'         , G), I+1, U);
decode_msg_MarketDataRequest                      ([{'NoRelatedSym'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_MarketDataRequest_grpRelatedSym/2), decode_msg_MarketDataRequest(L, ?MAP_SET(R, 'MarketDataRequest', 'NoRelatedSym'           , G), I+1, U);
decode_msg_MarketDataRequest                      ([{'NoTradingSessions'      , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_MarketDataRequest_grpTradingSessions/2), decode_msg_MarketDataRequest(L, ?MAP_SET(R, 'MarketDataRequest', 'NoTradingSessions'      , G), I+1, U);
decode_msg_MarketDataRequest                      ([{'ApplQueueAction'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'ApplQueueAction'        , V), I+1, U);
decode_msg_MarketDataRequest                      ([{'ApplQueueMax'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequest(T, ?MAP_SET(R, 'MarketDataRequest', 'ApplQueueMax'           , V), I+1, U);
decode_msg_MarketDataRequest                      ([{K,V}|T], R, I, U)                                    -> decode_msg_MarketDataRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MarketDataRequest                      ([H|T], R, I, U) -> decode_msg_MarketDataRequest(T, R, I, [H|U]);
decode_msg_MarketDataRequest                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MarketDataSnapshotFullRefresh          ([{'MDReqID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'MDReqID'                   , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'Symbol'                    , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SymbolSfx'                 , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SecurityID'                , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SecurityIDSource'          , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_MarketDataSnapshotFullRefresh_grpSecurityAltID/2), decode_msg_MarketDataSnapshotFullRefresh(L, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'Product'                   , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CFICode'                   , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SecurityType'              , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SecuritySubType'           , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'MaturityDate'              , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'PutOrCall'                 , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'IssueDate'                 , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'RepurchaseRate'            , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'Factor'                    , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CreditRating'              , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'InstrRegistry'             , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CountryOfIssue'            , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'RedemptionDate'            , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'StrikePrice'               , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'StrikeCurrency'            , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'OptAttribute'              , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'ContractMultiplier'        , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CouponRate'                , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SecurityExchange'          , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'Issuer'                    , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'EncodedIssuer'             , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'SecurityDesc'              , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'Pool'                      , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CPProgram'                 , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CPRegType'                 , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_MarketDataSnapshotFullRefresh_grpEvents/2), decode_msg_MarketDataSnapshotFullRefresh(L, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'NoEvents'                  , G), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'DatedDate'                 , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_MarketDataSnapshotFullRefresh_grpUnderlyings/2), decode_msg_MarketDataSnapshotFullRefresh(L, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'NoUnderlyings'             , G), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_MarketDataSnapshotFullRefresh_grpLegs/2), decode_msg_MarketDataSnapshotFullRefresh(L, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'NoLegs'                    , G), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'FinancialStatus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'FinancialStatus'           , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'CorporateAction'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'CorporateAction'           , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'NetChgPrevDay'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'NetChgPrevDay'             , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'NoMDEntries'               , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMDEntries, N, T, fun fix_groups:decode_MarketDataSnapshotFullRefresh_grpMDEntries/2), decode_msg_MarketDataSnapshotFullRefresh(L, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'NoMDEntries'               , G), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'ApplQueueDepth'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'ApplQueueDepth'            , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{'ApplQueueResolution'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, ?MAP_SET(R, 'MarketDataSnapshotFullRefresh', 'ApplQueueResolution'       , V), I+1, U);
decode_msg_MarketDataSnapshotFullRefresh          ([{K,V}|T], R, I, U)                                       -> decode_msg_MarketDataSnapshotFullRefresh([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MarketDataSnapshotFullRefresh          ([H|T], R, I, U) -> decode_msg_MarketDataSnapshotFullRefresh(T, R, I, [H|U]);
decode_msg_MarketDataSnapshotFullRefresh          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MarketDataIncrementalRefresh           ([{'MDReqID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataIncrementalRefresh(T, ?MAP_SET(R, 'MarketDataIncrementalRefresh', 'MDReqID'            , V), I+1, U);
decode_msg_MarketDataIncrementalRefresh           ([{'NoMDEntries'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMDEntries, N, T, fun fix_groups:decode_MarketDataIncrementalRefresh_grpMDEntries/2), decode_msg_MarketDataIncrementalRefresh(L, ?MAP_SET(R, 'MarketDataIncrementalRefresh', 'NoMDEntries'        , G), I+1, U);
decode_msg_MarketDataIncrementalRefresh           ([{'ApplQueueDepth'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataIncrementalRefresh(T, ?MAP_SET(R, 'MarketDataIncrementalRefresh', 'ApplQueueDepth'     , V), I+1, U);
decode_msg_MarketDataIncrementalRefresh           ([{'ApplQueueResolution', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataIncrementalRefresh(T, ?MAP_SET(R, 'MarketDataIncrementalRefresh', 'ApplQueueResolution', V), I+1, U);
decode_msg_MarketDataIncrementalRefresh           ([{K,V}|T], R, I, U)                                -> decode_msg_MarketDataIncrementalRefresh([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MarketDataIncrementalRefresh           ([H|T], R, I, U) -> decode_msg_MarketDataIncrementalRefresh(T, R, I, [H|U]);
decode_msg_MarketDataIncrementalRefresh           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MarketDataRequestReject                ([{'MDReqID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequestReject(T, ?MAP_SET(R, 'MarketDataRequestReject', 'MDReqID'       , V), I+1, U);
decode_msg_MarketDataRequestReject                ([{'MDReqRejReason', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequestReject(T, ?MAP_SET(R, 'MarketDataRequestReject', 'MDReqRejReason', V), I+1, U);
decode_msg_MarketDataRequestReject                ([{'NoAltMDSource' , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAltMDSource, N, T, fun fix_groups:decode_MarketDataRequestReject_grpAltMDSource/2), decode_msg_MarketDataRequestReject(L, ?MAP_SET(R, 'MarketDataRequestReject', 'NoAltMDSource' , G), I+1, U);
decode_msg_MarketDataRequestReject                ([{'Text'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequestReject(T, ?MAP_SET(R, 'MarketDataRequestReject', 'Text'          , V), I+1, U);
decode_msg_MarketDataRequestReject                ([{'EncodedTextLen', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequestReject(T, ?MAP_SET(R, 'MarketDataRequestReject', 'EncodedTextLen', V), I+1, U);
decode_msg_MarketDataRequestReject                ([{'EncodedText'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MarketDataRequestReject(T, ?MAP_SET(R, 'MarketDataRequestReject', 'EncodedText'   , V), I+1, U);
decode_msg_MarketDataRequestReject                ([{K,V}|T], R, I, U)                           -> decode_msg_MarketDataRequestReject([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MarketDataRequestReject                ([H|T], R, I, U) -> decode_msg_MarketDataRequestReject(T, R, I, [H|U]);
decode_msg_MarketDataRequestReject                ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_QuoteCancel                            ([{'QuoteReqID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'QuoteReqID'         , V), I+1, U);
decode_msg_QuoteCancel                            ([{'QuoteID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'QuoteID'            , V), I+1, U);
decode_msg_QuoteCancel                            ([{'QuoteCancelType'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'QuoteCancelType'    , V), I+1, U);
decode_msg_QuoteCancel                            ([{'QuoteResponseLevel' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'QuoteResponseLevel' , V), I+1, U);
decode_msg_QuoteCancel                            ([{'NoPartyIDs'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_QuoteCancel_grpPartyIDs/2), decode_msg_QuoteCancel(L, ?MAP_SET(R, 'QuoteCancel', 'NoPartyIDs'         , G), I+1, U);
decode_msg_QuoteCancel                            ([{'Account'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'Account'            , V), I+1, U);
decode_msg_QuoteCancel                            ([{'AcctIDSource'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'AcctIDSource'       , V), I+1, U);
decode_msg_QuoteCancel                            ([{'AccountType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'AccountType'        , V), I+1, U);
decode_msg_QuoteCancel                            ([{'TradingSessionID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'TradingSessionID'   , V), I+1, U);
decode_msg_QuoteCancel                            ([{'TradingSessionSubID', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteCancel(T, ?MAP_SET(R, 'QuoteCancel', 'TradingSessionSubID', V), I+1, U);
decode_msg_QuoteCancel                            ([{'NoQuoteEntries'     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpQuoteEntries, N, T, fun fix_groups:decode_QuoteCancel_grpQuoteEntries/2), decode_msg_QuoteCancel(L, ?MAP_SET(R, 'QuoteCancel', 'NoQuoteEntries'     , G), I+1, U);
decode_msg_QuoteCancel                            ([{K,V}|T], R, I, U)                                -> decode_msg_QuoteCancel([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_QuoteCancel                            ([H|T], R, I, U) -> decode_msg_QuoteCancel(T, R, I, [H|U]);
decode_msg_QuoteCancel                            ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_QuoteStatusRequest                     ([{'QuoteStatusReqID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'QuoteStatusReqID'          , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'QuoteID'                   , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'Symbol'                    , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SecurityID'                , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_QuoteStatusRequest_grpSecurityAltID/2), decode_msg_QuoteStatusRequest(L, ?MAP_SET(R, 'QuoteStatusRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'Product'                   , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CFICode'                   , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SecurityType'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'Factor'                    , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CreditRating'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CouponRate'                , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'Issuer'                    , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'Pool'                      , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_QuoteStatusRequest_grpEvents/2), decode_msg_QuoteStatusRequest(L, ?MAP_SET(R, 'QuoteStatusRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'AgreementID'               , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'TerminationType'           , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'StartDate'                 , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'EndDate'                   , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_QuoteStatusRequest_grpUnderlyings/2), decode_msg_QuoteStatusRequest(L, ?MAP_SET(R, 'QuoteStatusRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_QuoteStatusRequest_grpLegs/2), decode_msg_QuoteStatusRequest(L, ?MAP_SET(R, 'QuoteStatusRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_QuoteStatusRequest_grpPartyIDs/2), decode_msg_QuoteStatusRequest(L, ?MAP_SET(R, 'QuoteStatusRequest', 'NoPartyIDs'                , G), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'Account'                   , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'AcctIDSource'              , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'AccountType'               , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'TradingSessionID'          , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, ?MAP_SET(R, 'QuoteStatusRequest', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_QuoteStatusRequest                     ([{K,V}|T], R, I, U)                                       -> decode_msg_QuoteStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_QuoteStatusRequest                     ([H|T], R, I, U) -> decode_msg_QuoteStatusRequest(T, R, I, [H|U]);
decode_msg_QuoteStatusRequest                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MassQuoteAcknowledgement               ([{'QuoteReqID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'QuoteReqID'        , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'QuoteID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'QuoteID'           , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'QuoteStatus'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'QuoteStatus'       , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'QuoteRejectReason' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'QuoteRejectReason' , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'QuoteResponseLevel', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'QuoteResponseLevel', V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'QuoteType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'QuoteType'         , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'NoPartyIDs'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_MassQuoteAcknowledgement_grpPartyIDs/2), decode_msg_MassQuoteAcknowledgement(L, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'NoPartyIDs'        , G), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'Account'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'Account'           , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'AcctIDSource'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'AcctIDSource'      , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'AccountType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'AccountType'       , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'Text'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'Text'              , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'EncodedTextLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'EncodedTextLen'    , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'EncodedText'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'EncodedText'       , V), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{'NoQuoteSets'       , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpQuoteSets, N, T, fun fix_groups:decode_MassQuoteAcknowledgement_grpQuoteSets/2), decode_msg_MassQuoteAcknowledgement(L, ?MAP_SET(R, 'MassQuoteAcknowledgement', 'NoQuoteSets'       , G), I+1, U);
decode_msg_MassQuoteAcknowledgement               ([{K,V}|T], R, I, U)                               -> decode_msg_MassQuoteAcknowledgement([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MassQuoteAcknowledgement               ([H|T], R, I, U) -> decode_msg_MassQuoteAcknowledgement(T, R, I, [H|U]);
decode_msg_MassQuoteAcknowledgement               ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityDefinitionRequest              ([{'SecurityReqID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityReqID'             , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecurityRequestType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityRequestType'       , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Symbol'                    , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityID'                , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_SecurityDefinitionRequest_grpSecurityAltID/2), decode_msg_SecurityDefinitionRequest(L, ?MAP_SET(R, 'SecurityDefinitionRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Product'                   , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CFICode'                   , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityType'              , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Factor'                    , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CreditRating'              , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CouponRate'                , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Issuer'                    , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Pool'                      , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_SecurityDefinitionRequest_grpEvents/2), decode_msg_SecurityDefinitionRequest(L, ?MAP_SET(R, 'SecurityDefinitionRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'DeliveryForm'              , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'PctAtRisk'                 , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_SecurityDefinitionRequest_grpInstrAttrib/2), decode_msg_SecurityDefinitionRequest(L, ?MAP_SET(R, 'SecurityDefinitionRequest', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_SecurityDefinitionRequest_grpUnderlyings/2), decode_msg_SecurityDefinitionRequest(L, ?MAP_SET(R, 'SecurityDefinitionRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Currency'                  , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'Text'                      , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'EncodedTextLen'            , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'EncodedText'               , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'TradingSessionID'          , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_SecurityDefinitionRequest_grpLegs/2), decode_msg_SecurityDefinitionRequest(L, ?MAP_SET(R, 'SecurityDefinitionRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'ExpirationCycle'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'ExpirationCycle'           , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, ?MAP_SET(R, 'SecurityDefinitionRequest', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_SecurityDefinitionRequest              ([{K,V}|T], R, I, U)                                       -> decode_msg_SecurityDefinitionRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityDefinitionRequest              ([H|T], R, I, U) -> decode_msg_SecurityDefinitionRequest(T, R, I, [H|U]);
decode_msg_SecurityDefinitionRequest              ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityDefinition                     ([{'SecurityReqID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityReqID'             , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityResponseID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityResponseID'        , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityResponseType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityResponseType'      , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Symbol'                    , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SymbolSfx'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityID'                , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityIDSource'          , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_SecurityDefinition_grpSecurityAltID/2), decode_msg_SecurityDefinition(L, ?MAP_SET(R, 'SecurityDefinition', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_SecurityDefinition                     ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Product'                   , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CFICode'                   , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityType'              , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecuritySubType'           , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'MaturityDate'              , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'PutOrCall'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'IssueDate'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_SecurityDefinition                     ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'RepurchaseRate'            , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Factor'                    , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CreditRating'              , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'InstrRegistry'             , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CountryOfIssue'            , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'RedemptionDate'            , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'StrikePrice'               , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'StrikeCurrency'            , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'OptAttribute'              , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'ContractMultiplier'        , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CouponRate'                , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityExchange'          , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Issuer'                    , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'EncodedIssuer'             , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'SecurityDesc'              , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Pool'                      , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CPProgram'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'CPRegType'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_SecurityDefinition_grpEvents/2), decode_msg_SecurityDefinition(L, ?MAP_SET(R, 'SecurityDefinition', 'NoEvents'                  , G), I+1, U);
decode_msg_SecurityDefinition                     ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'DatedDate'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'DeliveryForm'              , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'PctAtRisk'                 , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_SecurityDefinition_grpInstrAttrib/2), decode_msg_SecurityDefinition(L, ?MAP_SET(R, 'SecurityDefinition', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_SecurityDefinition                     ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_SecurityDefinition_grpUnderlyings/2), decode_msg_SecurityDefinition(L, ?MAP_SET(R, 'SecurityDefinition', 'NoUnderlyings'             , G), I+1, U);
decode_msg_SecurityDefinition                     ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Currency'                  , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'TradingSessionID'          , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'Text'                      , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'EncodedTextLen'            , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'EncodedText'               , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_SecurityDefinition_grpLegs/2), decode_msg_SecurityDefinition(L, ?MAP_SET(R, 'SecurityDefinition', 'NoLegs'                    , G), I+1, U);
decode_msg_SecurityDefinition                     ([{'ExpirationCycle'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'ExpirationCycle'           , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'RoundLot'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'RoundLot'                  , V), I+1, U);
decode_msg_SecurityDefinition                     ([{'MinTradeVol'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityDefinition(T, ?MAP_SET(R, 'SecurityDefinition', 'MinTradeVol'               , V), I+1, U);
decode_msg_SecurityDefinition                     ([{K,V}|T], R, I, U)                                       -> decode_msg_SecurityDefinition([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityDefinition                     ([H|T], R, I, U) -> decode_msg_SecurityDefinition(T, R, I, [H|U]);
decode_msg_SecurityDefinition                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityStatusRequest                  ([{'SecurityStatusReqID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecurityStatusReqID'       , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'Symbol'                    , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecurityID'                , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_SecurityStatusRequest_grpSecurityAltID/2), decode_msg_SecurityStatusRequest(L, ?MAP_SET(R, 'SecurityStatusRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'Product'                   , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CFICode'                   , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecurityType'              , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'Factor'                    , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CreditRating'              , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CouponRate'                , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'Issuer'                    , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'Pool'                      , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_SecurityStatusRequest_grpEvents/2), decode_msg_SecurityStatusRequest(L, ?MAP_SET(R, 'SecurityStatusRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'DeliveryForm'              , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'PctAtRisk'                 , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_SecurityStatusRequest_grpInstrAttrib/2), decode_msg_SecurityStatusRequest(L, ?MAP_SET(R, 'SecurityStatusRequest', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_SecurityStatusRequest_grpUnderlyings/2), decode_msg_SecurityStatusRequest(L, ?MAP_SET(R, 'SecurityStatusRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_SecurityStatusRequest_grpLegs/2), decode_msg_SecurityStatusRequest(L, ?MAP_SET(R, 'SecurityStatusRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'Currency'                  , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'TradingSessionID'          , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, ?MAP_SET(R, 'SecurityStatusRequest', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_SecurityStatusRequest                  ([{K,V}|T], R, I, U)                                       -> decode_msg_SecurityStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityStatusRequest                  ([H|T], R, I, U) -> decode_msg_SecurityStatusRequest(T, R, I, [H|U]);
decode_msg_SecurityStatusRequest                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityStatus                         ([{'SecurityStatusReqID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityStatusReqID'       , V), I+1, U);
decode_msg_SecurityStatus                         ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Symbol'                    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SymbolSfx'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityID'                , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityIDSource'          , V), I+1, U);
decode_msg_SecurityStatus                         ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_SecurityStatus_grpSecurityAltID/2), decode_msg_SecurityStatus(L, ?MAP_SET(R, 'SecurityStatus', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_SecurityStatus                         ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Product'                   , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CFICode'                   , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityType'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecuritySubType'           , V), I+1, U);
decode_msg_SecurityStatus                         ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_SecurityStatus                         ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'MaturityDate'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'PutOrCall'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_SecurityStatus                         ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'IssueDate'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_SecurityStatus                         ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'RepurchaseRate'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Factor'                    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CreditRating'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'InstrRegistry'             , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CountryOfIssue'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_SecurityStatus                         ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'RedemptionDate'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'StrikePrice'               , V), I+1, U);
decode_msg_SecurityStatus                         ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'StrikeCurrency'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'OptAttribute'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'ContractMultiplier'        , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CouponRate'                , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityExchange'          , V), I+1, U);
decode_msg_SecurityStatus                         ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Issuer'                    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_SecurityStatus                         ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'EncodedIssuer'             , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityDesc'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_SecurityStatus                         ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Pool'                      , V), I+1, U);
decode_msg_SecurityStatus                         ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CPProgram'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CPRegType'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_SecurityStatus_grpEvents/2), decode_msg_SecurityStatus(L, ?MAP_SET(R, 'SecurityStatus', 'NoEvents'                  , G), I+1, U);
decode_msg_SecurityStatus                         ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'DatedDate'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_SecurityStatus                         ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'DeliveryForm'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'PctAtRisk'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_SecurityStatus_grpInstrAttrib/2), decode_msg_SecurityStatus(L, ?MAP_SET(R, 'SecurityStatus', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_SecurityStatus                         ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_SecurityStatus_grpUnderlyings/2), decode_msg_SecurityStatus(L, ?MAP_SET(R, 'SecurityStatus', 'NoUnderlyings'             , G), I+1, U);
decode_msg_SecurityStatus                         ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_SecurityStatus_grpLegs/2), decode_msg_SecurityStatus(L, ?MAP_SET(R, 'SecurityStatus', 'NoLegs'                    , G), I+1, U);
decode_msg_SecurityStatus                         ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Currency'                  , V), I+1, U);
decode_msg_SecurityStatus                         ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'TradingSessionID'          , V), I+1, U);
decode_msg_SecurityStatus                         ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_SecurityStatus                         ([{'UnsolicitedIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'UnsolicitedIndicator'      , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SecurityTradingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SecurityTradingStatus'     , V), I+1, U);
decode_msg_SecurityStatus                         ([{'FinancialStatus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'FinancialStatus'           , V), I+1, U);
decode_msg_SecurityStatus                         ([{'CorporateAction'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'CorporateAction'           , V), I+1, U);
decode_msg_SecurityStatus                         ([{'HaltReasonChar'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'HaltReasonChar'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'InViewOfCommon'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'InViewOfCommon'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'DueToRelated'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'DueToRelated'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'BuyVolume'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'BuyVolume'                 , V), I+1, U);
decode_msg_SecurityStatus                         ([{'SellVolume'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'SellVolume'                , V), I+1, U);
decode_msg_SecurityStatus                         ([{'HighPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'HighPx'                    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'LowPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'LowPx'                     , V), I+1, U);
decode_msg_SecurityStatus                         ([{'LastPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'LastPx'                    , V), I+1, U);
decode_msg_SecurityStatus                         ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'TransactTime'              , V), I+1, U);
decode_msg_SecurityStatus                         ([{'Adjustment'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Adjustment'                , V), I+1, U);
decode_msg_SecurityStatus                         ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'Text'                      , V), I+1, U);
decode_msg_SecurityStatus                         ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'EncodedTextLen'            , V), I+1, U);
decode_msg_SecurityStatus                         ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityStatus(T, ?MAP_SET(R, 'SecurityStatus', 'EncodedText'               , V), I+1, U);
decode_msg_SecurityStatus                         ([{K,V}|T], R, I, U)                                       -> decode_msg_SecurityStatus([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityStatus                         ([H|T], R, I, U) -> decode_msg_SecurityStatus(T, R, I, [H|U]);
decode_msg_SecurityStatus                         ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TradingSessionStatusRequest            ([{'TradSesReqID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, ?MAP_SET(R, 'TradingSessionStatusRequest', 'TradSesReqID'           , V), I+1, U);
decode_msg_TradingSessionStatusRequest            ([{'TradingSessionID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, ?MAP_SET(R, 'TradingSessionStatusRequest', 'TradingSessionID'       , V), I+1, U);
decode_msg_TradingSessionStatusRequest            ([{'TradingSessionSubID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, ?MAP_SET(R, 'TradingSessionStatusRequest', 'TradingSessionSubID'    , V), I+1, U);
decode_msg_TradingSessionStatusRequest            ([{'TradSesMethod'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, ?MAP_SET(R, 'TradingSessionStatusRequest', 'TradSesMethod'          , V), I+1, U);
decode_msg_TradingSessionStatusRequest            ([{'TradSesMode'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, ?MAP_SET(R, 'TradingSessionStatusRequest', 'TradSesMode'            , V), I+1, U);
decode_msg_TradingSessionStatusRequest            ([{'SubscriptionRequestType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, ?MAP_SET(R, 'TradingSessionStatusRequest', 'SubscriptionRequestType', V), I+1, U);
decode_msg_TradingSessionStatusRequest            ([{K,V}|T], R, I, U)                                    -> decode_msg_TradingSessionStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TradingSessionStatusRequest            ([H|T], R, I, U) -> decode_msg_TradingSessionStatusRequest(T, R, I, [H|U]);
decode_msg_TradingSessionStatusRequest            ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TradingSessionStatus                   ([{'TradSesReqID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesReqID'          , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradingSessionID'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradingSessionID'      , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradingSessionSubID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradingSessionSubID'   , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesMethod'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesMethod'         , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesMode'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesMode'           , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'UnsolicitedIndicator'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'UnsolicitedIndicator'  , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesStatus'         , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesStatusRejReason', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesStatusRejReason', V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesStartTime'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesStartTime'      , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesOpenTime'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesOpenTime'       , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesPreCloseTime'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesPreCloseTime'   , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesCloseTime'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesCloseTime'      , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TradSesEndTime'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TradSesEndTime'        , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'TotalVolumeTraded'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'TotalVolumeTraded'     , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'Text'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'Text'                  , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'EncodedTextLen'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'EncodedTextLen'        , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{'EncodedText'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradingSessionStatus(T, ?MAP_SET(R, 'TradingSessionStatus', 'EncodedText'           , V), I+1, U);
decode_msg_TradingSessionStatus                   ([{K,V}|T], R, I, U)                                   -> decode_msg_TradingSessionStatus([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TradingSessionStatus                   ([H|T], R, I, U) -> decode_msg_TradingSessionStatus(T, R, I, [H|U]);
decode_msg_TradingSessionStatus                   ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MassQuote                              ([{'QuoteReqID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'QuoteReqID'        , V), I+1, U);
decode_msg_MassQuote                              ([{'QuoteID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'QuoteID'           , V), I+1, U);
decode_msg_MassQuote                              ([{'QuoteType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'QuoteType'         , V), I+1, U);
decode_msg_MassQuote                              ([{'QuoteResponseLevel', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'QuoteResponseLevel', V), I+1, U);
decode_msg_MassQuote                              ([{'NoPartyIDs'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_MassQuote_grpPartyIDs/2), decode_msg_MassQuote(L, ?MAP_SET(R, 'MassQuote', 'NoPartyIDs'        , G), I+1, U);
decode_msg_MassQuote                              ([{'Account'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'Account'           , V), I+1, U);
decode_msg_MassQuote                              ([{'AcctIDSource'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'AcctIDSource'      , V), I+1, U);
decode_msg_MassQuote                              ([{'AccountType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'AccountType'       , V), I+1, U);
decode_msg_MassQuote                              ([{'DefBidSize'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'DefBidSize'        , V), I+1, U);
decode_msg_MassQuote                              ([{'DefOfferSize'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MassQuote(T, ?MAP_SET(R, 'MassQuote', 'DefOfferSize'      , V), I+1, U);
decode_msg_MassQuote                              ([{'NoQuoteSets'       , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpQuoteSets, N, T, fun fix_groups:decode_MassQuote_grpQuoteSets/2), decode_msg_MassQuote(L, ?MAP_SET(R, 'MassQuote', 'NoQuoteSets'       , G), I+1, U);
decode_msg_MassQuote                              ([{K,V}|T], R, I, U)                               -> decode_msg_MassQuote([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MassQuote                              ([H|T], R, I, U) -> decode_msg_MassQuote(T, R, I, [H|U]);
decode_msg_MassQuote                              ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_BusinessMessageReject                  ([{'RefSeqNum'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'RefSeqNum'           , V), I+1, U);
decode_msg_BusinessMessageReject                  ([{'RefMsgType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'RefMsgType'          , V), I+1, U);
decode_msg_BusinessMessageReject                  ([{'BusinessRejectRefID' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'BusinessRejectRefID' , V), I+1, U);
decode_msg_BusinessMessageReject                  ([{'BusinessRejectReason', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'BusinessRejectReason', V), I+1, U);
decode_msg_BusinessMessageReject                  ([{'Text'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'Text'                , V), I+1, U);
decode_msg_BusinessMessageReject                  ([{'EncodedTextLen'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'EncodedTextLen'      , V), I+1, U);
decode_msg_BusinessMessageReject                  ([{'EncodedText'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BusinessMessageReject(T, ?MAP_SET(R, 'BusinessMessageReject', 'EncodedText'         , V), I+1, U);
decode_msg_BusinessMessageReject                  ([{K,V}|T], R, I, U)                                 -> decode_msg_BusinessMessageReject([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_BusinessMessageReject                  ([H|T], R, I, U) -> decode_msg_BusinessMessageReject(T, R, I, [H|U]);
decode_msg_BusinessMessageReject                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_BidRequest                             ([{'BidID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'BidID'              , V), I+1, U);
decode_msg_BidRequest                             ([{'ClientBidID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'ClientBidID'        , V), I+1, U);
decode_msg_BidRequest                             ([{'BidRequestTransType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'BidRequestTransType', V), I+1, U);
decode_msg_BidRequest                             ([{'ListName'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'ListName'           , V), I+1, U);
decode_msg_BidRequest                             ([{'TotNoRelatedSym'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'TotNoRelatedSym'    , V), I+1, U);
decode_msg_BidRequest                             ([{'BidType'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'BidType'            , V), I+1, U);
decode_msg_BidRequest                             ([{'NumTickets'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'NumTickets'         , V), I+1, U);
decode_msg_BidRequest                             ([{'Currency'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'Currency'           , V), I+1, U);
decode_msg_BidRequest                             ([{'SideValue1'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'SideValue1'         , V), I+1, U);
decode_msg_BidRequest                             ([{'SideValue2'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'SideValue2'         , V), I+1, U);
decode_msg_BidRequest                             ([{'NoBidDescriptors'   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpBidDescriptors, N, T, fun fix_groups:decode_BidRequest_grpBidDescriptors/2), decode_msg_BidRequest(L, ?MAP_SET(R, 'BidRequest', 'NoBidDescriptors'   , G), I+1, U);
decode_msg_BidRequest                             ([{'NoBidComponents'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpBidComponents, N, T, fun fix_groups:decode_BidRequest_grpBidComponents/2), decode_msg_BidRequest(L, ?MAP_SET(R, 'BidRequest', 'NoBidComponents'    , G), I+1, U);
decode_msg_BidRequest                             ([{'LiquidityIndType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'LiquidityIndType'   , V), I+1, U);
decode_msg_BidRequest                             ([{'WtAverageLiquidity' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'WtAverageLiquidity' , V), I+1, U);
decode_msg_BidRequest                             ([{'ExchangeForPhysical', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'ExchangeForPhysical', V), I+1, U);
decode_msg_BidRequest                             ([{'OutMainCntryUIndex' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'OutMainCntryUIndex' , V), I+1, U);
decode_msg_BidRequest                             ([{'CrossPercent'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'CrossPercent'       , V), I+1, U);
decode_msg_BidRequest                             ([{'ProgRptReqs'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'ProgRptReqs'        , V), I+1, U);
decode_msg_BidRequest                             ([{'ProgPeriodInterval' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'ProgPeriodInterval' , V), I+1, U);
decode_msg_BidRequest                             ([{'IncTaxInd'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'IncTaxInd'          , V), I+1, U);
decode_msg_BidRequest                             ([{'ForexReq'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'ForexReq'           , V), I+1, U);
decode_msg_BidRequest                             ([{'NumBidders'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'NumBidders'         , V), I+1, U);
decode_msg_BidRequest                             ([{'TradeDate'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'TradeDate'          , V), I+1, U);
decode_msg_BidRequest                             ([{'BidTradeType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'BidTradeType'       , V), I+1, U);
decode_msg_BidRequest                             ([{'BasisPxType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'BasisPxType'        , V), I+1, U);
decode_msg_BidRequest                             ([{'StrikeTime'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'StrikeTime'         , V), I+1, U);
decode_msg_BidRequest                             ([{'Text'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'Text'               , V), I+1, U);
decode_msg_BidRequest                             ([{'EncodedTextLen'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'EncodedTextLen'     , V), I+1, U);
decode_msg_BidRequest                             ([{'EncodedText'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidRequest(T, ?MAP_SET(R, 'BidRequest', 'EncodedText'        , V), I+1, U);
decode_msg_BidRequest                             ([{K,V}|T], R, I, U)                                -> decode_msg_BidRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_BidRequest                             ([H|T], R, I, U) -> decode_msg_BidRequest(T, R, I, [H|U]);
decode_msg_BidRequest                             ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_BidResponse                            ([{'BidID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidResponse(T, ?MAP_SET(R, 'BidResponse', 'BidID'          , V), I+1, U);
decode_msg_BidResponse                            ([{'ClientBidID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_BidResponse(T, ?MAP_SET(R, 'BidResponse', 'ClientBidID'    , V), I+1, U);
decode_msg_BidResponse                            ([{'NoBidComponents', N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpBidComponents, N, T, fun fix_groups:decode_BidResponse_grpBidComponents/2), decode_msg_BidResponse(L, ?MAP_SET(R, 'BidResponse', 'NoBidComponents', G), I+1, U);
decode_msg_BidResponse                            ([{K,V}|T], R, I, U)                            -> decode_msg_BidResponse([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_BidResponse                            ([H|T], R, I, U) -> decode_msg_BidResponse(T, R, I, [H|U]);
decode_msg_BidResponse                            ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ListStrikePrice                        ([{'ListID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStrikePrice(T, ?MAP_SET(R, 'ListStrikePrice', 'ListID'       , V), I+1, U);
decode_msg_ListStrikePrice                        ([{'TotNoStrikes' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStrikePrice(T, ?MAP_SET(R, 'ListStrikePrice', 'TotNoStrikes' , V), I+1, U);
decode_msg_ListStrikePrice                        ([{'LastFragment' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ListStrikePrice(T, ?MAP_SET(R, 'ListStrikePrice', 'LastFragment' , V), I+1, U);
decode_msg_ListStrikePrice                        ([{'NoStrikes'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStrikes, N, T, fun fix_groups:decode_ListStrikePrice_grpStrikes/2), decode_msg_ListStrikePrice(L, ?MAP_SET(R, 'ListStrikePrice', 'NoStrikes'    , G), I+1, U);
decode_msg_ListStrikePrice                        ([{'NoUnderlyings', N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_ListStrikePrice_grpUnderlyings/2), decode_msg_ListStrikePrice(L, ?MAP_SET(R, 'ListStrikePrice', 'NoUnderlyings', G), I+1, U);
decode_msg_ListStrikePrice                        ([{K,V}|T], R, I, U)                          -> decode_msg_ListStrikePrice([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ListStrikePrice                        ([H|T], R, I, U) -> decode_msg_ListStrikePrice(T, R, I, [H|U]);
decode_msg_ListStrikePrice                        ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_RegistrationInstructions               ([{'RegistID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'RegistID'        , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'RegistTransType' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'RegistTransType' , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'RegistRefID'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'RegistRefID'     , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'ClOrdID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'ClOrdID'         , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'NoPartyIDs'      , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_RegistrationInstructions_grpPartyIDs/2), decode_msg_RegistrationInstructions(L, ?MAP_SET(R, 'RegistrationInstructions', 'NoPartyIDs'      , G), I+1, U);
decode_msg_RegistrationInstructions               ([{'Account'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'Account'         , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'AcctIDSource'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'AcctIDSource'    , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'RegistAcctType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'RegistAcctType'  , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'TaxAdvantageType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'TaxAdvantageType', V), I+1, U);
decode_msg_RegistrationInstructions               ([{'OwnershipType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructions(T, ?MAP_SET(R, 'RegistrationInstructions', 'OwnershipType'   , V), I+1, U);
decode_msg_RegistrationInstructions               ([{'NoRegistDtls'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRegistDtls, N, T, fun fix_groups:decode_RegistrationInstructions_grpRegistDtls/2), decode_msg_RegistrationInstructions(L, ?MAP_SET(R, 'RegistrationInstructions', 'NoRegistDtls'    , G), I+1, U);
decode_msg_RegistrationInstructions               ([{'NoDistribInsts'  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpDistribInsts, N, T, fun fix_groups:decode_RegistrationInstructions_grpDistribInsts/2), decode_msg_RegistrationInstructions(L, ?MAP_SET(R, 'RegistrationInstructions', 'NoDistribInsts'  , G), I+1, U);
decode_msg_RegistrationInstructions               ([{K,V}|T], R, I, U)                             -> decode_msg_RegistrationInstructions([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_RegistrationInstructions               ([H|T], R, I, U) -> decode_msg_RegistrationInstructions(T, R, I, [H|U]);
decode_msg_RegistrationInstructions               ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_RegistrationInstructionsResponse       ([{'RegistID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'RegistID'           , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'RegistTransType'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'RegistTransType'    , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'RegistRefID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'RegistRefID'        , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'ClOrdID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'ClOrdID'            , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'NoPartyIDs'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_RegistrationInstructionsResponse_grpPartyIDs/2), decode_msg_RegistrationInstructionsResponse(L, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'NoPartyIDs'         , G), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'Account'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'Account'            , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'AcctIDSource'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'AcctIDSource'       , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'RegistStatus'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'RegistStatus'       , V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'RegistRejReasonCode', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'RegistRejReasonCode', V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{'RegistRejReasonText', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, ?MAP_SET(R, 'RegistrationInstructionsResponse', 'RegistRejReasonText', V), I+1, U);
decode_msg_RegistrationInstructionsResponse       ([{K,V}|T], R, I, U)                                -> decode_msg_RegistrationInstructionsResponse([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_RegistrationInstructionsResponse       ([H|T], R, I, U) -> decode_msg_RegistrationInstructionsResponse(T, R, I, [H|U]);
decode_msg_RegistrationInstructionsResponse       ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderMassCancelRequest                 ([{'ClOrdID'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'ClOrdID'                             , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecondaryClOrdID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecondaryClOrdID'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'MassCancelRequestType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'MassCancelRequestType'               , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'TradingSessionID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'TradingSessionID'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'TradingSessionSubID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'TradingSessionSubID'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Symbol'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Symbol'                              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SymbolSfx'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SymbolSfx'                           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecurityID'                          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecurityID'                          , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecurityIDSource'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecurityIDSource'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'NoSecurityAltID'                     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_OrderMassCancelRequest_grpSecurityAltID/2), decode_msg_OrderMassCancelRequest(L, ?MAP_SET(R, 'OrderMassCancelRequest', 'NoSecurityAltID'                     , G), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Product'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Product'                             , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CFICode'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CFICode'                             , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecurityType'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecurityType'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecuritySubType'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecuritySubType'                     , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'MaturityMonthYear'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'MaturityMonthYear'                   , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'MaturityDate'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'MaturityDate'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'PutOrCall'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'PutOrCall'                           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CouponPaymentDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CouponPaymentDate'                   , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'IssueDate'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'IssueDate'                           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'RepoCollateralSecurityType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'RepoCollateralSecurityType'          , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'RepurchaseTerm'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'RepurchaseTerm'                      , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'RepurchaseRate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'RepurchaseRate'                      , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Factor'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Factor'                              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CreditRating'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CreditRating'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'InstrRegistry'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'InstrRegistry'                       , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CountryOfIssue'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CountryOfIssue'                      , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'StateOrProvinceOfIssue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'StateOrProvinceOfIssue'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'LocaleOfIssue'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'LocaleOfIssue'                       , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'RedemptionDate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'RedemptionDate'                      , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'StrikePrice'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'StrikePrice'                         , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'StrikeCurrency'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'StrikeCurrency'                      , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'OptAttribute'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'OptAttribute'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'ContractMultiplier'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'ContractMultiplier'                  , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CouponRate'                          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CouponRate'                          , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecurityExchange'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecurityExchange'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Issuer'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Issuer'                              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedIssuerLen'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedIssuerLen'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedIssuer'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedIssuer'                       , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'SecurityDesc'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'SecurityDesc'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedSecurityDescLen'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedSecurityDescLen'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedSecurityDesc'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedSecurityDesc'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Pool'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Pool'                                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'ContractSettlMonth'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'ContractSettlMonth'                  , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CPProgram'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CPProgram'                           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'CPRegType'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'CPRegType'                           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'NoEvents'                            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_OrderMassCancelRequest_grpEvents/2), decode_msg_OrderMassCancelRequest(L, ?MAP_SET(R, 'OrderMassCancelRequest', 'NoEvents'                            , G), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'DatedDate'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'DatedDate'                           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'InterestAccrualDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'InterestAccrualDate'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSymbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSymbol'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSymbolSfx'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSecurityID'                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSecurityIDSource'          , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'NoUnderlyingSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingSecurityAltID, N, T, fun fix_groups:decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID/2), decode_msg_OrderMassCancelRequest(L, ?MAP_SET(R, 'OrderMassCancelRequest', 'NoUnderlyingSecurityAltID'           , G), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingProduct'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingProduct'                   , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCFICode'                   , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSecurityType'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSecuritySubType'           , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingMaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingMaturityMonthYear'         , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingMaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingMaturityDate'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingPutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingPutOrCall'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCouponPaymentDate'         , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingIssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingIssueDate'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingRepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingRepoCollateralSecurityType', V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingRepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingRepurchaseTerm'            , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingRepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingRepurchaseRate'            , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingFactor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingFactor'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCreditRating'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingInstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingInstrRegistry'             , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCountryOfIssue'            , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingStateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingStateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingLocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingLocaleOfIssue'             , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingRedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingRedemptionDate'            , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingStrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingStrikePrice'               , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingStrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingStrikeCurrency'            , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingOptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingOptAttribute'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingContractMultiplier'        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCouponRate'                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSecurityExchange'          , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingIssuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingIssuer'                    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedUnderlyingIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedUnderlyingIssuerLen'          , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedUnderlyingIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedUnderlyingIssuer'             , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingSecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingSecurityDesc'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedUnderlyingSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedUnderlyingSecurityDescLen'    , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedUnderlyingSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedUnderlyingSecurityDesc'       , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCPProgram'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCPRegType'                 , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCurrency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCurrency'                  , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingQty'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingQty'                       , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingPx'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingPx'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingDirtyPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingDirtyPrice'                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingEndPrice'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingEndPrice'                  , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingStartValue'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingStartValue'                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingCurrentValue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingCurrentValue'              , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'UnderlyingEndValue'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'UnderlyingEndValue'                  , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'NoUnderlyingStips'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingStips, N, T, fun fix_groups:decode_OrderMassCancelRequest_grpUnderlyingStips/2), decode_msg_OrderMassCancelRequest(L, ?MAP_SET(R, 'OrderMassCancelRequest', 'NoUnderlyingStips'                   , G), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Side'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Side'                                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'TransactTime'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'TransactTime'                        , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'Text'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'Text'                                , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedTextLen'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedTextLen'                      , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{'EncodedText'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, ?MAP_SET(R, 'OrderMassCancelRequest', 'EncodedText'                         , V), I+1, U);
decode_msg_OrderMassCancelRequest                 ([{K,V}|T], R, I, U)                                                 -> decode_msg_OrderMassCancelRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderMassCancelRequest                 ([H|T], R, I, U) -> decode_msg_OrderMassCancelRequest(T, R, I, [H|U]);
decode_msg_OrderMassCancelRequest                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderMassCancelReport                  ([{'ClOrdID'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'ClOrdID'                             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecondaryClOrdID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecondaryClOrdID'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'OrderID'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'OrderID'                             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecondaryOrderID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecondaryOrderID'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'MassCancelRequestType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'MassCancelRequestType'               , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'MassCancelResponse'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'MassCancelResponse'                  , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'MassCancelRejectReason'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'MassCancelRejectReason'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'TotalAffectedOrders'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'TotalAffectedOrders'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'NoAffectedOrders'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAffectedOrders, N, T, fun fix_groups:decode_OrderMassCancelReport_grpAffectedOrders/2), decode_msg_OrderMassCancelReport(L, ?MAP_SET(R, 'OrderMassCancelReport', 'NoAffectedOrders'                    , G), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'TradingSessionID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'TradingSessionID'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'TradingSessionSubID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'TradingSessionSubID'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Symbol'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Symbol'                              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SymbolSfx'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SymbolSfx'                           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecurityID'                          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecurityID'                          , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecurityIDSource'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecurityIDSource'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'NoSecurityAltID'                     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_OrderMassCancelReport_grpSecurityAltID/2), decode_msg_OrderMassCancelReport(L, ?MAP_SET(R, 'OrderMassCancelReport', 'NoSecurityAltID'                     , G), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Product'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Product'                             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CFICode'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CFICode'                             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecurityType'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecurityType'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecuritySubType'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecuritySubType'                     , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'MaturityMonthYear'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'MaturityMonthYear'                   , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'MaturityDate'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'MaturityDate'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'PutOrCall'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'PutOrCall'                           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CouponPaymentDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CouponPaymentDate'                   , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'IssueDate'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'IssueDate'                           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'RepoCollateralSecurityType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'RepoCollateralSecurityType'          , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'RepurchaseTerm'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'RepurchaseTerm'                      , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'RepurchaseRate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'RepurchaseRate'                      , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Factor'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Factor'                              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CreditRating'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CreditRating'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'InstrRegistry'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'InstrRegistry'                       , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CountryOfIssue'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CountryOfIssue'                      , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'StateOrProvinceOfIssue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'StateOrProvinceOfIssue'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'LocaleOfIssue'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'LocaleOfIssue'                       , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'RedemptionDate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'RedemptionDate'                      , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'StrikePrice'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'StrikePrice'                         , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'StrikeCurrency'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'StrikeCurrency'                      , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'OptAttribute'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'OptAttribute'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'ContractMultiplier'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'ContractMultiplier'                  , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CouponRate'                          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CouponRate'                          , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecurityExchange'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecurityExchange'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Issuer'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Issuer'                              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedIssuerLen'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedIssuerLen'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedIssuer'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedIssuer'                       , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'SecurityDesc'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'SecurityDesc'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedSecurityDescLen'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedSecurityDescLen'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedSecurityDesc'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedSecurityDesc'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Pool'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Pool'                                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'ContractSettlMonth'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'ContractSettlMonth'                  , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CPProgram'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CPProgram'                           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'CPRegType'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'CPRegType'                           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'NoEvents'                            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_OrderMassCancelReport_grpEvents/2), decode_msg_OrderMassCancelReport(L, ?MAP_SET(R, 'OrderMassCancelReport', 'NoEvents'                            , G), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'DatedDate'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'DatedDate'                           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'InterestAccrualDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'InterestAccrualDate'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSymbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSymbol'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSymbolSfx'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSecurityID'                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSecurityIDSource'          , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'NoUnderlyingSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingSecurityAltID, N, T, fun fix_groups:decode_OrderMassCancelReport_grpUnderlyingSecurityAltID/2), decode_msg_OrderMassCancelReport(L, ?MAP_SET(R, 'OrderMassCancelReport', 'NoUnderlyingSecurityAltID'           , G), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingProduct'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingProduct'                   , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCFICode'                   , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSecurityType'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSecuritySubType'           , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingMaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingMaturityMonthYear'         , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingMaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingMaturityDate'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingPutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingPutOrCall'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCouponPaymentDate'         , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingIssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingIssueDate'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingRepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingRepoCollateralSecurityType', V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingRepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingRepurchaseTerm'            , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingRepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingRepurchaseRate'            , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingFactor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingFactor'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCreditRating'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingInstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingInstrRegistry'             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCountryOfIssue'            , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingStateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingStateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingLocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingLocaleOfIssue'             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingRedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingRedemptionDate'            , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingStrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingStrikePrice'               , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingStrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingStrikeCurrency'            , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingOptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingOptAttribute'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingContractMultiplier'        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCouponRate'                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSecurityExchange'          , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingIssuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingIssuer'                    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedUnderlyingIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedUnderlyingIssuerLen'          , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedUnderlyingIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedUnderlyingIssuer'             , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingSecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingSecurityDesc'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedUnderlyingSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedUnderlyingSecurityDescLen'    , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedUnderlyingSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedUnderlyingSecurityDesc'       , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCPProgram'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCPRegType'                 , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCurrency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCurrency'                  , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingQty'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingQty'                       , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingPx'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingPx'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingDirtyPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingDirtyPrice'                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingEndPrice'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingEndPrice'                  , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingStartValue'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingStartValue'                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingCurrentValue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingCurrentValue'              , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'UnderlyingEndValue'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'UnderlyingEndValue'                  , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'NoUnderlyingStips'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingStips, N, T, fun fix_groups:decode_OrderMassCancelReport_grpUnderlyingStips/2), decode_msg_OrderMassCancelReport(L, ?MAP_SET(R, 'OrderMassCancelReport', 'NoUnderlyingStips'                   , G), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Side'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Side'                                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'TransactTime'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'TransactTime'                        , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'Text'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'Text'                                , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedTextLen'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedTextLen'                      , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{'EncodedText'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, ?MAP_SET(R, 'OrderMassCancelReport', 'EncodedText'                         , V), I+1, U);
decode_msg_OrderMassCancelReport                  ([{K,V}|T], R, I, U)                                                 -> decode_msg_OrderMassCancelReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderMassCancelReport                  ([H|T], R, I, U) -> decode_msg_OrderMassCancelReport(T, R, I, [H|U]);
decode_msg_OrderMassCancelReport                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_NewOrderCross                          ([{'CrossID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CrossID'                   , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CrossType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CrossType'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CrossPrioritization'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CrossPrioritization'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'NoSides'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSides, N, T, fun fix_groups:decode_NewOrderCross_grpSides/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoSides'                   , G), I+1, U);
decode_msg_NewOrderCross                          ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Symbol'                    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SymbolSfx'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SecurityID'                , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SecurityIDSource'          , V), I+1, U);
decode_msg_NewOrderCross                          ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_NewOrderCross_grpSecurityAltID/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_NewOrderCross                          ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Product'                   , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CFICode'                   , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SecurityType'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SecuritySubType'           , V), I+1, U);
decode_msg_NewOrderCross                          ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_NewOrderCross                          ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'MaturityDate'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PutOrCall'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_NewOrderCross                          ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'IssueDate'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_NewOrderCross                          ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'RepurchaseRate'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Factor'                    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CreditRating'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'InstrRegistry'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CountryOfIssue'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'RedemptionDate'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'StrikePrice'               , V), I+1, U);
decode_msg_NewOrderCross                          ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'StrikeCurrency'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'OptAttribute'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ContractMultiplier'        , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CouponRate'                , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SecurityExchange'          , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Issuer'                    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_NewOrderCross                          ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'EncodedIssuer'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SecurityDesc'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Pool'                      , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CPProgram'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CPRegType'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_NewOrderCross_grpEvents/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoEvents'                  , G), I+1, U);
decode_msg_NewOrderCross                          ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DatedDate'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_NewOrderCross_grpUnderlyings/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoUnderlyings'             , G), I+1, U);
decode_msg_NewOrderCross                          ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_NewOrderCross_grpLegs/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoLegs'                    , G), I+1, U);
decode_msg_NewOrderCross                          ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SettlType'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'SettlDate'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'HandlInst'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ExecInst'                  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'MinQty'                    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'MaxFloor'                  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ExDestination'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_NewOrderCross_grpTradingSessions/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoTradingSessions'         , G), I+1, U);
decode_msg_NewOrderCross                          ([{'ProcessCode'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ProcessCode'               , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PrevClosePx'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PrevClosePx'               , V), I+1, U);
decode_msg_NewOrderCross                          ([{'LocateReqd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'LocateReqd'                , V), I+1, U);
decode_msg_NewOrderCross                          ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'TransactTime'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_NewOrderCross_grpStipulations/2), decode_msg_NewOrderCross(L, ?MAP_SET(R, 'NewOrderCross', 'NoStipulations'            , G), I+1, U);
decode_msg_NewOrderCross                          ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'OrdType'                   , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PriceType'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Price'                     , V), I+1, U);
decode_msg_NewOrderCross                          ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'StopPx'                    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Spread'                    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_NewOrderCross                          ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'YieldType'                 , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Yield'                     , V), I+1, U);
decode_msg_NewOrderCross                          ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'YieldCalcDate'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_NewOrderCross                          ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Currency'                  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ComplianceID'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'IOIID'                     , V), I+1, U);
decode_msg_NewOrderCross                          ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'QuoteID'                   , V), I+1, U);
decode_msg_NewOrderCross                          ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'TimeInForce'               , V), I+1, U);
decode_msg_NewOrderCross                          ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'EffectiveTime'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ExpireDate'                , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ExpireTime'                , V), I+1, U);
decode_msg_NewOrderCross                          ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'GTBookingInst'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'MaxShow'                   , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PegOffsetValue'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PegMoveType'               , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PegOffsetType'             , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PegLimitType'              , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PegRoundDirection'         , V), I+1, U);
decode_msg_NewOrderCross                          ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'PegScope'                  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionInst'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'DiscretionScope'           , V), I+1, U);
decode_msg_NewOrderCross                          ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'TargetStrategy'            , V), I+1, U);
decode_msg_NewOrderCross                          ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'ParticipationRate'         , V), I+1, U);
decode_msg_NewOrderCross                          ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'CancellationRights'        , V), I+1, U);
decode_msg_NewOrderCross                          ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_NewOrderCross                          ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'RegistID'                  , V), I+1, U);
decode_msg_NewOrderCross                          ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderCross(T, ?MAP_SET(R, 'NewOrderCross', 'Designation'               , V), I+1, U);
decode_msg_NewOrderCross                          ([{K,V}|T], R, I, U)                                       -> decode_msg_NewOrderCross([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_NewOrderCross                          ([H|T], R, I, U) -> decode_msg_NewOrderCross(T, R, I, [H|U]);
decode_msg_NewOrderCross                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CrossOrderCancelReplaceRequest         ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'OrderID'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CrossID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CrossID'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'OrigCrossID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'OrigCrossID'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CrossType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CrossType'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CrossPrioritization'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CrossPrioritization'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoSides'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSides, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpSides/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoSides'                   , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Symbol'                    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SecurityID'                , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpSecurityAltID/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Product'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CFICode'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SecurityType'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Factor'                    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CreditRating'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CouponRate'                , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Issuer'                    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Pool'                      , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpEvents/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpUnderlyings/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpLegs/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SettlType'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'SettlDate'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'HandlInst'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ExecInst'                  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'MinQty'                    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'MaxFloor'                  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ExDestination'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpTradingSessions/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoTradingSessions'         , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ProcessCode'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ProcessCode'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PrevClosePx'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PrevClosePx'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'LocateReqd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'LocateReqd'                , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'TransactTime'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_CrossOrderCancelReplaceRequest_grpStipulations/2), decode_msg_CrossOrderCancelReplaceRequest(L, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'NoStipulations'            , G), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'OrdType'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PriceType'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Price'                     , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'StopPx'                    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Spread'                    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'YieldType'                 , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Yield'                     , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'YieldCalcDate'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Currency'                  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ComplianceID'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'IOIID'                     , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'QuoteID'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'TimeInForce'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'EffectiveTime'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ExpireDate'                , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ExpireTime'                , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'GTBookingInst'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'MaxShow'                   , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PegOffsetValue'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PegMoveType'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PegOffsetType'             , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PegLimitType'              , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PegRoundDirection'         , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'PegScope'                  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionInst'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'DiscretionScope'           , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'TargetStrategy'            , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'ParticipationRate'         , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'CancellationRights'        , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'RegistID'                  , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, ?MAP_SET(R, 'CrossOrderCancelReplaceRequest', 'Designation'               , V), I+1, U);
decode_msg_CrossOrderCancelReplaceRequest         ([{K,V}|T], R, I, U)                                       -> decode_msg_CrossOrderCancelReplaceRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CrossOrderCancelReplaceRequest         ([H|T], R, I, U) -> decode_msg_CrossOrderCancelReplaceRequest(T, R, I, [H|U]);
decode_msg_CrossOrderCancelReplaceRequest         ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CrossOrderCancelRequest                ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'OrderID'                   , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CrossID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CrossID'                   , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'OrigCrossID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'OrigCrossID'               , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CrossType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CrossType'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CrossPrioritization'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CrossPrioritization'       , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'NoSides'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSides, N, T, fun fix_groups:decode_CrossOrderCancelRequest_grpSides/2), decode_msg_CrossOrderCancelRequest(L, ?MAP_SET(R, 'CrossOrderCancelRequest', 'NoSides'                   , G), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'Symbol'                    , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SecurityID'                , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CrossOrderCancelRequest_grpSecurityAltID/2), decode_msg_CrossOrderCancelRequest(L, ?MAP_SET(R, 'CrossOrderCancelRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'Product'                   , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CFICode'                   , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SecurityType'              , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'Factor'                    , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CreditRating'              , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CouponRate'                , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'Issuer'                    , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'Pool'                      , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CrossOrderCancelRequest_grpEvents/2), decode_msg_CrossOrderCancelRequest(L, ?MAP_SET(R, 'CrossOrderCancelRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CrossOrderCancelRequest_grpUnderlyings/2), decode_msg_CrossOrderCancelRequest(L, ?MAP_SET(R, 'CrossOrderCancelRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CrossOrderCancelRequest_grpLegs/2), decode_msg_CrossOrderCancelRequest(L, ?MAP_SET(R, 'CrossOrderCancelRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, ?MAP_SET(R, 'CrossOrderCancelRequest', 'TransactTime'              , V), I+1, U);
decode_msg_CrossOrderCancelRequest                ([{K,V}|T], R, I, U)                                       -> decode_msg_CrossOrderCancelRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CrossOrderCancelRequest                ([H|T], R, I, U) -> decode_msg_CrossOrderCancelRequest(T, R, I, [H|U]);
decode_msg_CrossOrderCancelRequest                ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityTypeRequest                    ([{'SecurityReqID'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'SecurityReqID'      , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'Text'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'Text'               , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'EncodedTextLen'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'EncodedTextLen'     , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'EncodedText'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'EncodedText'        , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'TradingSessionID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'TradingSessionID'   , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'TradingSessionSubID', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'TradingSessionSubID', V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'Product'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'Product'            , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'SecurityType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'SecurityType'       , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{'SecuritySubType'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, ?MAP_SET(R, 'SecurityTypeRequest', 'SecuritySubType'    , V), I+1, U);
decode_msg_SecurityTypeRequest                    ([{K,V}|T], R, I, U)                                -> decode_msg_SecurityTypeRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityTypeRequest                    ([H|T], R, I, U) -> decode_msg_SecurityTypeRequest(T, R, I, [H|U]);
decode_msg_SecurityTypeRequest                    ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityTypes                          ([{'SecurityReqID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'SecurityReqID'          , V), I+1, U);
decode_msg_SecurityTypes                          ([{'SecurityResponseID'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'SecurityResponseID'     , V), I+1, U);
decode_msg_SecurityTypes                          ([{'SecurityResponseType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'SecurityResponseType'   , V), I+1, U);
decode_msg_SecurityTypes                          ([{'TotNoSecurityTypes'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'TotNoSecurityTypes'     , V), I+1, U);
decode_msg_SecurityTypes                          ([{'LastFragment'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'LastFragment'           , V), I+1, U);
decode_msg_SecurityTypes                          ([{'NoSecurityTypes'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityTypes, N, T, fun fix_groups:decode_SecurityTypes_grpSecurityTypes/2), decode_msg_SecurityTypes(L, ?MAP_SET(R, 'SecurityTypes', 'NoSecurityTypes'        , G), I+1, U);
decode_msg_SecurityTypes                          ([{'Text'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'Text'                   , V), I+1, U);
decode_msg_SecurityTypes                          ([{'EncodedTextLen'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'EncodedTextLen'         , V), I+1, U);
decode_msg_SecurityTypes                          ([{'EncodedText'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'EncodedText'            , V), I+1, U);
decode_msg_SecurityTypes                          ([{'TradingSessionID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'TradingSessionID'       , V), I+1, U);
decode_msg_SecurityTypes                          ([{'TradingSessionSubID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'TradingSessionSubID'    , V), I+1, U);
decode_msg_SecurityTypes                          ([{'SubscriptionRequestType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityTypes(T, ?MAP_SET(R, 'SecurityTypes', 'SubscriptionRequestType', V), I+1, U);
decode_msg_SecurityTypes                          ([{K,V}|T], R, I, U)                                    -> decode_msg_SecurityTypes([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityTypes                          ([H|T], R, I, U) -> decode_msg_SecurityTypes(T, R, I, [H|U]);
decode_msg_SecurityTypes                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityListRequest                    ([{'SecurityReqID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityReqID'             , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecurityListRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityListRequestType'   , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Symbol'                    , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityID'                , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_SecurityListRequest_grpSecurityAltID/2), decode_msg_SecurityListRequest(L, ?MAP_SET(R, 'SecurityListRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_SecurityListRequest                    ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Product'                   , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CFICode'                   , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityType'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_SecurityListRequest                    ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Factor'                    , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CreditRating'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CouponRate'                , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Issuer'                    , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Pool'                      , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_SecurityListRequest_grpEvents/2), decode_msg_SecurityListRequest(L, ?MAP_SET(R, 'SecurityListRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_SecurityListRequest                    ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'DeliveryForm'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'PctAtRisk'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_SecurityListRequest_grpInstrAttrib/2), decode_msg_SecurityListRequest(L, ?MAP_SET(R, 'SecurityListRequest', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_SecurityListRequest                    ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'AgreementID'               , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'TerminationType'           , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'StartDate'                 , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EndDate'                   , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_SecurityListRequest_grpUnderlyings/2), decode_msg_SecurityListRequest(L, ?MAP_SET(R, 'SecurityListRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_SecurityListRequest                    ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_SecurityListRequest_grpLegs/2), decode_msg_SecurityListRequest(L, ?MAP_SET(R, 'SecurityListRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_SecurityListRequest                    ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Currency'                  , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'Text'                      , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EncodedTextLen'            , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'EncodedText'               , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'TradingSessionID'          , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_SecurityListRequest                    ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityListRequest(T, ?MAP_SET(R, 'SecurityListRequest', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_SecurityListRequest                    ([{K,V}|T], R, I, U)                                       -> decode_msg_SecurityListRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityListRequest                    ([H|T], R, I, U) -> decode_msg_SecurityListRequest(T, R, I, [H|U]);
decode_msg_SecurityListRequest                    ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SecurityList                           ([{'SecurityReqID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityList(T, ?MAP_SET(R, 'SecurityList', 'SecurityReqID'        , V), I+1, U);
decode_msg_SecurityList                           ([{'SecurityResponseID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityList(T, ?MAP_SET(R, 'SecurityList', 'SecurityResponseID'   , V), I+1, U);
decode_msg_SecurityList                           ([{'SecurityRequestResult', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityList(T, ?MAP_SET(R, 'SecurityList', 'SecurityRequestResult', V), I+1, U);
decode_msg_SecurityList                           ([{'TotNoRelatedSym'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityList(T, ?MAP_SET(R, 'SecurityList', 'TotNoRelatedSym'      , V), I+1, U);
decode_msg_SecurityList                           ([{'LastFragment'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SecurityList(T, ?MAP_SET(R, 'SecurityList', 'LastFragment'         , V), I+1, U);
decode_msg_SecurityList                           ([{'NoRelatedSym'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_SecurityList_grpRelatedSym/2), decode_msg_SecurityList(L, ?MAP_SET(R, 'SecurityList', 'NoRelatedSym'         , G), I+1, U);
decode_msg_SecurityList                           ([{K,V}|T], R, I, U)                                  -> decode_msg_SecurityList([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SecurityList                           ([H|T], R, I, U) -> decode_msg_SecurityList(T, R, I, [H|U]);
decode_msg_SecurityList                           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_DerivativeSecurityListRequest          ([{'SecurityReqID'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'SecurityReqID'                       , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'SecurityListRequestType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'SecurityListRequestType'             , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSymbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSymbol'                    , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSymbolSfx'                 , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSecurityID'                , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSecurityIDSource'          , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'NoUnderlyingSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingSecurityAltID, N, T, fun fix_groups:decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID/2), decode_msg_DerivativeSecurityListRequest(L, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'NoUnderlyingSecurityAltID'           , G), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingProduct'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingProduct'                   , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCFICode'                   , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSecurityType'              , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSecuritySubType'           , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingMaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingMaturityMonthYear'         , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingMaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingMaturityDate'              , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingPutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingPutOrCall'                 , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCouponPaymentDate'         , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingIssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingIssueDate'                 , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingRepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingRepoCollateralSecurityType', V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingRepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingRepurchaseTerm'            , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingRepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingRepurchaseRate'            , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingFactor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingFactor'                    , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCreditRating'              , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingInstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingInstrRegistry'             , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCountryOfIssue'            , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingStateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingStateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingLocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingLocaleOfIssue'             , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingRedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingRedemptionDate'            , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingStrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingStrikePrice'               , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingStrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingStrikeCurrency'            , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingOptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingOptAttribute'              , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingContractMultiplier'        , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCouponRate'                , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSecurityExchange'          , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingIssuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingIssuer'                    , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'EncodedUnderlyingIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'EncodedUnderlyingIssuerLen'          , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'EncodedUnderlyingIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'EncodedUnderlyingIssuer'             , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingSecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingSecurityDesc'              , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'EncodedUnderlyingSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'EncodedUnderlyingSecurityDescLen'    , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'EncodedUnderlyingSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'EncodedUnderlyingSecurityDesc'       , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCPProgram'                 , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCPRegType'                 , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCurrency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCurrency'                  , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingQty'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingQty'                       , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingPx'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingPx'                        , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingDirtyPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingDirtyPrice'                , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingEndPrice'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingEndPrice'                  , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingStartValue'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingStartValue'                , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingCurrentValue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingCurrentValue'              , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'UnderlyingEndValue'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'UnderlyingEndValue'                  , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'NoUnderlyingStips'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingStips, N, T, fun fix_groups:decode_DerivativeSecurityListRequest_grpUnderlyingStips/2), decode_msg_DerivativeSecurityListRequest(L, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'NoUnderlyingStips'                   , G), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'SecuritySubType'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'SecuritySubType'                     , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'Currency'                            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'Currency'                            , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'Text'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'Text'                                , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'EncodedTextLen'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'EncodedTextLen'                      , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'EncodedText'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'EncodedText'                         , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'TradingSessionID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'TradingSessionID'                    , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'TradingSessionSubID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'TradingSessionSubID'                 , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{'SubscriptionRequestType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, ?MAP_SET(R, 'DerivativeSecurityListRequest', 'SubscriptionRequestType'             , V), I+1, U);
decode_msg_DerivativeSecurityListRequest          ([{K,V}|T], R, I, U)                                                 -> decode_msg_DerivativeSecurityListRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_DerivativeSecurityListRequest          ([H|T], R, I, U) -> decode_msg_DerivativeSecurityListRequest(T, R, I, [H|U]);
decode_msg_DerivativeSecurityListRequest          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_DerivativeSecurityList                 ([{'SecurityReqID'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'SecurityReqID'                       , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'SecurityResponseID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'SecurityResponseID'                  , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'SecurityRequestResult'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'SecurityRequestResult'               , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSymbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSymbol'                    , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSymbolSfx'                 , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSecurityID'                , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSecurityIDSource'          , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'NoUnderlyingSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingSecurityAltID, N, T, fun fix_groups:decode_DerivativeSecurityList_grpUnderlyingSecurityAltID/2), decode_msg_DerivativeSecurityList(L, ?MAP_SET(R, 'DerivativeSecurityList', 'NoUnderlyingSecurityAltID'           , G), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingProduct'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingProduct'                   , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCFICode'                   , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSecurityType'              , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSecuritySubType'           , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingMaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingMaturityMonthYear'         , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingMaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingMaturityDate'              , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingPutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingPutOrCall'                 , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCouponPaymentDate'         , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingIssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingIssueDate'                 , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingRepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingRepoCollateralSecurityType', V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingRepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingRepurchaseTerm'            , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingRepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingRepurchaseRate'            , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingFactor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingFactor'                    , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCreditRating'              , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingInstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingInstrRegistry'             , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCountryOfIssue'            , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingStateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingStateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingLocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingLocaleOfIssue'             , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingRedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingRedemptionDate'            , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingStrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingStrikePrice'               , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingStrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingStrikeCurrency'            , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingOptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingOptAttribute'              , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingContractMultiplier'        , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCouponRate'                , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSecurityExchange'          , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingIssuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingIssuer'                    , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'EncodedUnderlyingIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'EncodedUnderlyingIssuerLen'          , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'EncodedUnderlyingIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'EncodedUnderlyingIssuer'             , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingSecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingSecurityDesc'              , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'EncodedUnderlyingSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'EncodedUnderlyingSecurityDescLen'    , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'EncodedUnderlyingSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'EncodedUnderlyingSecurityDesc'       , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCPProgram'                 , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCPRegType'                 , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCurrency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCurrency'                  , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingQty'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingQty'                       , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingPx'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingPx'                        , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingDirtyPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingDirtyPrice'                , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingEndPrice'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingEndPrice'                  , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingStartValue'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingStartValue'                , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingCurrentValue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingCurrentValue'              , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'UnderlyingEndValue'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'UnderlyingEndValue'                  , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'NoUnderlyingStips'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingStips, N, T, fun fix_groups:decode_DerivativeSecurityList_grpUnderlyingStips/2), decode_msg_DerivativeSecurityList(L, ?MAP_SET(R, 'DerivativeSecurityList', 'NoUnderlyingStips'                   , G), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'TotNoRelatedSym'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'TotNoRelatedSym'                     , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'LastFragment'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, ?MAP_SET(R, 'DerivativeSecurityList', 'LastFragment'                        , V), I+1, U);
decode_msg_DerivativeSecurityList                 ([{'NoRelatedSym'                        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_DerivativeSecurityList_grpRelatedSym/2), decode_msg_DerivativeSecurityList(L, ?MAP_SET(R, 'DerivativeSecurityList', 'NoRelatedSym'                        , G), I+1, U);
decode_msg_DerivativeSecurityList                 ([{K,V}|T], R, I, U)                                                 -> decode_msg_DerivativeSecurityList([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_DerivativeSecurityList                 ([H|T], R, I, U) -> decode_msg_DerivativeSecurityList(T, R, I, [H|U]);
decode_msg_DerivativeSecurityList                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_NewOrderMultileg                       ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ClOrdID'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_NewOrderMultileg_grpPartyIDs/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoPartyIDs'                , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'TradeDate'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Account'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'AcctIDSource'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'AccountType'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DayBookingInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DayBookingInst'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'BookingUnit'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'BookingUnit'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PreallocMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PreallocMethod'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'AllocID'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_NewOrderMultileg_grpAllocs/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoAllocs'                  , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SettlType'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SettlDate'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CashMargin'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CashMargin'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ClearingFeeIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ClearingFeeIndicator'      , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'HandlInst'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ExecInst'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MinQty'                    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MaxFloor'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ExDestination'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_NewOrderMultileg_grpTradingSessions/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoTradingSessions'         , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ProcessCode'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ProcessCode'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Side'                      , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Symbol'                    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SymbolSfx'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecurityID'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecurityIDSource'          , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_NewOrderMultileg_grpSecurityAltID/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Product'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CFICode'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecurityType'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecuritySubType'           , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MaturityDate'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PutOrCall'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'IssueDate'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RepurchaseRate'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Factor'                    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CreditRating'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'InstrRegistry'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CountryOfIssue'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RedemptionDate'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'StrikePrice'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'StrikeCurrency'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'OptAttribute'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ContractMultiplier'        , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CouponRate'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecurityExchange'          , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Issuer'                    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EncodedIssuer'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SecurityDesc'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Pool'                      , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CPProgram'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CPRegType'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_NewOrderMultileg_grpEvents/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoEvents'                  , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DatedDate'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_NewOrderMultileg_grpUnderlyings/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoUnderlyings'             , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PrevClosePx'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PrevClosePx'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_NewOrderMultileg_grpLegs/2), decode_msg_NewOrderMultileg(L, ?MAP_SET(R, 'NewOrderMultileg', 'NoLegs'                    , G), I+1, U);
decode_msg_NewOrderMultileg                       ([{'LocateReqd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'LocateReqd'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'TransactTime'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'QtyType'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'OrderQty'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CashOrderQty'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'OrderPercent'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RoundingDirection'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RoundingModulus'           , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'OrdType'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PriceType'                 , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Price'                     , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'StopPx'                    , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Currency'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ComplianceID'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SolicitedFlag'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SolicitedFlag'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'IOIID'                     , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'QuoteID'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'TimeInForce'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EffectiveTime'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ExpireDate'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ExpireTime'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'GTBookingInst'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Commission'                , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CommType'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CommCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CommCurrency'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'FundRenewWaiv'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'FundRenewWaiv'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'OrderCapacity'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'OrderRestrictions'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'OrderRestrictions'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ForexReq'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ForexReq'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'SettlCurrency'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'SettlCurrency'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'BookingType'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Text'                      , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EncodedTextLen'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'EncodedText'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PositionEffect'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CoveredOrUncovered'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CoveredOrUncovered'        , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MaxShow'                   , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PegOffsetValue'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PegMoveType'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PegOffsetType'             , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PegLimitType'              , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PegRoundDirection'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'PegScope'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionInst'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'DiscretionScope'           , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'TargetStrategy'            , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'ParticipationRate'         , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'CancellationRights'        , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'RegistID'                  , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'Designation'               , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{'MultiLegRptTypeReq'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NewOrderMultileg(T, ?MAP_SET(R, 'NewOrderMultileg', 'MultiLegRptTypeReq'        , V), I+1, U);
decode_msg_NewOrderMultileg                       ([{K,V}|T], R, I, U)                                       -> decode_msg_NewOrderMultileg([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_NewOrderMultileg                       ([H|T], R, I, U) -> decode_msg_NewOrderMultileg(T, R, I, [H|U]);
decode_msg_NewOrderMultileg                       ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_MultilegOrderCancelReplace             ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrderID'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrigClOrdID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrigClOrdID'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ClOrdID'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ClOrdLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ClOrdLinkID'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrigOrdModTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrigOrdModTime'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpPartyIDs/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoPartyIDs'                , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'TradeDate'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Account'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'AcctIDSource'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'AccountType'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DayBookingInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DayBookingInst'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'BookingUnit'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'BookingUnit'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PreallocMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PreallocMethod'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'AllocID'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpAllocs/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoAllocs'                  , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SettlType'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SettlDate'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CashMargin'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CashMargin'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ClearingFeeIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ClearingFeeIndicator'      , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'HandlInst'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'HandlInst'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ExecInst'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ExecInst'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MinQty'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MinQty'                    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MaxFloor'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MaxFloor'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ExDestination'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpTradingSessions/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoTradingSessions'         , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ProcessCode'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ProcessCode'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Side'                      , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Symbol'                    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SymbolSfx'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecurityID'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecurityIDSource'          , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpSecurityAltID/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Product'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CFICode'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecurityType'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecuritySubType'           , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MaturityDate'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PutOrCall'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'IssueDate'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RepurchaseRate'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Factor'                    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CreditRating'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'InstrRegistry'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CountryOfIssue'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RedemptionDate'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'StrikePrice'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'StrikeCurrency'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OptAttribute'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ContractMultiplier'        , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CouponRate'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecurityExchange'          , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Issuer'                    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EncodedIssuer'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SecurityDesc'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Pool'                      , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CPProgram'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CPRegType'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpEvents/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoEvents'                  , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DatedDate'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpUnderlyings/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoUnderlyings'             , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PrevClosePx'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PrevClosePx'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_MultilegOrderCancelReplace_grpLegs/2), decode_msg_MultilegOrderCancelReplace(L, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'NoLegs'                    , G), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'LocateReqd'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'LocateReqd'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'TransactTime'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'QtyType'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrderQty'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CashOrderQty'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrderPercent'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RoundingDirection'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RoundingModulus'           , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrdType'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PriceType'                 , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Price'                     , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'StopPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'StopPx'                    , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Currency'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ComplianceID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ComplianceID'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SolicitedFlag'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SolicitedFlag'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'IOIID'                     , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'QuoteID'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'TimeInForce'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'TimeInForce'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EffectiveTime'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EffectiveTime'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ExpireDate'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ExpireTime'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'GTBookingInst'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'GTBookingInst'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Commission'                , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CommType'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CommCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CommCurrency'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'FundRenewWaiv'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'FundRenewWaiv'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrderCapacity'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'OrderRestrictions'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'OrderRestrictions'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ForexReq'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ForexReq'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'SettlCurrency'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'SettlCurrency'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'BookingType'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Text'                      , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EncodedTextLen'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'EncodedText'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PositionEffect'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CoveredOrUncovered'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CoveredOrUncovered'        , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MaxShow'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MaxShow'                   , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PegOffsetValue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PegOffsetValue'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PegMoveType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PegMoveType'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PegOffsetType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PegOffsetType'             , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PegLimitType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PegLimitType'              , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PegRoundDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PegRoundDirection'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'PegScope'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'PegScope'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionInst'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionInst'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionOffsetValue'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionOffsetValue'     , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionMoveType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionMoveType'        , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionOffsetType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionOffsetType'      , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionLimitType'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionLimitType'       , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionRoundDirection'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionRoundDirection'  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'DiscretionScope'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'DiscretionScope'           , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'TargetStrategy'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'TargetStrategy'            , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'TargetStrategyParameters'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'TargetStrategyParameters'  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'ParticipationRate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'ParticipationRate'         , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'CancellationRights'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'CancellationRights'        , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MoneyLaunderingStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MoneyLaunderingStatus'     , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'RegistID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'RegistID'                  , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'Designation'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'Designation'               , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{'MultiLegRptTypeReq'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, ?MAP_SET(R, 'MultilegOrderCancelReplace', 'MultiLegRptTypeReq'        , V), I+1, U);
decode_msg_MultilegOrderCancelReplace             ([{K,V}|T], R, I, U)                                       -> decode_msg_MultilegOrderCancelReplace([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_MultilegOrderCancelReplace             ([H|T], R, I, U) -> decode_msg_MultilegOrderCancelReplace(T, R, I, [H|U]);
decode_msg_MultilegOrderCancelReplace             ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TradeCaptureReportRequest              ([{'TradeRequestID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradeRequestID'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradeRequestType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradeRequestType'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradeReportID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradeReportID'             , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecondaryTradeReportID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecondaryTradeReportID'    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ExecID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ExecID'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ExecType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ExecType'                  , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'OrderID'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ClOrdID'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'MatchStatus'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'MatchStatus'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TrdType'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TrdSubType'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TrdSubType'                , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TransferReason'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TransferReason'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecondaryTrdType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecondaryTrdType'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradeLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradeLinkID'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TrdMatchID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TrdMatchID'                , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpPartyIDs/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoPartyIDs'                , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Symbol'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecurityID'                , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpSecurityAltID/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Product'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CFICode'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecurityType'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Factor'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CreditRating'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CouponRate'                , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Issuer'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Pool'                      , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpEvents/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'DeliveryForm'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'PctAtRisk'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpInstrAttrib/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'AgreementID'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TerminationType'           , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'StartDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EndDate'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpUnderlyings/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpLegs/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'NoDates'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpDates, N, T, fun fix_groups:decode_TradeCaptureReportRequest_grpDates/2), decode_msg_TradeCaptureReportRequest(L, ?MAP_SET(R, 'TradeCaptureReportRequest', 'NoDates'                   , G), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradingSessionID'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TimeBracket'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TimeBracket'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Side'                      , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'MultiLegReportingType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'MultiLegReportingType'     , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradeInputSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradeInputSource'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'TradeInputDevice'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'TradeInputDevice'          , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ResponseTransportType'     , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'ResponseDestination'       , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'Text'                      , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EncodedTextLen'            , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, ?MAP_SET(R, 'TradeCaptureReportRequest', 'EncodedText'               , V), I+1, U);
decode_msg_TradeCaptureReportRequest              ([{K,V}|T], R, I, U)                                       -> decode_msg_TradeCaptureReportRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TradeCaptureReportRequest              ([H|T], R, I, U) -> decode_msg_TradeCaptureReportRequest(T, R, I, [H|U]);
decode_msg_TradeCaptureReportRequest              ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TradeCaptureReport                     ([{'TradeReportID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeReportID'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeReportTransType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeReportTransType'         , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeReportType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeReportType'              , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeRequestID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeRequestID'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TrdType'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TrdType'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TrdSubType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TrdSubType'                   , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecondaryTrdType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecondaryTrdType'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TransferReason'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TransferReason'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ExecType'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ExecType'                     , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TotNumTradeReports'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TotNumTradeReports'           , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastRptRequested'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastRptRequested'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'UnsolicitedIndicator'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'UnsolicitedIndicator'         , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SubscriptionRequestType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SubscriptionRequestType'      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeReportRefID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeReportRefID'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecondaryTradeReportRefID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecondaryTradeReportRefID'    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecondaryTradeReportID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecondaryTradeReportID'       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeLinkID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeLinkID'                  , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TrdMatchID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TrdMatchID'                   , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ExecID'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ExecID'                       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'OrdStatus'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'OrdStatus'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecondaryExecID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecondaryExecID'              , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ExecRestatementReason'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ExecRestatementReason'        , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'PreviouslyReported'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'PreviouslyReported'           , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'PriceType'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'PriceType'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Symbol'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Symbol'                       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SymbolSfx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SymbolSfx'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecurityID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecurityID'                   , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecurityIDSource'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecurityIDSource'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoSecurityAltID'              , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_TradeCaptureReport_grpSecurityAltID/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoSecurityAltID'              , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Product'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Product'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CFICode'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CFICode'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecurityType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecurityType'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecuritySubType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecuritySubType'              , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'MaturityMonthYear'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'MaturityMonthYear'            , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'MaturityDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'MaturityDate'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'PutOrCall'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'PutOrCall'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CouponPaymentDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CouponPaymentDate'            , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'IssueDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'IssueDate'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'RepoCollateralSecurityType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'RepoCollateralSecurityType'   , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'RepurchaseTerm'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'RepurchaseTerm'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'RepurchaseRate'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'RepurchaseRate'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Factor'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Factor'                       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CreditRating'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CreditRating'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'InstrRegistry'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'InstrRegistry'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CountryOfIssue'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CountryOfIssue'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'StateOrProvinceOfIssue'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'StateOrProvinceOfIssue'       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LocaleOfIssue'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LocaleOfIssue'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'RedemptionDate'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'RedemptionDate'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'StrikePrice'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'StrikePrice'                  , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'StrikeCurrency'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'StrikeCurrency'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'OptAttribute'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'OptAttribute'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ContractMultiplier'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ContractMultiplier'           , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CouponRate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CouponRate'                   , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecurityExchange'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecurityExchange'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Issuer'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Issuer'                       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'EncodedIssuerLen'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'EncodedIssuerLen'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'EncodedIssuer'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'EncodedIssuer'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SecurityDesc'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SecurityDesc'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'EncodedSecurityDescLen'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'EncodedSecurityDescLen'       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'EncodedSecurityDesc'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'EncodedSecurityDesc'          , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Pool'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Pool'                         , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ContractSettlMonth'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ContractSettlMonth'           , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CPProgram'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CPProgram'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CPRegType'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CPRegType'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoEvents'                     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_TradeCaptureReport_grpEvents/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoEvents'                     , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'DatedDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'DatedDate'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'InterestAccrualDate'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'InterestAccrualDate'          , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'AgreementDesc'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'AgreementDesc'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'AgreementID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'AgreementID'                  , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'AgreementDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'AgreementDate'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'AgreementCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'AgreementCurrency'            , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TerminationType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TerminationType'              , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'StartDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'StartDate'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'EndDate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'EndDate'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'DeliveryType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'DeliveryType'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'MarginRatio'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'MarginRatio'                  , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'OrderQty'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'OrderQty'                     , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CashOrderQty'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CashOrderQty'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'OrderPercent'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'OrderPercent'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'RoundingDirection'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'RoundingDirection'            , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'RoundingModulus'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'RoundingModulus'              , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'QtyType'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'QtyType'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'YieldType'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'YieldType'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Yield'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Yield'                        , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'YieldCalcDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'YieldCalcDate'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'YieldRedemptionDate'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'YieldRedemptionDate'          , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'YieldRedemptionPrice'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'YieldRedemptionPrice'         , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'YieldRedemptionPriceType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'YieldRedemptionPriceType'     , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoUnderlyings'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_TradeCaptureReport_grpUnderlyings/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoUnderlyings'                , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'UnderlyingTradingSessionID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'UnderlyingTradingSessionID'   , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'UnderlyingTradingSessionSubID', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'UnderlyingTradingSessionSubID', V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastQty'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastQty'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastPx'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastPx'                       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastParPx'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastParPx'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastSpotRate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastSpotRate'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastForwardPoints'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastForwardPoints'            , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'LastMkt'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'LastMkt'                      , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeDate'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ClearingBusinessDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ClearingBusinessDate'         , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'AvgPx'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'AvgPx'                        , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'Spread'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'Spread'                       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkCurveCurrency'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkCurveCurrency'       , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkCurveName'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkCurveName'           , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkCurvePoint'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkCurvePoint'          , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkPrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkPrice'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkPriceType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkPriceType'           , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkSecurityID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkSecurityID'          , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'BenchmarkSecurityIDSource'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'BenchmarkSecurityIDSource'    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'AvgPxIndicator'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'AvgPxIndicator'               , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoPosAmt'                     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPosAmt, N, T, fun fix_groups:decode_TradeCaptureReport_grpPosAmt/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoPosAmt'                     , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'MultiLegReportingType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'MultiLegReportingType'        , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TradeLegRefID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TradeLegRefID'                , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoLegs'                       , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_TradeCaptureReport_grpLegs/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoLegs'                       , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'TransactTime'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'TransactTime'                 , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoTrdRegTimestamps'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_TradeCaptureReport_grpTrdRegTimestamps/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoTrdRegTimestamps'           , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SettlType'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SettlType'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'SettlDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'SettlDate'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'MatchStatus'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'MatchStatus'                  , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'MatchType'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'MatchType'                    , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'NoSides'                      , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSides, N, T, fun fix_groups:decode_TradeCaptureReport_grpSides/2), decode_msg_TradeCaptureReport(L, ?MAP_SET(R, 'TradeCaptureReport', 'NoSides'                      , G), I+1, U);
decode_msg_TradeCaptureReport                     ([{'CopyMsgIndicator'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'CopyMsgIndicator'             , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'PublishTrdIndicator'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'PublishTrdIndicator'          , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{'ShortSaleReason'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReport(T, ?MAP_SET(R, 'TradeCaptureReport', 'ShortSaleReason'              , V), I+1, U);
decode_msg_TradeCaptureReport                     ([{K,V}|T], R, I, U)                                          -> decode_msg_TradeCaptureReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TradeCaptureReport                     ([H|T], R, I, U) -> decode_msg_TradeCaptureReport(T, R, I, [H|U]);
decode_msg_TradeCaptureReport                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_OrderMassStatusRequest                 ([{'MassStatusReqID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'MassStatusReqID'                     , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'MassStatusReqType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'MassStatusReqType'                   , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'NoPartyIDs'                          , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_OrderMassStatusRequest_grpPartyIDs/2), decode_msg_OrderMassStatusRequest(L, ?MAP_SET(R, 'OrderMassStatusRequest', 'NoPartyIDs'                          , G), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Account'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Account'                             , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'AcctIDSource'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'AcctIDSource'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'TradingSessionID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'TradingSessionID'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'TradingSessionSubID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'TradingSessionSubID'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Symbol'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Symbol'                              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SymbolSfx'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SymbolSfx'                           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SecurityID'                          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SecurityID'                          , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SecurityIDSource'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SecurityIDSource'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'NoSecurityAltID'                     , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_OrderMassStatusRequest_grpSecurityAltID/2), decode_msg_OrderMassStatusRequest(L, ?MAP_SET(R, 'OrderMassStatusRequest', 'NoSecurityAltID'                     , G), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Product'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Product'                             , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CFICode'                             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CFICode'                             , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SecurityType'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SecurityType'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SecuritySubType'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SecuritySubType'                     , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'MaturityMonthYear'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'MaturityMonthYear'                   , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'MaturityDate'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'MaturityDate'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'PutOrCall'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'PutOrCall'                           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CouponPaymentDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CouponPaymentDate'                   , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'IssueDate'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'IssueDate'                           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'RepoCollateralSecurityType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'RepoCollateralSecurityType'          , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'RepurchaseTerm'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'RepurchaseTerm'                      , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'RepurchaseRate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'RepurchaseRate'                      , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Factor'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Factor'                              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CreditRating'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CreditRating'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'InstrRegistry'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'InstrRegistry'                       , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CountryOfIssue'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CountryOfIssue'                      , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'StateOrProvinceOfIssue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'StateOrProvinceOfIssue'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'LocaleOfIssue'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'LocaleOfIssue'                       , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'RedemptionDate'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'RedemptionDate'                      , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'StrikePrice'                         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'StrikePrice'                         , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'StrikeCurrency'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'StrikeCurrency'                      , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'OptAttribute'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'OptAttribute'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'ContractMultiplier'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'ContractMultiplier'                  , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CouponRate'                          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CouponRate'                          , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SecurityExchange'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SecurityExchange'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Issuer'                              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Issuer'                              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedIssuerLen'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedIssuerLen'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedIssuer'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedIssuer'                       , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'SecurityDesc'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'SecurityDesc'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedSecurityDescLen'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedSecurityDescLen'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedSecurityDesc'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedSecurityDesc'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Pool'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Pool'                                , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'ContractSettlMonth'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'ContractSettlMonth'                  , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CPProgram'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CPProgram'                           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'CPRegType'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'CPRegType'                           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'NoEvents'                            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_OrderMassStatusRequest_grpEvents/2), decode_msg_OrderMassStatusRequest(L, ?MAP_SET(R, 'OrderMassStatusRequest', 'NoEvents'                            , G), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'DatedDate'                           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'DatedDate'                           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'InterestAccrualDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'InterestAccrualDate'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSymbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSymbol'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSymbolSfx'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSecurityID'                , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSecurityIDSource'          , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'NoUnderlyingSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingSecurityAltID, N, T, fun fix_groups:decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID/2), decode_msg_OrderMassStatusRequest(L, ?MAP_SET(R, 'OrderMassStatusRequest', 'NoUnderlyingSecurityAltID'           , G), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingProduct'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingProduct'                   , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCFICode'                   , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSecurityType'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSecuritySubType'           , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingMaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingMaturityMonthYear'         , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingMaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingMaturityDate'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingPutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingPutOrCall'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCouponPaymentDate'         , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingIssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingIssueDate'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingRepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingRepoCollateralSecurityType', V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingRepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingRepurchaseTerm'            , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingRepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingRepurchaseRate'            , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingFactor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingFactor'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCreditRating'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingInstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingInstrRegistry'             , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCountryOfIssue'            , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingStateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingStateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingLocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingLocaleOfIssue'             , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingRedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingRedemptionDate'            , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingStrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingStrikePrice'               , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingStrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingStrikeCurrency'            , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingOptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingOptAttribute'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingContractMultiplier'        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCouponRate'                , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSecurityExchange'          , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingIssuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingIssuer'                    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedUnderlyingIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedUnderlyingIssuerLen'          , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedUnderlyingIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedUnderlyingIssuer'             , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingSecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingSecurityDesc'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedUnderlyingSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedUnderlyingSecurityDescLen'    , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'EncodedUnderlyingSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'EncodedUnderlyingSecurityDesc'       , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCPProgram'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCPRegType'                 , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCurrency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCurrency'                  , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingQty'                       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingQty'                       , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingPx'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingPx'                        , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingDirtyPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingDirtyPrice'                , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingEndPrice'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingEndPrice'                  , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingStartValue'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingStartValue'                , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingCurrentValue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingCurrentValue'              , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'UnderlyingEndValue'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'UnderlyingEndValue'                  , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'NoUnderlyingStips'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyingStips, N, T, fun fix_groups:decode_OrderMassStatusRequest_grpUnderlyingStips/2), decode_msg_OrderMassStatusRequest(L, ?MAP_SET(R, 'OrderMassStatusRequest', 'NoUnderlyingStips'                   , G), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{'Side'                                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, ?MAP_SET(R, 'OrderMassStatusRequest', 'Side'                                , V), I+1, U);
decode_msg_OrderMassStatusRequest                 ([{K,V}|T], R, I, U)                                                 -> decode_msg_OrderMassStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_OrderMassStatusRequest                 ([H|T], R, I, U) -> decode_msg_OrderMassStatusRequest(T, R, I, [H|U]);
decode_msg_OrderMassStatusRequest                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_QuoteRequestReject                     ([{'QuoteReqID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequestReject(T, ?MAP_SET(R, 'QuoteRequestReject', 'QuoteReqID'              , V), I+1, U);
decode_msg_QuoteRequestReject                     ([{'RFQReqID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequestReject(T, ?MAP_SET(R, 'QuoteRequestReject', 'RFQReqID'                , V), I+1, U);
decode_msg_QuoteRequestReject                     ([{'QuoteRequestRejectReason', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequestReject(T, ?MAP_SET(R, 'QuoteRequestReject', 'QuoteRequestRejectReason', V), I+1, U);
decode_msg_QuoteRequestReject                     ([{'NoRelatedSym'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_QuoteRequestReject_grpRelatedSym/2), decode_msg_QuoteRequestReject(L, ?MAP_SET(R, 'QuoteRequestReject', 'NoRelatedSym'            , G), I+1, U);
decode_msg_QuoteRequestReject                     ([{'Text'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequestReject(T, ?MAP_SET(R, 'QuoteRequestReject', 'Text'                    , V), I+1, U);
decode_msg_QuoteRequestReject                     ([{'EncodedTextLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequestReject(T, ?MAP_SET(R, 'QuoteRequestReject', 'EncodedTextLen'          , V), I+1, U);
decode_msg_QuoteRequestReject                     ([{'EncodedText'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteRequestReject(T, ?MAP_SET(R, 'QuoteRequestReject', 'EncodedText'             , V), I+1, U);
decode_msg_QuoteRequestReject                     ([{K,V}|T], R, I, U)                                     -> decode_msg_QuoteRequestReject([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_QuoteRequestReject                     ([H|T], R, I, U) -> decode_msg_QuoteRequestReject(T, R, I, [H|U]);
decode_msg_QuoteRequestReject                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_RFQRequest                             ([{'RFQReqID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RFQRequest(T, ?MAP_SET(R, 'RFQRequest', 'RFQReqID'               , V), I+1, U);
decode_msg_RFQRequest                             ([{'NoRelatedSym'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpRelatedSym, N, T, fun fix_groups:decode_RFQRequest_grpRelatedSym/2), decode_msg_RFQRequest(L, ?MAP_SET(R, 'RFQRequest', 'NoRelatedSym'           , G), I+1, U);
decode_msg_RFQRequest                             ([{'SubscriptionRequestType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RFQRequest(T, ?MAP_SET(R, 'RFQRequest', 'SubscriptionRequestType', V), I+1, U);
decode_msg_RFQRequest                             ([{K,V}|T], R, I, U)                                    -> decode_msg_RFQRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_RFQRequest                             ([H|T], R, I, U) -> decode_msg_RFQRequest(T, R, I, [H|U]);
decode_msg_RFQRequest                             ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_QuoteStatusReport                      ([{'QuoteStatusReqID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'QuoteStatusReqID'          , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'QuoteReqID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'QuoteReqID'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'QuoteID'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'QuoteRespID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'QuoteRespID'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'QuoteType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'QuoteType'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_QuoteStatusReport_grpPartyIDs/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'TradingSessionID'          , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Symbol'                    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SecurityID'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_QuoteStatusReport_grpSecurityAltID/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Product'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CFICode'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SecurityType'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MaturityDate'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'IssueDate'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Factor'                    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CreditRating'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'StrikePrice'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OptAttribute'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CouponRate'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Issuer'                    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Pool'                      , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CPProgram'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CPRegType'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_QuoteStatusReport_grpEvents/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoEvents'                  , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'DatedDate'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'AgreementDesc'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'AgreementID'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'AgreementDate'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'AgreementCurrency'         , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'TerminationType'           , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'StartDate'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EndDate'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'DeliveryType'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MarginRatio'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_QuoteStatusReport_grpUnderlyings/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Side'                      , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OrderQty'                  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CashOrderQty'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OrderPercent'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'RoundingDirection'         , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'RoundingModulus'           , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SettlType'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SettlDate'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SettlDate2'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SettlDate2'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OrderQty2'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OrderQty2'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Currency'                  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_QuoteStatusReport_grpStipulations/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoStipulations'            , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Account'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'AcctIDSource'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'AccountType'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_QuoteStatusReport_grpLegs/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoLegs'                    , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'NoQuoteQualifiers'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpQuoteQualifiers, N, T, fun fix_groups:decode_QuoteStatusReport_grpQuoteQualifiers/2), decode_msg_QuoteStatusReport(L, ?MAP_SET(R, 'QuoteStatusReport', 'NoQuoteQualifiers'         , G), I+1, U);
decode_msg_QuoteStatusReport                      ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'ExpireTime'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Price'                     , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'PriceType'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Spread'                    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'YieldType'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Yield'                     , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'YieldCalcDate'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BidPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BidPx'                     , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OfferPx'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OfferPx'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MktBidPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MktBidPx'                  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MktOfferPx'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MktOfferPx'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MinBidSize'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MinBidSize'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BidSize'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BidSize'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MinOfferSize'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MinOfferSize'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OfferSize'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OfferSize'                 , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'ValidUntilTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'ValidUntilTime'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BidSpotRate'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BidSpotRate'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OfferSpotRate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OfferSpotRate'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BidForwardPoints'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BidForwardPoints'          , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OfferForwardPoints'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OfferForwardPoints'        , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MidPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MidPx'                     , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BidYield'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BidYield'                  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'MidYield'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'MidYield'                  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OfferYield'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OfferYield'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'TransactTime'              , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OrdType'                   , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'BidForwardPoints2'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'BidForwardPoints2'         , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'OfferForwardPoints2'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'OfferForwardPoints2'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SettlCurrBidFxRate'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SettlCurrBidFxRate'        , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SettlCurrOfferFxRate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SettlCurrOfferFxRate'      , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'SettlCurrFxRateCalc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'SettlCurrFxRateCalc'       , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CommType'                  , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Commission'                , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'ExDestination'             , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'QuoteStatus'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'QuoteStatus'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'Text'                      , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteStatusReport(T, ?MAP_SET(R, 'QuoteStatusReport', 'EncodedText'               , V), I+1, U);
decode_msg_QuoteStatusReport                      ([{K,V}|T], R, I, U)                                       -> decode_msg_QuoteStatusReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_QuoteStatusReport                      ([H|T], R, I, U) -> decode_msg_QuoteStatusReport(T, R, I, [H|U]);
decode_msg_QuoteStatusReport                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_QuoteResponse                          ([{'QuoteRespID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'QuoteRespID'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'QuoteID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'QuoteID'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'QuoteRespType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'QuoteRespType'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'ClOrdID'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OrderCapacity'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'IOIID'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'IOIID'                     , V), I+1, U);
decode_msg_QuoteResponse                          ([{'QuoteType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'QuoteType'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'NoQuoteQualifiers'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpQuoteQualifiers, N, T, fun fix_groups:decode_QuoteResponse_grpQuoteQualifiers/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoQuoteQualifiers'         , G), I+1, U);
decode_msg_QuoteResponse                          ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_QuoteResponse_grpPartyIDs/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoPartyIDs'                , G), I+1, U);
decode_msg_QuoteResponse                          ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'TradingSessionID'          , V), I+1, U);
decode_msg_QuoteResponse                          ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Symbol'                    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SymbolSfx'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SecurityID'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SecurityIDSource'          , V), I+1, U);
decode_msg_QuoteResponse                          ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_QuoteResponse_grpSecurityAltID/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_QuoteResponse                          ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Product'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CFICode'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SecurityType'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SecuritySubType'           , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MaturityDate'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'PutOrCall'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_QuoteResponse                          ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'IssueDate'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_QuoteResponse                          ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'RepurchaseRate'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Factor'                    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CreditRating'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'InstrRegistry'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CountryOfIssue'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'RedemptionDate'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'StrikePrice'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'StrikeCurrency'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OptAttribute'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'ContractMultiplier'        , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CouponRate'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SecurityExchange'          , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Issuer'                    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EncodedIssuer'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SecurityDesc'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Pool'                      , V), I+1, U);
decode_msg_QuoteResponse                          ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CPProgram'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CPRegType'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_QuoteResponse_grpEvents/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoEvents'                  , G), I+1, U);
decode_msg_QuoteResponse                          ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'DatedDate'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'AgreementDesc'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'AgreementID'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'AgreementDate'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'AgreementCurrency'         , V), I+1, U);
decode_msg_QuoteResponse                          ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'TerminationType'           , V), I+1, U);
decode_msg_QuoteResponse                          ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'StartDate'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EndDate'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'DeliveryType'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MarginRatio'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_QuoteResponse_grpUnderlyings/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoUnderlyings'             , G), I+1, U);
decode_msg_QuoteResponse                          ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Side'                      , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OrderQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OrderQty'                  , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CashOrderQty'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CashOrderQty'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OrderPercent'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OrderPercent'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'RoundingDirection'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'RoundingDirection'         , V), I+1, U);
decode_msg_QuoteResponse                          ([{'RoundingModulus'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'RoundingModulus'           , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SettlType'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SettlDate'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SettlDate2'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SettlDate2'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OrderQty2'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OrderQty2'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Currency'                  , V), I+1, U);
decode_msg_QuoteResponse                          ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_QuoteResponse_grpStipulations/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoStipulations'            , G), I+1, U);
decode_msg_QuoteResponse                          ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Account'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'AcctIDSource'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'AccountType'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_QuoteResponse_grpLegs/2), decode_msg_QuoteResponse(L, ?MAP_SET(R, 'QuoteResponse', 'NoLegs'                    , G), I+1, U);
decode_msg_QuoteResponse                          ([{'BidPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BidPx'                     , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OfferPx'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OfferPx'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MktBidPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MktBidPx'                  , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MktOfferPx'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MktOfferPx'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MinBidSize'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MinBidSize'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BidSize'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BidSize'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MinOfferSize'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MinOfferSize'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OfferSize'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OfferSize'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'ValidUntilTime'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'ValidUntilTime'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BidSpotRate'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BidSpotRate'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OfferSpotRate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OfferSpotRate'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BidForwardPoints'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BidForwardPoints'          , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OfferForwardPoints'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OfferForwardPoints'        , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MidPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MidPx'                     , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BidYield'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BidYield'                  , V), I+1, U);
decode_msg_QuoteResponse                          ([{'MidYield'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'MidYield'                  , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OfferYield'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OfferYield'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'TransactTime'              , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OrdType'                   , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BidForwardPoints2'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BidForwardPoints2'         , V), I+1, U);
decode_msg_QuoteResponse                          ([{'OfferForwardPoints2'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'OfferForwardPoints2'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SettlCurrBidFxRate'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SettlCurrBidFxRate'        , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SettlCurrOfferFxRate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SettlCurrOfferFxRate'      , V), I+1, U);
decode_msg_QuoteResponse                          ([{'SettlCurrFxRateCalc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'SettlCurrFxRateCalc'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Commission'                , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CommType'                  , V), I+1, U);
decode_msg_QuoteResponse                          ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_QuoteResponse                          ([{'ExDestination'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'ExDestination'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Text'                      , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EncodedTextLen'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'EncodedText'               , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Price'                     , V), I+1, U);
decode_msg_QuoteResponse                          ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'PriceType'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Spread'                    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_QuoteResponse                          ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'YieldType'                 , V), I+1, U);
decode_msg_QuoteResponse                          ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'Yield'                     , V), I+1, U);
decode_msg_QuoteResponse                          ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'YieldCalcDate'             , V), I+1, U);
decode_msg_QuoteResponse                          ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_QuoteResponse                          ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_QuoteResponse                          ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_QuoteResponse(T, ?MAP_SET(R, 'QuoteResponse', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_QuoteResponse                          ([{K,V}|T], R, I, U)                                       -> decode_msg_QuoteResponse([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_QuoteResponse                          ([H|T], R, I, U) -> decode_msg_QuoteResponse(T, R, I, [H|U]);
decode_msg_QuoteResponse                          ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_Confirmation                           ([{'ConfirmID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ConfirmID'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'ConfirmRefID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ConfirmRefID'              , V), I+1, U);
decode_msg_Confirmation                           ([{'ConfirmReqID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ConfirmReqID'              , V), I+1, U);
decode_msg_Confirmation                           ([{'ConfirmTransType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ConfirmTransType'          , V), I+1, U);
decode_msg_Confirmation                           ([{'ConfirmType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ConfirmType'               , V), I+1, U);
decode_msg_Confirmation                           ([{'CopyMsgIndicator'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CopyMsgIndicator'          , V), I+1, U);
decode_msg_Confirmation                           ([{'LegalConfirm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'LegalConfirm'              , V), I+1, U);
decode_msg_Confirmation                           ([{'ConfirmStatus'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ConfirmStatus'             , V), I+1, U);
decode_msg_Confirmation                           ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_Confirmation_grpPartyIDs/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoPartyIDs'                , G), I+1, U);
decode_msg_Confirmation                           ([{'NoOrders'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpOrders, N, T, fun fix_groups:decode_Confirmation_grpOrders/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoOrders'                  , G), I+1, U);
decode_msg_Confirmation                           ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AllocID'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'SecondaryAllocID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecondaryAllocID'          , V), I+1, U);
decode_msg_Confirmation                           ([{'IndividualAllocID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'IndividualAllocID'         , V), I+1, U);
decode_msg_Confirmation                           ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'TransactTime'              , V), I+1, U);
decode_msg_Confirmation                           ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'TradeDate'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_Confirmation_grpTrdRegTimestamps/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_Confirmation                           ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Symbol'                    , V), I+1, U);
decode_msg_Confirmation                           ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SymbolSfx'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecurityID'                , V), I+1, U);
decode_msg_Confirmation                           ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecurityIDSource'          , V), I+1, U);
decode_msg_Confirmation                           ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_Confirmation_grpSecurityAltID/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_Confirmation                           ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Product'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CFICode'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecurityType'              , V), I+1, U);
decode_msg_Confirmation                           ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecuritySubType'           , V), I+1, U);
decode_msg_Confirmation                           ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_Confirmation                           ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'MaturityDate'              , V), I+1, U);
decode_msg_Confirmation                           ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'PutOrCall'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_Confirmation                           ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'IssueDate'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_Confirmation                           ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_Confirmation                           ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'RepurchaseRate'            , V), I+1, U);
decode_msg_Confirmation                           ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Factor'                    , V), I+1, U);
decode_msg_Confirmation                           ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CreditRating'              , V), I+1, U);
decode_msg_Confirmation                           ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'InstrRegistry'             , V), I+1, U);
decode_msg_Confirmation                           ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CountryOfIssue'            , V), I+1, U);
decode_msg_Confirmation                           ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_Confirmation                           ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_Confirmation                           ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'RedemptionDate'            , V), I+1, U);
decode_msg_Confirmation                           ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StrikePrice'               , V), I+1, U);
decode_msg_Confirmation                           ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StrikeCurrency'            , V), I+1, U);
decode_msg_Confirmation                           ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'OptAttribute'              , V), I+1, U);
decode_msg_Confirmation                           ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ContractMultiplier'        , V), I+1, U);
decode_msg_Confirmation                           ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CouponRate'                , V), I+1, U);
decode_msg_Confirmation                           ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecurityExchange'          , V), I+1, U);
decode_msg_Confirmation                           ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Issuer'                    , V), I+1, U);
decode_msg_Confirmation                           ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_Confirmation                           ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EncodedIssuer'             , V), I+1, U);
decode_msg_Confirmation                           ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SecurityDesc'              , V), I+1, U);
decode_msg_Confirmation                           ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_Confirmation                           ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_Confirmation                           ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Pool'                      , V), I+1, U);
decode_msg_Confirmation                           ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_Confirmation                           ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CPProgram'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CPRegType'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_Confirmation_grpEvents/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoEvents'                  , G), I+1, U);
decode_msg_Confirmation                           ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'DatedDate'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_Confirmation                           ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'DeliveryForm'              , V), I+1, U);
decode_msg_Confirmation                           ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'PctAtRisk'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_Confirmation_grpInstrAttrib/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_Confirmation                           ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AgreementDesc'             , V), I+1, U);
decode_msg_Confirmation                           ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AgreementID'               , V), I+1, U);
decode_msg_Confirmation                           ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AgreementDate'             , V), I+1, U);
decode_msg_Confirmation                           ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AgreementCurrency'         , V), I+1, U);
decode_msg_Confirmation                           ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'TerminationType'           , V), I+1, U);
decode_msg_Confirmation                           ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StartDate'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EndDate'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'DeliveryType'              , V), I+1, U);
decode_msg_Confirmation                           ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'MarginRatio'               , V), I+1, U);
decode_msg_Confirmation                           ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_Confirmation_grpUnderlyings/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoUnderlyings'             , G), I+1, U);
decode_msg_Confirmation                           ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_Confirmation_grpLegs/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoLegs'                    , G), I+1, U);
decode_msg_Confirmation                           ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'YieldType'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Yield'                     , V), I+1, U);
decode_msg_Confirmation                           ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'YieldCalcDate'             , V), I+1, U);
decode_msg_Confirmation                           ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_Confirmation                           ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_Confirmation                           ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_Confirmation                           ([{'AllocQty'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AllocQty'                  , V), I+1, U);
decode_msg_Confirmation                           ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'QtyType'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Side'                      , V), I+1, U);
decode_msg_Confirmation                           ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Currency'                  , V), I+1, U);
decode_msg_Confirmation                           ([{'LastMkt'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'LastMkt'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'NoCapacities'              , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpCapacities, N, T, fun fix_groups:decode_Confirmation_grpCapacities/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoCapacities'              , G), I+1, U);
decode_msg_Confirmation                           ([{'AllocAccount'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AllocAccount'              , V), I+1, U);
decode_msg_Confirmation                           ([{'AllocAcctIDSource'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AllocAcctIDSource'         , V), I+1, U);
decode_msg_Confirmation                           ([{'AllocAccountType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AllocAccountType'          , V), I+1, U);
decode_msg_Confirmation                           ([{'AvgPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AvgPx'                     , V), I+1, U);
decode_msg_Confirmation                           ([{'AvgPxPrecision'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AvgPxPrecision'            , V), I+1, U);
decode_msg_Confirmation                           ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'PriceType'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'AvgParPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AvgParPx'                  , V), I+1, U);
decode_msg_Confirmation                           ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Spread'                    , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_Confirmation                           ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_Confirmation                           ([{'ReportedPx'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ReportedPx'                , V), I+1, U);
decode_msg_Confirmation                           ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Text'                      , V), I+1, U);
decode_msg_Confirmation                           ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EncodedTextLen'            , V), I+1, U);
decode_msg_Confirmation                           ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EncodedText'               , V), I+1, U);
decode_msg_Confirmation                           ([{'ProcessCode'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ProcessCode'               , V), I+1, U);
decode_msg_Confirmation                           ([{'GrossTradeAmt'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'GrossTradeAmt'             , V), I+1, U);
decode_msg_Confirmation                           ([{'NumDaysInterest'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'NumDaysInterest'           , V), I+1, U);
decode_msg_Confirmation                           ([{'ExDate'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'ExDate'                    , V), I+1, U);
decode_msg_Confirmation                           ([{'AccruedInterestRate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AccruedInterestRate'       , V), I+1, U);
decode_msg_Confirmation                           ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_Confirmation                           ([{'InterestAtMaturity'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'InterestAtMaturity'        , V), I+1, U);
decode_msg_Confirmation                           ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_Confirmation                           ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StartCash'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'EndCash'                   , V), I+1, U);
decode_msg_Confirmation                           ([{'Concession'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Concession'                , V), I+1, U);
decode_msg_Confirmation                           ([{'TotalTakedown'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'TotalTakedown'             , V), I+1, U);
decode_msg_Confirmation                           ([{'NetMoney'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'NetMoney'                  , V), I+1, U);
decode_msg_Confirmation                           ([{'MaturityNetMoney'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'MaturityNetMoney'          , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlCurrAmt'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlCurrAmt'              , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlCurrency'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlCurrency'             , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlCurrFxRate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlCurrFxRate'           , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlCurrFxRateCalc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlCurrFxRateCalc'       , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlType'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlDate'                 , V), I+1, U);
decode_msg_Confirmation                           ([{'SettlDeliveryType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SettlDeliveryType'         , V), I+1, U);
decode_msg_Confirmation                           ([{'StandInstDbType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StandInstDbType'           , V), I+1, U);
decode_msg_Confirmation                           ([{'StandInstDbName'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StandInstDbName'           , V), I+1, U);
decode_msg_Confirmation                           ([{'StandInstDbID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'StandInstDbID'             , V), I+1, U);
decode_msg_Confirmation                           ([{'NoDlvyInst'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpDlvyInst, N, T, fun fix_groups:decode_Confirmation_grpDlvyInst/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoDlvyInst'                , G), I+1, U);
decode_msg_Confirmation                           ([{'Commission'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'Commission'                , V), I+1, U);
decode_msg_Confirmation                           ([{'CommType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CommType'                  , V), I+1, U);
decode_msg_Confirmation                           ([{'CommCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'CommCurrency'              , V), I+1, U);
decode_msg_Confirmation                           ([{'FundRenewWaiv'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'FundRenewWaiv'             , V), I+1, U);
decode_msg_Confirmation                           ([{'SharedCommission'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_Confirmation(T, ?MAP_SET(R, 'Confirmation', 'SharedCommission'          , V), I+1, U);
decode_msg_Confirmation                           ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_Confirmation_grpStipulations/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoStipulations'            , G), I+1, U);
decode_msg_Confirmation                           ([{'NoMiscFees'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMiscFees, N, T, fun fix_groups:decode_Confirmation_grpMiscFees/2), decode_msg_Confirmation(L, ?MAP_SET(R, 'Confirmation', 'NoMiscFees'                , G), I+1, U);
decode_msg_Confirmation                           ([{K,V}|T], R, I, U)                                       -> decode_msg_Confirmation([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_Confirmation                           ([H|T], R, I, U) -> decode_msg_Confirmation(T, R, I, [H|U]);
decode_msg_Confirmation                           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_PositionMaintenanceRequest             ([{'PosReqID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'PosReqID'                    , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'PosTransType'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'PosTransType'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'PosMaintAction'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'PosMaintAction'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'OrigPosReqRefID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'OrigPosReqRefID'             , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'PosMaintRptRefID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'PosMaintRptRefID'            , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'ClearingBusinessDate'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'ClearingBusinessDate'        , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SettlSessID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SettlSessID'                 , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SettlSessSubID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SettlSessSubID'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoPartyIDs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpPartyIDs/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoPartyIDs'                  , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Account'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Account'                     , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'AcctIDSource'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'AcctIDSource'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'AccountType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'AccountType'                 , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Symbol'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Symbol'                      , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SymbolSfx'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SymbolSfx'                   , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SecurityID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SecurityID'                  , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SecurityIDSource'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SecurityIDSource'            , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoSecurityAltID'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpSecurityAltID/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoSecurityAltID'             , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Product'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Product'                     , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CFICode'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CFICode'                     , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SecurityType'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SecurityType'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SecuritySubType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SecuritySubType'             , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'MaturityMonthYear'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'MaturityMonthYear'           , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'MaturityDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'MaturityDate'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'PutOrCall'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'PutOrCall'                   , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CouponPaymentDate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CouponPaymentDate'           , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'IssueDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'IssueDate'                   , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'RepoCollateralSecurityType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'RepoCollateralSecurityType'  , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'RepurchaseTerm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'RepurchaseTerm'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'RepurchaseRate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'RepurchaseRate'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Factor'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Factor'                      , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CreditRating'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CreditRating'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'InstrRegistry'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'InstrRegistry'               , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CountryOfIssue'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CountryOfIssue'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'StateOrProvinceOfIssue'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'StateOrProvinceOfIssue'      , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'LocaleOfIssue'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'LocaleOfIssue'               , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'RedemptionDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'RedemptionDate'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'StrikePrice'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'StrikePrice'                 , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'StrikeCurrency'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'StrikeCurrency'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'OptAttribute'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'OptAttribute'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'ContractMultiplier'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'ContractMultiplier'          , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CouponRate'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CouponRate'                  , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SecurityExchange'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SecurityExchange'            , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Issuer'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Issuer'                      , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'EncodedIssuerLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'EncodedIssuerLen'            , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'EncodedIssuer'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'EncodedIssuer'               , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'SecurityDesc'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'SecurityDesc'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'EncodedSecurityDescLen'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'EncodedSecurityDescLen'      , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'EncodedSecurityDesc'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'EncodedSecurityDesc'         , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Pool'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Pool'                        , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'ContractSettlMonth'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'ContractSettlMonth'          , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CPProgram'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CPProgram'                   , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'CPRegType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'CPRegType'                   , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoEvents'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpEvents/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoEvents'                    , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'DatedDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'DatedDate'                   , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'InterestAccrualDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'InterestAccrualDate'         , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Currency'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Currency'                    , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoLegs'                      , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpLegs/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoLegs'                      , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoUnderlyings'               , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpUnderlyings/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoUnderlyings'               , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoTradingSessions'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpTradingSessions/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoTradingSessions'           , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'TransactTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'TransactTime'                , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'NoPositions'                 , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPositions, N, T, fun fix_groups:decode_PositionMaintenanceRequest_grpPositions/2), decode_msg_PositionMaintenanceRequest(L, ?MAP_SET(R, 'PositionMaintenanceRequest', 'NoPositions'                 , G), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'AdjustmentType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'AdjustmentType'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'ContraryInstructionIndicator', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'ContraryInstructionIndicator', V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'PriorSpreadIndicator'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'PriorSpreadIndicator'        , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'ThresholdAmount'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'ThresholdAmount'             , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'Text'                        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'Text'                        , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'EncodedTextLen'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'EncodedTextLen'              , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{'EncodedText'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, ?MAP_SET(R, 'PositionMaintenanceRequest', 'EncodedText'                 , V), I+1, U);
decode_msg_PositionMaintenanceRequest             ([{K,V}|T], R, I, U)                                         -> decode_msg_PositionMaintenanceRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_PositionMaintenanceRequest             ([H|T], R, I, U) -> decode_msg_PositionMaintenanceRequest(T, R, I, [H|U]);
decode_msg_PositionMaintenanceRequest             ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_PositionMaintenanceReport              ([{'PosMaintRptID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PosMaintRptID'             , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'PosTransType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PosTransType'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'PosReqID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PosReqID'                  , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'PosMaintAction'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PosMaintAction'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'OrigPosReqRefID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'OrigPosReqRefID'           , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'PosMaintStatus'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PosMaintStatus'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'PosMaintResult'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PosMaintResult'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SettlSessID'               , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SettlSessSubID'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpPartyIDs/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Account'                   , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'AcctIDSource'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'AccountType'               , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Symbol'                    , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SecurityID'                , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpSecurityAltID/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Product'                   , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CFICode'                   , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SecurityType'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'MaturityDate'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'IssueDate'                 , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Factor'                    , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CreditRating'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'StrikePrice'               , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'OptAttribute'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CouponRate'                , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Issuer'                    , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Pool'                      , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CPProgram'                 , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'CPRegType'                 , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpEvents/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoEvents'                  , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'DatedDate'                 , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Currency'                  , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpLegs/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoLegs'                    , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpUnderlyings/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpTradingSessions/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoTradingSessions'         , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'TransactTime'              , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoPositions'               , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPositions, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpPositions/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoPositions'               , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'NoPosAmt'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPosAmt, N, T, fun fix_groups:decode_PositionMaintenanceReport_grpPosAmt/2), decode_msg_PositionMaintenanceReport(L, ?MAP_SET(R, 'PositionMaintenanceReport', 'NoPosAmt'                  , G), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'AdjustmentType'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'AdjustmentType'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'ThresholdAmount'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'ThresholdAmount'           , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'Text'                      , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, ?MAP_SET(R, 'PositionMaintenanceReport', 'EncodedText'               , V), I+1, U);
decode_msg_PositionMaintenanceReport              ([{K,V}|T], R, I, U)                                       -> decode_msg_PositionMaintenanceReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_PositionMaintenanceReport              ([H|T], R, I, U) -> decode_msg_PositionMaintenanceReport(T, R, I, [H|U]);
decode_msg_PositionMaintenanceReport              ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_RequestForPositions                    ([{'PosReqID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'PosReqID'                  , V), I+1, U);
decode_msg_RequestForPositions                    ([{'PosReqType'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'PosReqType'                , V), I+1, U);
decode_msg_RequestForPositions                    ([{'MatchStatus'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'MatchStatus'               , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_RequestForPositions                    ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_RequestForPositions_grpPartyIDs/2), decode_msg_RequestForPositions(L, ?MAP_SET(R, 'RequestForPositions', 'NoPartyIDs'                , G), I+1, U);
decode_msg_RequestForPositions                    ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Account'                   , V), I+1, U);
decode_msg_RequestForPositions                    ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'AcctIDSource'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'AccountType'               , V), I+1, U);
decode_msg_RequestForPositions                    ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Symbol'                    , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SymbolSfx'                 , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SecurityID'                , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SecurityIDSource'          , V), I+1, U);
decode_msg_RequestForPositions                    ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_RequestForPositions_grpSecurityAltID/2), decode_msg_RequestForPositions(L, ?MAP_SET(R, 'RequestForPositions', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_RequestForPositions                    ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Product'                   , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CFICode'                   , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SecurityType'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SecuritySubType'           , V), I+1, U);
decode_msg_RequestForPositions                    ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_RequestForPositions                    ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'MaturityDate'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'PutOrCall'                 , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_RequestForPositions                    ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'IssueDate'                 , V), I+1, U);
decode_msg_RequestForPositions                    ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_RequestForPositions                    ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'RepurchaseRate'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Factor'                    , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CreditRating'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'InstrRegistry'             , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CountryOfIssue'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_RequestForPositions                    ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_RequestForPositions                    ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'RedemptionDate'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'StrikePrice'               , V), I+1, U);
decode_msg_RequestForPositions                    ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'StrikeCurrency'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'OptAttribute'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'ContractMultiplier'        , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CouponRate'                , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SecurityExchange'          , V), I+1, U);
decode_msg_RequestForPositions                    ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Issuer'                    , V), I+1, U);
decode_msg_RequestForPositions                    ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_RequestForPositions                    ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'EncodedIssuer'             , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SecurityDesc'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_RequestForPositions                    ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_RequestForPositions                    ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Pool'                      , V), I+1, U);
decode_msg_RequestForPositions                    ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CPProgram'                 , V), I+1, U);
decode_msg_RequestForPositions                    ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'CPRegType'                 , V), I+1, U);
decode_msg_RequestForPositions                    ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_RequestForPositions_grpEvents/2), decode_msg_RequestForPositions(L, ?MAP_SET(R, 'RequestForPositions', 'NoEvents'                  , G), I+1, U);
decode_msg_RequestForPositions                    ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'DatedDate'                 , V), I+1, U);
decode_msg_RequestForPositions                    ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_RequestForPositions                    ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Currency'                  , V), I+1, U);
decode_msg_RequestForPositions                    ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_RequestForPositions_grpLegs/2), decode_msg_RequestForPositions(L, ?MAP_SET(R, 'RequestForPositions', 'NoLegs'                    , G), I+1, U);
decode_msg_RequestForPositions                    ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_RequestForPositions_grpUnderlyings/2), decode_msg_RequestForPositions(L, ?MAP_SET(R, 'RequestForPositions', 'NoUnderlyings'             , G), I+1, U);
decode_msg_RequestForPositions                    ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SettlSessID'               , V), I+1, U);
decode_msg_RequestForPositions                    ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'SettlSessSubID'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'NoTradingSessions'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTradingSessions, N, T, fun fix_groups:decode_RequestForPositions_grpTradingSessions/2), decode_msg_RequestForPositions(L, ?MAP_SET(R, 'RequestForPositions', 'NoTradingSessions'         , G), I+1, U);
decode_msg_RequestForPositions                    ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'TransactTime'              , V), I+1, U);
decode_msg_RequestForPositions                    ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'ResponseTransportType'     , V), I+1, U);
decode_msg_RequestForPositions                    ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'ResponseDestination'       , V), I+1, U);
decode_msg_RequestForPositions                    ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'Text'                      , V), I+1, U);
decode_msg_RequestForPositions                    ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'EncodedTextLen'            , V), I+1, U);
decode_msg_RequestForPositions                    ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositions(T, ?MAP_SET(R, 'RequestForPositions', 'EncodedText'               , V), I+1, U);
decode_msg_RequestForPositions                    ([{K,V}|T], R, I, U)                                       -> decode_msg_RequestForPositions([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_RequestForPositions                    ([H|T], R, I, U) -> decode_msg_RequestForPositions(T, R, I, [H|U]);
decode_msg_RequestForPositions                    ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_RequestForPositionsAck                 ([{'PosMaintRptID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'PosMaintRptID'             , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'PosReqID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'PosReqID'                  , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'TotalNumPosReports'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'TotalNumPosReports'        , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'UnsolicitedIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'UnsolicitedIndicator'      , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'PosReqResult'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'PosReqResult'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'PosReqStatus'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'PosReqStatus'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_RequestForPositionsAck_grpPartyIDs/2), decode_msg_RequestForPositionsAck(L, ?MAP_SET(R, 'RequestForPositionsAck', 'NoPartyIDs'                , G), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Account'                   , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'AcctIDSource'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'AccountType'               , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Symbol'                    , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SymbolSfx'                 , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SecurityID'                , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SecurityIDSource'          , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_RequestForPositionsAck_grpSecurityAltID/2), decode_msg_RequestForPositionsAck(L, ?MAP_SET(R, 'RequestForPositionsAck', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Product'                   , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CFICode'                   , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SecurityType'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SecuritySubType'           , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'MaturityDate'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'PutOrCall'                 , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'IssueDate'                 , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'RepurchaseRate'            , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Factor'                    , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CreditRating'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'InstrRegistry'             , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CountryOfIssue'            , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'RedemptionDate'            , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'StrikePrice'               , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'StrikeCurrency'            , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'OptAttribute'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'ContractMultiplier'        , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CouponRate'                , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SecurityExchange'          , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Issuer'                    , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'EncodedIssuer'             , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'SecurityDesc'              , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Pool'                      , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CPProgram'                 , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'CPRegType'                 , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_RequestForPositionsAck_grpEvents/2), decode_msg_RequestForPositionsAck(L, ?MAP_SET(R, 'RequestForPositionsAck', 'NoEvents'                  , G), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'DatedDate'                 , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Currency'                  , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_RequestForPositionsAck_grpLegs/2), decode_msg_RequestForPositionsAck(L, ?MAP_SET(R, 'RequestForPositionsAck', 'NoLegs'                    , G), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_RequestForPositionsAck_grpUnderlyings/2), decode_msg_RequestForPositionsAck(L, ?MAP_SET(R, 'RequestForPositionsAck', 'NoUnderlyings'             , G), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'ResponseTransportType'     , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'ResponseDestination'       , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'Text'                      , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'EncodedTextLen'            , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, ?MAP_SET(R, 'RequestForPositionsAck', 'EncodedText'               , V), I+1, U);
decode_msg_RequestForPositionsAck                 ([{K,V}|T], R, I, U)                                       -> decode_msg_RequestForPositionsAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_RequestForPositionsAck                 ([H|T], R, I, U) -> decode_msg_RequestForPositionsAck(T, R, I, [H|U]);
decode_msg_RequestForPositionsAck                 ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_PositionReport                         ([{'PosMaintRptID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'PosMaintRptID'             , V), I+1, U);
decode_msg_PositionReport                         ([{'PosReqID'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'PosReqID'                  , V), I+1, U);
decode_msg_PositionReport                         ([{'PosReqType'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'PosReqType'                , V), I+1, U);
decode_msg_PositionReport                         ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_PositionReport                         ([{'TotalNumPosReports'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'TotalNumPosReports'        , V), I+1, U);
decode_msg_PositionReport                         ([{'UnsolicitedIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'UnsolicitedIndicator'      , V), I+1, U);
decode_msg_PositionReport                         ([{'PosReqResult'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'PosReqResult'              , V), I+1, U);
decode_msg_PositionReport                         ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_PositionReport                         ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SettlSessID'               , V), I+1, U);
decode_msg_PositionReport                         ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SettlSessSubID'            , V), I+1, U);
decode_msg_PositionReport                         ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_PositionReport_grpPartyIDs/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_PositionReport                         ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Account'                   , V), I+1, U);
decode_msg_PositionReport                         ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'AcctIDSource'              , V), I+1, U);
decode_msg_PositionReport                         ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'AccountType'               , V), I+1, U);
decode_msg_PositionReport                         ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Symbol'                    , V), I+1, U);
decode_msg_PositionReport                         ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_PositionReport                         ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SecurityID'                , V), I+1, U);
decode_msg_PositionReport                         ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_PositionReport                         ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_PositionReport_grpSecurityAltID/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_PositionReport                         ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Product'                   , V), I+1, U);
decode_msg_PositionReport                         ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CFICode'                   , V), I+1, U);
decode_msg_PositionReport                         ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SecurityType'              , V), I+1, U);
decode_msg_PositionReport                         ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_PositionReport                         ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_PositionReport                         ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'MaturityDate'              , V), I+1, U);
decode_msg_PositionReport                         ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_PositionReport                         ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_PositionReport                         ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'IssueDate'                 , V), I+1, U);
decode_msg_PositionReport                         ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_PositionReport                         ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_PositionReport                         ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_PositionReport                         ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Factor'                    , V), I+1, U);
decode_msg_PositionReport                         ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CreditRating'              , V), I+1, U);
decode_msg_PositionReport                         ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_PositionReport                         ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_PositionReport                         ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_PositionReport                         ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_PositionReport                         ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_PositionReport                         ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'StrikePrice'               , V), I+1, U);
decode_msg_PositionReport                         ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_PositionReport                         ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'OptAttribute'              , V), I+1, U);
decode_msg_PositionReport                         ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_PositionReport                         ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CouponRate'                , V), I+1, U);
decode_msg_PositionReport                         ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_PositionReport                         ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Issuer'                    , V), I+1, U);
decode_msg_PositionReport                         ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_PositionReport                         ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_PositionReport                         ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_PositionReport                         ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_PositionReport                         ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_PositionReport                         ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Pool'                      , V), I+1, U);
decode_msg_PositionReport                         ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_PositionReport                         ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CPProgram'                 , V), I+1, U);
decode_msg_PositionReport                         ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'CPRegType'                 , V), I+1, U);
decode_msg_PositionReport                         ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_PositionReport_grpEvents/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoEvents'                  , G), I+1, U);
decode_msg_PositionReport                         ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'DatedDate'                 , V), I+1, U);
decode_msg_PositionReport                         ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_PositionReport                         ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Currency'                  , V), I+1, U);
decode_msg_PositionReport                         ([{'SettlPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SettlPrice'                , V), I+1, U);
decode_msg_PositionReport                         ([{'SettlPriceType'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'SettlPriceType'            , V), I+1, U);
decode_msg_PositionReport                         ([{'PriorSettlPrice'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'PriorSettlPrice'           , V), I+1, U);
decode_msg_PositionReport                         ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_PositionReport_grpLegs/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoLegs'                    , G), I+1, U);
decode_msg_PositionReport                         ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_PositionReport_grpUnderlyings/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_PositionReport                         ([{'NoPositions'               , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPositions, N, T, fun fix_groups:decode_PositionReport_grpPositions/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoPositions'               , G), I+1, U);
decode_msg_PositionReport                         ([{'NoPosAmt'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPosAmt, N, T, fun fix_groups:decode_PositionReport_grpPosAmt/2), decode_msg_PositionReport(L, ?MAP_SET(R, 'PositionReport', 'NoPosAmt'                  , G), I+1, U);
decode_msg_PositionReport                         ([{'RegistStatus'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'RegistStatus'              , V), I+1, U);
decode_msg_PositionReport                         ([{'DeliveryDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'DeliveryDate'              , V), I+1, U);
decode_msg_PositionReport                         ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'Text'                      , V), I+1, U);
decode_msg_PositionReport                         ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_PositionReport                         ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_PositionReport(T, ?MAP_SET(R, 'PositionReport', 'EncodedText'               , V), I+1, U);
decode_msg_PositionReport                         ([{K,V}|T], R, I, U)                                       -> decode_msg_PositionReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_PositionReport                         ([H|T], R, I, U) -> decode_msg_PositionReport(T, R, I, [H|U]);
decode_msg_PositionReport                         ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TradeCaptureReportRequestAck           ([{'TradeRequestID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'TradeRequestID'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'TradeRequestType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'TradeRequestType'          , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'TotNumTradeReports'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'TotNumTradeReports'        , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'TradeRequestResult'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'TradeRequestResult'        , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'TradeRequestStatus'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'TradeRequestStatus'        , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'Symbol'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SymbolSfx'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SecurityID'                , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SecurityIDSource'          , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_TradeCaptureReportRequestAck_grpSecurityAltID/2), decode_msg_TradeCaptureReportRequestAck(L, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'Product'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CFICode'                   , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SecurityType'              , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SecuritySubType'           , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'MaturityDate'              , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'PutOrCall'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'IssueDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'RepurchaseRate'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'Factor'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CreditRating'              , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'InstrRegistry'             , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CountryOfIssue'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'RedemptionDate'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'StrikePrice'               , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'StrikeCurrency'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'OptAttribute'              , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'ContractMultiplier'        , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CouponRate'                , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SecurityExchange'          , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'Issuer'                    , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'EncodedIssuer'             , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'SecurityDesc'              , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'Pool'                      , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CPProgram'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'CPRegType'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_TradeCaptureReportRequestAck_grpEvents/2), decode_msg_TradeCaptureReportRequestAck(L, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'NoEvents'                  , G), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'DatedDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_TradeCaptureReportRequestAck_grpUnderlyings/2), decode_msg_TradeCaptureReportRequestAck(L, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'NoUnderlyings'             , G), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_TradeCaptureReportRequestAck_grpLegs/2), decode_msg_TradeCaptureReportRequestAck(L, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'NoLegs'                    , G), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'MultiLegReportingType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'MultiLegReportingType'     , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'ResponseTransportType'     , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'ResponseDestination'       , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'Text'                      , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'EncodedTextLen'            , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, ?MAP_SET(R, 'TradeCaptureReportRequestAck', 'EncodedText'               , V), I+1, U);
decode_msg_TradeCaptureReportRequestAck           ([{K,V}|T], R, I, U)                                       -> decode_msg_TradeCaptureReportRequestAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TradeCaptureReportRequestAck           ([H|T], R, I, U) -> decode_msg_TradeCaptureReportRequestAck(T, R, I, [H|U]);
decode_msg_TradeCaptureReportRequestAck           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_TradeCaptureReportAck                  ([{'TradeReportID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TradeReportID'             , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TradeReportTransType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TradeReportTransType'      , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TradeReportType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TradeReportType'           , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TrdType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TrdType'                   , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TrdSubType'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TrdSubType'                , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecondaryTrdType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecondaryTrdType'          , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TransferReason'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TransferReason'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ExecType'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ExecType'                  , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TradeReportRefID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TradeReportRefID'          , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecondaryTradeReportRefID' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecondaryTradeReportRefID' , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TrdRptStatus'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TrdRptStatus'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TradeReportRejectReason'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TradeReportRejectReason'   , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecondaryTradeReportID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecondaryTradeReportID'    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TradeLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TradeLinkID'               , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TrdMatchID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TrdMatchID'                , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ExecID'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ExecID'                    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecondaryExecID'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecondaryExecID'           , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Symbol'                    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SymbolSfx'                 , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecurityID'                , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecurityIDSource'          , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_TradeCaptureReportAck_grpSecurityAltID/2), decode_msg_TradeCaptureReportAck(L, ?MAP_SET(R, 'TradeCaptureReportAck', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Product'                   , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CFICode'                   , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecurityType'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecuritySubType'           , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'MaturityDate'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'PutOrCall'                 , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'IssueDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'RepurchaseRate'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Factor'                    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CreditRating'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'InstrRegistry'             , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CountryOfIssue'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'RedemptionDate'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'StrikePrice'               , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'StrikeCurrency'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'OptAttribute'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ContractMultiplier'        , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CouponRate'                , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecurityExchange'          , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Issuer'                    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'EncodedIssuer'             , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'SecurityDesc'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Pool'                      , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CPProgram'                 , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CPRegType'                 , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_TradeCaptureReportAck_grpEvents/2), decode_msg_TradeCaptureReportAck(L, ?MAP_SET(R, 'TradeCaptureReportAck', 'NoEvents'                  , G), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'DatedDate'                 , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'TransactTime'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_TradeCaptureReportAck_grpTrdRegTimestamps/2), decode_msg_TradeCaptureReportAck(L, ?MAP_SET(R, 'TradeCaptureReportAck', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ResponseTransportType'     , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ResponseDestination'       , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Text'                      , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'EncodedTextLen'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'EncodedText'               , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_TradeCaptureReportAck_grpLegs/2), decode_msg_TradeCaptureReportAck(L, ?MAP_SET(R, 'TradeCaptureReportAck', 'NoLegs'                    , G), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'ClearingFeeIndicator'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'ClearingFeeIndicator'      , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'OrderCapacity'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'OrderCapacity'             , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'OrderRestrictions'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'OrderRestrictions'         , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'CustOrderCapacity'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'CustOrderCapacity'         , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'Account'                   , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'AcctIDSource'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'AcctIDSource'              , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'AccountType'               , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'PositionEffect'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'PreallocMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, ?MAP_SET(R, 'TradeCaptureReportAck', 'PreallocMethod'            , V), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_TradeCaptureReportAck_grpAllocs/2), decode_msg_TradeCaptureReportAck(L, ?MAP_SET(R, 'TradeCaptureReportAck', 'NoAllocs'                  , G), I+1, U);
decode_msg_TradeCaptureReportAck                  ([{K,V}|T], R, I, U)                                       -> decode_msg_TradeCaptureReportAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_TradeCaptureReportAck                  ([H|T], R, I, U) -> decode_msg_TradeCaptureReportAck(T, R, I, [H|U]);
decode_msg_TradeCaptureReportAck                  ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_AllocationReport                       ([{'AllocReportID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocReportID'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocID'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocTransType'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocTransType'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocReportRefID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocReportRefID'          , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocCancReplaceReason'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocCancReplaceReason'    , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecondaryAllocID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecondaryAllocID'          , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocReportType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocReportType'           , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocStatus'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocStatus'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocRejCode'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocRejCode'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'RefAllocID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'RefAllocID'                , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocIntermedReqType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocIntermedReqType'      , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocLinkID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocLinkID'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocLinkType'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocLinkType'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'BookingRefID'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BookingRefID'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'AllocNoOrdersType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AllocNoOrdersType'         , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoOrders'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpOrders, N, T, fun fix_groups:decode_AllocationReport_grpOrders/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoOrders'                  , G), I+1, U);
decode_msg_AllocationReport                       ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_AllocationReport_grpExecs/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoExecs'                   , G), I+1, U);
decode_msg_AllocationReport                       ([{'PreviouslyReported'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'PreviouslyReported'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'ReversalIndicator'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'ReversalIndicator'         , V), I+1, U);
decode_msg_AllocationReport                       ([{'MatchType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'MatchType'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Side'                      , V), I+1, U);
decode_msg_AllocationReport                       ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Symbol'                    , V), I+1, U);
decode_msg_AllocationReport                       ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecurityID'                , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_AllocationReport_grpSecurityAltID/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_AllocationReport                       ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Product'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CFICode'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecurityType'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_AllocationReport                       ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_AllocationReport                       ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'MaturityDate'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_AllocationReport                       ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'IssueDate'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_AllocationReport                       ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Factor'                    , V), I+1, U);
decode_msg_AllocationReport                       ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CreditRating'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_AllocationReport                       ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'StrikePrice'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'OptAttribute'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CouponRate'                , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_AllocationReport                       ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Issuer'                    , V), I+1, U);
decode_msg_AllocationReport                       ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_AllocationReport                       ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_AllocationReport                       ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Pool'                      , V), I+1, U);
decode_msg_AllocationReport                       ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CPProgram'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'CPRegType'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_AllocationReport_grpEvents/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoEvents'                  , G), I+1, U);
decode_msg_AllocationReport                       ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'DatedDate'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'DeliveryForm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'DeliveryForm'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'PctAtRisk'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'PctAtRisk'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoInstrAttrib'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpInstrAttrib, N, T, fun fix_groups:decode_AllocationReport_grpInstrAttrib/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoInstrAttrib'             , G), I+1, U);
decode_msg_AllocationReport                       ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AgreementDesc'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AgreementID'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AgreementDate'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AgreementCurrency'         , V), I+1, U);
decode_msg_AllocationReport                       ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TerminationType'           , V), I+1, U);
decode_msg_AllocationReport                       ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'StartDate'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EndDate'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'DeliveryType'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'MarginRatio'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_AllocationReport_grpUnderlyings/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_AllocationReport                       ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_AllocationReport_grpLegs/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoLegs'                    , G), I+1, U);
decode_msg_AllocationReport                       ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Quantity'                  , V), I+1, U);
decode_msg_AllocationReport                       ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'QtyType'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'LastMkt'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'LastMkt'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'TradeOriginationDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TradeOriginationDate'      , V), I+1, U);
decode_msg_AllocationReport                       ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TradingSessionID'          , V), I+1, U);
decode_msg_AllocationReport                       ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'PriceType'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'AvgPx'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AvgPx'                     , V), I+1, U);
decode_msg_AllocationReport                       ([{'AvgParPx'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AvgParPx'                  , V), I+1, U);
decode_msg_AllocationReport                       ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Spread'                    , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_AllocationReport                       ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Currency'                  , V), I+1, U);
decode_msg_AllocationReport                       ([{'AvgPxPrecision'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AvgPxPrecision'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_AllocationReport_grpPartyIDs/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_AllocationReport                       ([{'TradeDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TradeDate'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TransactTime'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'SettlType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SettlType'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'SettlDate'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'BookingType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'BookingType'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'GrossTradeAmt'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'GrossTradeAmt'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'Concession'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Concession'                , V), I+1, U);
decode_msg_AllocationReport                       ([{'TotalTakedown'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TotalTakedown'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'NetMoney'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'NetMoney'                  , V), I+1, U);
decode_msg_AllocationReport                       ([{'PositionEffect'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'PositionEffect'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'AutoAcceptIndicator'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AutoAcceptIndicator'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Text'                      , V), I+1, U);
decode_msg_AllocationReport                       ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_AllocationReport                       ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EncodedText'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'NumDaysInterest'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'NumDaysInterest'           , V), I+1, U);
decode_msg_AllocationReport                       ([{'AccruedInterestRate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AccruedInterestRate'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'TotalAccruedInterestAmt'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TotalAccruedInterestAmt'   , V), I+1, U);
decode_msg_AllocationReport                       ([{'InterestAtMaturity'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'InterestAtMaturity'        , V), I+1, U);
decode_msg_AllocationReport                       ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_AllocationReport                       ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'StartCash'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'EndCash'                   , V), I+1, U);
decode_msg_AllocationReport                       ([{'LegalConfirm'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'LegalConfirm'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_AllocationReport_grpStipulations/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoStipulations'            , G), I+1, U);
decode_msg_AllocationReport                       ([{'YieldType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'YieldType'                 , V), I+1, U);
decode_msg_AllocationReport                       ([{'Yield'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'Yield'                     , V), I+1, U);
decode_msg_AllocationReport                       ([{'YieldCalcDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'YieldCalcDate'             , V), I+1, U);
decode_msg_AllocationReport                       ([{'YieldRedemptionDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'YieldRedemptionDate'       , V), I+1, U);
decode_msg_AllocationReport                       ([{'YieldRedemptionPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'YieldRedemptionPrice'      , V), I+1, U);
decode_msg_AllocationReport                       ([{'YieldRedemptionPriceType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'YieldRedemptionPriceType'  , V), I+1, U);
decode_msg_AllocationReport                       ([{'TotNoAllocs'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'TotNoAllocs'               , V), I+1, U);
decode_msg_AllocationReport                       ([{'LastFragment'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReport(T, ?MAP_SET(R, 'AllocationReport', 'LastFragment'              , V), I+1, U);
decode_msg_AllocationReport                       ([{'NoAllocs'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_AllocationReport_grpAllocs/2), decode_msg_AllocationReport(L, ?MAP_SET(R, 'AllocationReport', 'NoAllocs'                  , G), I+1, U);
decode_msg_AllocationReport                       ([{K,V}|T], R, I, U)                                       -> decode_msg_AllocationReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_AllocationReport                       ([H|T], R, I, U) -> decode_msg_AllocationReport(T, R, I, [H|U]);
decode_msg_AllocationReport                       ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_AllocationReportAck                    ([{'AllocReportID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'AllocReportID'       , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'AllocID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'AllocID'             , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'NoPartyIDs'          , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_AllocationReportAck_grpPartyIDs/2), decode_msg_AllocationReportAck(L, ?MAP_SET(R, 'AllocationReportAck', 'NoPartyIDs'          , G), I+1, U);
decode_msg_AllocationReportAck                    ([{'SecondaryAllocID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'SecondaryAllocID'    , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'TradeDate'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'TradeDate'           , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'TransactTime'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'TransactTime'        , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'AllocStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'AllocStatus'         , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'AllocRejCode'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'AllocRejCode'        , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'AllocReportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'AllocReportType'     , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'AllocIntermedReqType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'AllocIntermedReqType', V), I+1, U);
decode_msg_AllocationReportAck                    ([{'MatchStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'MatchStatus'         , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'Product'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'Product'             , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'SecurityType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'SecurityType'        , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'Text'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'Text'                , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'EncodedTextLen'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'EncodedTextLen'      , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'EncodedText'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AllocationReportAck(T, ?MAP_SET(R, 'AllocationReportAck', 'EncodedText'         , V), I+1, U);
decode_msg_AllocationReportAck                    ([{'NoAllocs'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpAllocs, N, T, fun fix_groups:decode_AllocationReportAck_grpAllocs/2), decode_msg_AllocationReportAck(L, ?MAP_SET(R, 'AllocationReportAck', 'NoAllocs'            , G), I+1, U);
decode_msg_AllocationReportAck                    ([{K,V}|T], R, I, U)                                 -> decode_msg_AllocationReportAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_AllocationReportAck                    ([H|T], R, I, U) -> decode_msg_AllocationReportAck(T, R, I, [H|U]);
decode_msg_AllocationReportAck                    ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ConfirmationAck                        ([{'ConfirmID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'ConfirmID'       , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'TradeDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'TradeDate'       , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'TransactTime'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'TransactTime'    , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'AffirmStatus'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'AffirmStatus'    , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'ConfirmRejReason', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'ConfirmRejReason', V), I+1, U);
decode_msg_ConfirmationAck                        ([{'MatchStatus'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'MatchStatus'     , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'Text'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'Text'            , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'EncodedTextLen'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'EncodedTextLen'  , V), I+1, U);
decode_msg_ConfirmationAck                        ([{'EncodedText'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationAck(T, ?MAP_SET(R, 'ConfirmationAck', 'EncodedText'     , V), I+1, U);
decode_msg_ConfirmationAck                        ([{K,V}|T], R, I, U)                             -> decode_msg_ConfirmationAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ConfirmationAck                        ([H|T], R, I, U) -> decode_msg_ConfirmationAck(T, R, I, [H|U]);
decode_msg_ConfirmationAck                        ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_SettlementInstructionRequest           ([{'SettlInstReqID'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'SettlInstReqID'   , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'TransactTime'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'TransactTime'     , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'NoPartyIDs'       , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_SettlementInstructionRequest_grpPartyIDs/2), decode_msg_SettlementInstructionRequest(L, ?MAP_SET(R, 'SettlementInstructionRequest', 'NoPartyIDs'       , G), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'AllocAccount'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'AllocAccount'     , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'AllocAcctIDSource', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'AllocAcctIDSource', V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'Side'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'Side'             , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'Product'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'Product'          , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'SecurityType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'SecurityType'     , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'CFICode'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'CFICode'          , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'EffectiveTime'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'EffectiveTime'    , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'ExpireTime'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'ExpireTime'       , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'LastUpdateTime'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'LastUpdateTime'   , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'StandInstDbType'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'StandInstDbType'  , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'StandInstDbName'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'StandInstDbName'  , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{'StandInstDbID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, ?MAP_SET(R, 'SettlementInstructionRequest', 'StandInstDbID'    , V), I+1, U);
decode_msg_SettlementInstructionRequest           ([{K,V}|T], R, I, U)                              -> decode_msg_SettlementInstructionRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_SettlementInstructionRequest           ([H|T], R, I, U) -> decode_msg_SettlementInstructionRequest(T, R, I, [H|U]);
decode_msg_SettlementInstructionRequest           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_AssignmentReport                       ([{'AsgnRptID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'AsgnRptID'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'TotNumAssignmentReports'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'TotNumAssignmentReports'   , V), I+1, U);
decode_msg_AssignmentReport                       ([{'LastRptRequested'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'LastRptRequested'          , V), I+1, U);
decode_msg_AssignmentReport                       ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_AssignmentReport_grpPartyIDs/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_AssignmentReport                       ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Account'                   , V), I+1, U);
decode_msg_AssignmentReport                       ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'AccountType'               , V), I+1, U);
decode_msg_AssignmentReport                       ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Symbol'                    , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SecurityID'                , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_AssignmentReport                       ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_AssignmentReport_grpSecurityAltID/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_AssignmentReport                       ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Product'                   , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CFICode'                   , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SecurityType'              , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_AssignmentReport                       ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_AssignmentReport                       ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'MaturityDate'              , V), I+1, U);
decode_msg_AssignmentReport                       ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_AssignmentReport                       ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'IssueDate'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_AssignmentReport                       ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Factor'                    , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CreditRating'              , V), I+1, U);
decode_msg_AssignmentReport                       ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_AssignmentReport                       ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_AssignmentReport                       ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'StrikePrice'               , V), I+1, U);
decode_msg_AssignmentReport                       ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'OptAttribute'              , V), I+1, U);
decode_msg_AssignmentReport                       ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CouponRate'                , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_AssignmentReport                       ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Issuer'                    , V), I+1, U);
decode_msg_AssignmentReport                       ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_AssignmentReport                       ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_AssignmentReport                       ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_AssignmentReport                       ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_AssignmentReport                       ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Pool'                      , V), I+1, U);
decode_msg_AssignmentReport                       ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CPProgram'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'CPRegType'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_AssignmentReport_grpEvents/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoEvents'                  , G), I+1, U);
decode_msg_AssignmentReport                       ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'DatedDate'                 , V), I+1, U);
decode_msg_AssignmentReport                       ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_AssignmentReport                       ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Currency'                  , V), I+1, U);
decode_msg_AssignmentReport                       ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_AssignmentReport_grpLegs/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoLegs'                    , G), I+1, U);
decode_msg_AssignmentReport                       ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_AssignmentReport_grpUnderlyings/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_AssignmentReport                       ([{'NoPositions'               , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPositions, N, T, fun fix_groups:decode_AssignmentReport_grpPositions/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoPositions'               , G), I+1, U);
decode_msg_AssignmentReport                       ([{'NoPosAmt'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPosAmt, N, T, fun fix_groups:decode_AssignmentReport_grpPosAmt/2), decode_msg_AssignmentReport(L, ?MAP_SET(R, 'AssignmentReport', 'NoPosAmt'                  , G), I+1, U);
decode_msg_AssignmentReport                       ([{'ThresholdAmount'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'ThresholdAmount'           , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SettlPrice'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SettlPrice'                , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SettlPriceType'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SettlPriceType'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'UnderlyingSettlPrice'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'UnderlyingSettlPrice'      , V), I+1, U);
decode_msg_AssignmentReport                       ([{'ExpireDate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'ExpireDate'                , V), I+1, U);
decode_msg_AssignmentReport                       ([{'AssignmentMethod'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'AssignmentMethod'          , V), I+1, U);
decode_msg_AssignmentReport                       ([{'AssignmentUnit'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'AssignmentUnit'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'OpenInterest'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'OpenInterest'              , V), I+1, U);
decode_msg_AssignmentReport                       ([{'ExerciseMethod'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'ExerciseMethod'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SettlSessID'               , V), I+1, U);
decode_msg_AssignmentReport                       ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'SettlSessSubID'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_AssignmentReport                       ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'Text'                      , V), I+1, U);
decode_msg_AssignmentReport                       ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_AssignmentReport                       ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_AssignmentReport(T, ?MAP_SET(R, 'AssignmentReport', 'EncodedText'               , V), I+1, U);
decode_msg_AssignmentReport                       ([{K,V}|T], R, I, U)                                       -> decode_msg_AssignmentReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_AssignmentReport                       ([H|T], R, I, U) -> decode_msg_AssignmentReport(T, R, I, [H|U]);
decode_msg_AssignmentReport                       ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CollateralRequest                      ([{'CollReqID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CollReqID'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CollAsgnReason'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CollAsgnReason'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'TransactTime'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'ExpireTime'                , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_CollateralRequest_grpPartyIDs/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoPartyIDs'                , G), I+1, U);
decode_msg_CollateralRequest                      ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Account'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'AccountType'               , V), I+1, U);
decode_msg_CollateralRequest                      ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'ClOrdID'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'OrderID'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_CollateralRequest_grpExecs/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoExecs'                   , G), I+1, U);
decode_msg_CollateralRequest                      ([{'NoTrades'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrades, N, T, fun fix_groups:decode_CollateralRequest_grpTrades/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoTrades'                  , G), I+1, U);
decode_msg_CollateralRequest                      ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Symbol'                    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecurityID'                , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CollateralRequest_grpSecurityAltID/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CollateralRequest                      ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Product'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CFICode'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecurityType'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecuritySubType'           , V), I+1, U);
decode_msg_CollateralRequest                      ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CollateralRequest                      ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'MaturityDate'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'PutOrCall'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CollateralRequest                      ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'IssueDate'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CollateralRequest                      ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Factor'                    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CreditRating'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'InstrRegistry'             , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CollateralRequest                      ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'RedemptionDate'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'StrikePrice'               , V), I+1, U);
decode_msg_CollateralRequest                      ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'OptAttribute'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CouponRate'                , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecurityExchange'          , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Issuer'                    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SecurityDesc'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Pool'                      , V), I+1, U);
decode_msg_CollateralRequest                      ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CPProgram'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CPRegType'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CollateralRequest_grpEvents/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoEvents'                  , G), I+1, U);
decode_msg_CollateralRequest                      ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'DatedDate'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CollateralRequest                      ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'AgreementDesc'             , V), I+1, U);
decode_msg_CollateralRequest                      ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'AgreementID'               , V), I+1, U);
decode_msg_CollateralRequest                      ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'AgreementDate'             , V), I+1, U);
decode_msg_CollateralRequest                      ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'AgreementCurrency'         , V), I+1, U);
decode_msg_CollateralRequest                      ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'TerminationType'           , V), I+1, U);
decode_msg_CollateralRequest                      ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'StartDate'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EndDate'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'DeliveryType'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'MarginRatio'               , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SettlDate'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Quantity'                  , V), I+1, U);
decode_msg_CollateralRequest                      ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'QtyType'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Currency'                  , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CollateralRequest_grpLegs/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoLegs'                    , G), I+1, U);
decode_msg_CollateralRequest                      ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CollateralRequest_grpUnderlyings/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CollateralRequest                      ([{'MarginExcess'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'MarginExcess'              , V), I+1, U);
decode_msg_CollateralRequest                      ([{'TotalNetValue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'TotalNetValue'             , V), I+1, U);
decode_msg_CollateralRequest                      ([{'CashOutstanding'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'CashOutstanding'           , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_CollateralRequest_grpTrdRegTimestamps/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_CollateralRequest                      ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Side'                      , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoMiscFees'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMiscFees, N, T, fun fix_groups:decode_CollateralRequest_grpMiscFees/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoMiscFees'                , G), I+1, U);
decode_msg_CollateralRequest                      ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Price'                     , V), I+1, U);
decode_msg_CollateralRequest                      ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'PriceType'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_CollateralRequest                      ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'StartCash'                 , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EndCash'                   , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Spread'                    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_CollateralRequest                      ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_CollateralRequest                      ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_CollateralRequest_grpStipulations/2), decode_msg_CollateralRequest(L, ?MAP_SET(R, 'CollateralRequest', 'NoStipulations'            , G), I+1, U);
decode_msg_CollateralRequest                      ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'TradingSessionID'          , V), I+1, U);
decode_msg_CollateralRequest                      ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SettlSessID'               , V), I+1, U);
decode_msg_CollateralRequest                      ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'SettlSessSubID'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_CollateralRequest                      ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'Text'                      , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EncodedTextLen'            , V), I+1, U);
decode_msg_CollateralRequest                      ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralRequest(T, ?MAP_SET(R, 'CollateralRequest', 'EncodedText'               , V), I+1, U);
decode_msg_CollateralRequest                      ([{K,V}|T], R, I, U)                                       -> decode_msg_CollateralRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CollateralRequest                      ([H|T], R, I, U) -> decode_msg_CollateralRequest(T, R, I, [H|U]);
decode_msg_CollateralRequest                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CollateralAssignment                   ([{'CollAsgnID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CollAsgnID'                , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CollReqID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CollReqID'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CollAsgnReason'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CollAsgnReason'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CollAsgnTransType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CollAsgnTransType'         , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CollAsgnRefID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CollAsgnRefID'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'TransactTime'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'ExpireTime'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'ExpireTime'                , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_CollateralAssignment_grpPartyIDs/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoPartyIDs'                , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Account'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'AccountType'               , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'ClOrdID'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'OrderID'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_CollateralAssignment_grpExecs/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoExecs'                   , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoTrades'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrades, N, T, fun fix_groups:decode_CollateralAssignment_grpTrades/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoTrades'                  , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Symbol'                    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecurityID'                , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CollateralAssignment_grpSecurityAltID/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Product'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CFICode'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecurityType'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecuritySubType'           , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'MaturityDate'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'PutOrCall'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'IssueDate'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CollateralAssignment                   ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Factor'                    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CreditRating'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'InstrRegistry'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'RedemptionDate'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StrikePrice'               , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'OptAttribute'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CouponRate'                , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecurityExchange'          , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Issuer'                    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SecurityDesc'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Pool'                      , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CPProgram'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CPRegType'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CollateralAssignment_grpEvents/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoEvents'                  , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'DatedDate'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'AgreementDesc'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'AgreementID'               , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'AgreementDate'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'AgreementCurrency'         , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'TerminationType'           , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StartDate'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EndDate'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'DeliveryType'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'MarginRatio'               , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SettlDate'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Quantity'                  , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'QtyType'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Currency'                  , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CollateralAssignment_grpLegs/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoLegs'                    , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CollateralAssignment_grpUnderlyings/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'MarginExcess'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'MarginExcess'              , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'TotalNetValue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'TotalNetValue'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'CashOutstanding'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'CashOutstanding'           , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_CollateralAssignment_grpTrdRegTimestamps/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Side'                      , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoMiscFees'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMiscFees, N, T, fun fix_groups:decode_CollateralAssignment_grpMiscFees/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoMiscFees'                , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Price'                     , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'PriceType'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StartCash'                 , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EndCash'                   , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Spread'                    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_CollateralAssignment_grpStipulations/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoStipulations'            , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'SettlDeliveryType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SettlDeliveryType'         , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StandInstDbType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StandInstDbType'           , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StandInstDbName'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StandInstDbName'           , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'StandInstDbID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'StandInstDbID'             , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'NoDlvyInst'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpDlvyInst, N, T, fun fix_groups:decode_CollateralAssignment_grpDlvyInst/2), decode_msg_CollateralAssignment(L, ?MAP_SET(R, 'CollateralAssignment', 'NoDlvyInst'                , G), I+1, U);
decode_msg_CollateralAssignment                   ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'TradingSessionID'          , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SettlSessID'               , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'SettlSessSubID'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'Text'                      , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EncodedTextLen'            , V), I+1, U);
decode_msg_CollateralAssignment                   ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralAssignment(T, ?MAP_SET(R, 'CollateralAssignment', 'EncodedText'               , V), I+1, U);
decode_msg_CollateralAssignment                   ([{K,V}|T], R, I, U)                                       -> decode_msg_CollateralAssignment([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CollateralAssignment                   ([H|T], R, I, U) -> decode_msg_CollateralAssignment(T, R, I, [H|U]);
decode_msg_CollateralAssignment                   ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CollateralResponse                     ([{'CollRespID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollRespID'                , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CollAsgnID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollAsgnID'                , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CollReqID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollReqID'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CollAsgnReason'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollAsgnReason'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CollAsgnTransType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollAsgnTransType'         , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CollAsgnRespType'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollAsgnRespType'          , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CollAsgnRejectReason'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CollAsgnRejectReason'      , V), I+1, U);
decode_msg_CollateralResponse                     ([{'TransactTime'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'TransactTime'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_CollateralResponse_grpPartyIDs/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoPartyIDs'                , G), I+1, U);
decode_msg_CollateralResponse                     ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Account'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'AccountType'               , V), I+1, U);
decode_msg_CollateralResponse                     ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'ClOrdID'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'OrderID'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_CollateralResponse_grpExecs/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoExecs'                   , G), I+1, U);
decode_msg_CollateralResponse                     ([{'NoTrades'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrades, N, T, fun fix_groups:decode_CollateralResponse_grpTrades/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoTrades'                  , G), I+1, U);
decode_msg_CollateralResponse                     ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Symbol'                    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecurityID'                , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CollateralResponse_grpSecurityAltID/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CollateralResponse                     ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Product'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CFICode'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecurityType'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecuritySubType'           , V), I+1, U);
decode_msg_CollateralResponse                     ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CollateralResponse                     ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'MaturityDate'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'PutOrCall'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CollateralResponse                     ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'IssueDate'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CollateralResponse                     ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Factor'                    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CreditRating'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'InstrRegistry'             , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CollateralResponse                     ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'RedemptionDate'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'StrikePrice'               , V), I+1, U);
decode_msg_CollateralResponse                     ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'OptAttribute'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CouponRate'                , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecurityExchange'          , V), I+1, U);
decode_msg_CollateralResponse                     ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Issuer'                    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SecurityDesc'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CollateralResponse                     ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Pool'                      , V), I+1, U);
decode_msg_CollateralResponse                     ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CPProgram'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CPRegType'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CollateralResponse_grpEvents/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoEvents'                  , G), I+1, U);
decode_msg_CollateralResponse                     ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'DatedDate'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CollateralResponse                     ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'AgreementDesc'             , V), I+1, U);
decode_msg_CollateralResponse                     ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'AgreementID'               , V), I+1, U);
decode_msg_CollateralResponse                     ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'AgreementDate'             , V), I+1, U);
decode_msg_CollateralResponse                     ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'AgreementCurrency'         , V), I+1, U);
decode_msg_CollateralResponse                     ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'TerminationType'           , V), I+1, U);
decode_msg_CollateralResponse                     ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'StartDate'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EndDate'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'DeliveryType'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'MarginRatio'               , V), I+1, U);
decode_msg_CollateralResponse                     ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'SettlDate'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Quantity'                  , V), I+1, U);
decode_msg_CollateralResponse                     ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'QtyType'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Currency'                  , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CollateralResponse_grpLegs/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoLegs'                    , G), I+1, U);
decode_msg_CollateralResponse                     ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CollateralResponse_grpUnderlyings/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CollateralResponse                     ([{'MarginExcess'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'MarginExcess'              , V), I+1, U);
decode_msg_CollateralResponse                     ([{'TotalNetValue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'TotalNetValue'             , V), I+1, U);
decode_msg_CollateralResponse                     ([{'CashOutstanding'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'CashOutstanding'           , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_CollateralResponse_grpTrdRegTimestamps/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_CollateralResponse                     ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Side'                      , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoMiscFees'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMiscFees, N, T, fun fix_groups:decode_CollateralResponse_grpMiscFees/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoMiscFees'                , G), I+1, U);
decode_msg_CollateralResponse                     ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Price'                     , V), I+1, U);
decode_msg_CollateralResponse                     ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'PriceType'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_CollateralResponse                     ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'StartCash'                 , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EndCash'                   , V), I+1, U);
decode_msg_CollateralResponse                     ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Spread'                    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_CollateralResponse                     ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_CollateralResponse                     ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_CollateralResponse_grpStipulations/2), decode_msg_CollateralResponse(L, ?MAP_SET(R, 'CollateralResponse', 'NoStipulations'            , G), I+1, U);
decode_msg_CollateralResponse                     ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'Text'                      , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EncodedTextLen'            , V), I+1, U);
decode_msg_CollateralResponse                     ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralResponse(T, ?MAP_SET(R, 'CollateralResponse', 'EncodedText'               , V), I+1, U);
decode_msg_CollateralResponse                     ([{K,V}|T], R, I, U)                                       -> decode_msg_CollateralResponse([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CollateralResponse                     ([H|T], R, I, U) -> decode_msg_CollateralResponse(T, R, I, [H|U]);
decode_msg_CollateralResponse                     ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CollateralReport                       ([{'CollRptID'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CollRptID'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'CollInquiryID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CollInquiryID'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'CollStatus'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CollStatus'                , V), I+1, U);
decode_msg_CollateralReport                       ([{'TotNumReports'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'TotNumReports'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'LastRptRequested'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'LastRptRequested'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_CollateralReport_grpPartyIDs/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoPartyIDs'                , G), I+1, U);
decode_msg_CollateralReport                       ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Account'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'AccountType'               , V), I+1, U);
decode_msg_CollateralReport                       ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'ClOrdID'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'OrderID'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_CollateralReport_grpExecs/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoExecs'                   , G), I+1, U);
decode_msg_CollateralReport                       ([{'NoTrades'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrades, N, T, fun fix_groups:decode_CollateralReport_grpTrades/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoTrades'                  , G), I+1, U);
decode_msg_CollateralReport                       ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Symbol'                    , V), I+1, U);
decode_msg_CollateralReport                       ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecurityID'                , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CollateralReport_grpSecurityAltID/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CollateralReport                       ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Product'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CFICode'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecurityType'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecuritySubType'           , V), I+1, U);
decode_msg_CollateralReport                       ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CollateralReport                       ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'MaturityDate'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'PutOrCall'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CollateralReport                       ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'IssueDate'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CollateralReport                       ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Factor'                    , V), I+1, U);
decode_msg_CollateralReport                       ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CreditRating'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'InstrRegistry'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CollateralReport                       ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'RedemptionDate'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StrikePrice'               , V), I+1, U);
decode_msg_CollateralReport                       ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'OptAttribute'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CollateralReport                       ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CouponRate'                , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecurityExchange'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Issuer'                    , V), I+1, U);
decode_msg_CollateralReport                       ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SecurityDesc'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CollateralReport                       ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CollateralReport                       ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Pool'                      , V), I+1, U);
decode_msg_CollateralReport                       ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CollateralReport                       ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CPProgram'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CPRegType'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CollateralReport_grpEvents/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoEvents'                  , G), I+1, U);
decode_msg_CollateralReport                       ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'DatedDate'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CollateralReport                       ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'AgreementDesc'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'AgreementID'               , V), I+1, U);
decode_msg_CollateralReport                       ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'AgreementDate'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'AgreementCurrency'         , V), I+1, U);
decode_msg_CollateralReport                       ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'TerminationType'           , V), I+1, U);
decode_msg_CollateralReport                       ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StartDate'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EndDate'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'DeliveryType'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'MarginRatio'               , V), I+1, U);
decode_msg_CollateralReport                       ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SettlDate'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Quantity'                  , V), I+1, U);
decode_msg_CollateralReport                       ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'QtyType'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Currency'                  , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CollateralReport_grpLegs/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoLegs'                    , G), I+1, U);
decode_msg_CollateralReport                       ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CollateralReport_grpUnderlyings/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CollateralReport                       ([{'MarginExcess'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'MarginExcess'              , V), I+1, U);
decode_msg_CollateralReport                       ([{'TotalNetValue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'TotalNetValue'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'CashOutstanding'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'CashOutstanding'           , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_CollateralReport_grpTrdRegTimestamps/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_CollateralReport                       ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Side'                      , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoMiscFees'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpMiscFees, N, T, fun fix_groups:decode_CollateralReport_grpMiscFees/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoMiscFees'                , G), I+1, U);
decode_msg_CollateralReport                       ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Price'                     , V), I+1, U);
decode_msg_CollateralReport                       ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'PriceType'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_CollateralReport                       ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_CollateralReport                       ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StartCash'                 , V), I+1, U);
decode_msg_CollateralReport                       ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EndCash'                   , V), I+1, U);
decode_msg_CollateralReport                       ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Spread'                    , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_CollateralReport                       ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_CollateralReport_grpStipulations/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoStipulations'            , G), I+1, U);
decode_msg_CollateralReport                       ([{'SettlDeliveryType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SettlDeliveryType'         , V), I+1, U);
decode_msg_CollateralReport                       ([{'StandInstDbType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StandInstDbType'           , V), I+1, U);
decode_msg_CollateralReport                       ([{'StandInstDbName'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StandInstDbName'           , V), I+1, U);
decode_msg_CollateralReport                       ([{'StandInstDbID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'StandInstDbID'             , V), I+1, U);
decode_msg_CollateralReport                       ([{'NoDlvyInst'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpDlvyInst, N, T, fun fix_groups:decode_CollateralReport_grpDlvyInst/2), decode_msg_CollateralReport(L, ?MAP_SET(R, 'CollateralReport', 'NoDlvyInst'                , G), I+1, U);
decode_msg_CollateralReport                       ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'TradingSessionID'          , V), I+1, U);
decode_msg_CollateralReport                       ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_CollateralReport                       ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SettlSessID'               , V), I+1, U);
decode_msg_CollateralReport                       ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'SettlSessSubID'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_CollateralReport                       ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'Text'                      , V), I+1, U);
decode_msg_CollateralReport                       ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EncodedTextLen'            , V), I+1, U);
decode_msg_CollateralReport                       ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralReport(T, ?MAP_SET(R, 'CollateralReport', 'EncodedText'               , V), I+1, U);
decode_msg_CollateralReport                       ([{K,V}|T], R, I, U)                                       -> decode_msg_CollateralReport([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CollateralReport                       ([H|T], R, I, U) -> decode_msg_CollateralReport(T, R, I, [H|U]);
decode_msg_CollateralReport                       ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CollateralInquiry                      ([{'CollInquiryID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CollInquiryID'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoCollInquiryQualifier'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpCollInquiryQualifier, N, T, fun fix_groups:decode_CollateralInquiry_grpCollInquiryQualifier/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoCollInquiryQualifier'    , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'SubscriptionRequestType'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SubscriptionRequestType'   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'ResponseTransportType'     , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'ResponseDestination'       , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_CollateralInquiry_grpPartyIDs/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoPartyIDs'                , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Account'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'AccountType'               , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'ClOrdID'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'OrderID'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_CollateralInquiry_grpExecs/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoExecs'                   , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoTrades'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrades, N, T, fun fix_groups:decode_CollateralInquiry_grpTrades/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoTrades'                  , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Symbol'                    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecurityID'                , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CollateralInquiry_grpSecurityAltID/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Product'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CFICode'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecurityType'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecuritySubType'           , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'MaturityDate'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'PutOrCall'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'IssueDate'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CollateralInquiry                      ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Factor'                    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CreditRating'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'InstrRegistry'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'RedemptionDate'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StrikePrice'               , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'OptAttribute'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CouponRate'                , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecurityExchange'          , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Issuer'                    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SecurityDesc'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Pool'                      , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CPProgram'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CPRegType'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CollateralInquiry_grpEvents/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoEvents'                  , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'DatedDate'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'AgreementDesc'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'AgreementID'               , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'AgreementDate'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'AgreementCurrency'         , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'TerminationType'           , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StartDate'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EndDate'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'DeliveryType'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'MarginRatio'               , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SettlDate'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Quantity'                  , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'QtyType'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Currency'                  , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CollateralInquiry_grpLegs/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoLegs'                    , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CollateralInquiry_grpUnderlyings/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'MarginExcess'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'MarginExcess'              , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'TotalNetValue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'TotalNetValue'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'CashOutstanding'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'CashOutstanding'           , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoTrdRegTimestamps'        , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrdRegTimestamps, N, T, fun fix_groups:decode_CollateralInquiry_grpTrdRegTimestamps/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoTrdRegTimestamps'        , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'Side'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Side'                      , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Price'                     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Price'                     , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'PriceType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'PriceType'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'AccruedInterestAmt'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'AccruedInterestAmt'        , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EndAccruedInterestAmt'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EndAccruedInterestAmt'     , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StartCash'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StartCash'                 , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EndCash'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EndCash'                   , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Spread'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Spread'                    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkCurveCurrency'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkCurveCurrency'    , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkCurveName'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkCurveName'        , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkCurvePoint'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkCurvePoint'       , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkPrice'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkPrice'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkPriceType'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkPriceType'        , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkSecurityID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkSecurityID'       , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'BenchmarkSecurityIDSource' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'BenchmarkSecurityIDSource' , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoStipulations'            , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpStipulations, N, T, fun fix_groups:decode_CollateralInquiry_grpStipulations/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoStipulations'            , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'SettlDeliveryType'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SettlDeliveryType'         , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StandInstDbType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StandInstDbType'           , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StandInstDbName'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StandInstDbName'           , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'StandInstDbID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'StandInstDbID'             , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'NoDlvyInst'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpDlvyInst, N, T, fun fix_groups:decode_CollateralInquiry_grpDlvyInst/2), decode_msg_CollateralInquiry(L, ?MAP_SET(R, 'CollateralInquiry', 'NoDlvyInst'                , G), I+1, U);
decode_msg_CollateralInquiry                      ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'TradingSessionID'          , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SettlSessID'               , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'SettlSessSubID'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'Text'                      , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EncodedTextLen'            , V), I+1, U);
decode_msg_CollateralInquiry                      ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiry(T, ?MAP_SET(R, 'CollateralInquiry', 'EncodedText'               , V), I+1, U);
decode_msg_CollateralInquiry                      ([{K,V}|T], R, I, U)                                       -> decode_msg_CollateralInquiry([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CollateralInquiry                      ([H|T], R, I, U) -> decode_msg_CollateralInquiry(T, R, I, [H|U]);
decode_msg_CollateralInquiry                      ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_NetworkCounterpartySystemStatusRequest ([{'NetworkRequestType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusRequest(T, ?MAP_SET(R, 'NetworkCounterpartySystemStatusRequest', 'NetworkRequestType', V), I+1, U);
decode_msg_NetworkCounterpartySystemStatusRequest ([{'NetworkRequestID'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusRequest(T, ?MAP_SET(R, 'NetworkCounterpartySystemStatusRequest', 'NetworkRequestID'  , V), I+1, U);
decode_msg_NetworkCounterpartySystemStatusRequest ([{'NoCompIDs'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpCompIDs, N, T, fun fix_groups:decode_NetworkCounterpartySystemStatusRequest_grpCompIDs/2), decode_msg_NetworkCounterpartySystemStatusRequest(L, ?MAP_SET(R, 'NetworkCounterpartySystemStatusRequest', 'NoCompIDs'         , G), I+1, U);
decode_msg_NetworkCounterpartySystemStatusRequest ([{K,V}|T], R, I, U)                               -> decode_msg_NetworkCounterpartySystemStatusRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_NetworkCounterpartySystemStatusRequest ([H|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusRequest(T, R, I, [H|U]);
decode_msg_NetworkCounterpartySystemStatusRequest ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_NetworkCounterpartySystemStatusResponse([{'NetworkStatusResponseType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusResponse(T, ?MAP_SET(R, 'NetworkCounterpartySystemStatusResponse', 'NetworkStatusResponseType', V), I+1, U);
decode_msg_NetworkCounterpartySystemStatusResponse([{'NetworkRequestID'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusResponse(T, ?MAP_SET(R, 'NetworkCounterpartySystemStatusResponse', 'NetworkRequestID'         , V), I+1, U);
decode_msg_NetworkCounterpartySystemStatusResponse([{'NetworkResponseID'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusResponse(T, ?MAP_SET(R, 'NetworkCounterpartySystemStatusResponse', 'NetworkResponseID'        , V), I+1, U);
decode_msg_NetworkCounterpartySystemStatusResponse([{'LastNetworkResponseID'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusResponse(T, ?MAP_SET(R, 'NetworkCounterpartySystemStatusResponse', 'LastNetworkResponseID'    , V), I+1, U);
decode_msg_NetworkCounterpartySystemStatusResponse([{'NoCompIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpCompIDs, N, T, fun fix_groups:decode_NetworkCounterpartySystemStatusResponse_grpCompIDs/2), decode_msg_NetworkCounterpartySystemStatusResponse(L, ?MAP_SET(R, 'NetworkCounterpartySystemStatusResponse', 'NoCompIDs'                , G), I+1, U);
decode_msg_NetworkCounterpartySystemStatusResponse([{K,V}|T], R, I, U)                                      -> decode_msg_NetworkCounterpartySystemStatusResponse([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_NetworkCounterpartySystemStatusResponse([H|T], R, I, U) -> decode_msg_NetworkCounterpartySystemStatusResponse(T, R, I, [H|U]);
decode_msg_NetworkCounterpartySystemStatusResponse([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_UserRequest                            ([{'UserRequestID'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'UserRequestID'  , V), I+1, U);
decode_msg_UserRequest                            ([{'UserRequestType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'UserRequestType', V), I+1, U);
decode_msg_UserRequest                            ([{'Username'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'Username'       , V), I+1, U);
decode_msg_UserRequest                            ([{'Password'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'Password'       , V), I+1, U);
decode_msg_UserRequest                            ([{'NewPassword'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'NewPassword'    , V), I+1, U);
decode_msg_UserRequest                            ([{'RawDataLength'  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'RawDataLength'  , V), I+1, U);
decode_msg_UserRequest                            ([{'RawData'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserRequest(T, ?MAP_SET(R, 'UserRequest', 'RawData'        , V), I+1, U);
decode_msg_UserRequest                            ([{K,V}|T], R, I, U)                            -> decode_msg_UserRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_UserRequest                            ([H|T], R, I, U) -> decode_msg_UserRequest(T, R, I, [H|U]);
decode_msg_UserRequest                            ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_UserResponse                           ([{'UserRequestID' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserResponse(T, ?MAP_SET(R, 'UserResponse', 'UserRequestID' , V), I+1, U);
decode_msg_UserResponse                           ([{'Username'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserResponse(T, ?MAP_SET(R, 'UserResponse', 'Username'      , V), I+1, U);
decode_msg_UserResponse                           ([{'UserStatus'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserResponse(T, ?MAP_SET(R, 'UserResponse', 'UserStatus'    , V), I+1, U);
decode_msg_UserResponse                           ([{'UserStatusText', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_UserResponse(T, ?MAP_SET(R, 'UserResponse', 'UserStatusText', V), I+1, U);
decode_msg_UserResponse                           ([{K,V}|T], R, I, U)                           -> decode_msg_UserResponse([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_UserResponse                           ([H|T], R, I, U) -> decode_msg_UserResponse(T, R, I, [H|U]);
decode_msg_UserResponse                           ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_CollateralInquiryAck                   ([{'CollInquiryID'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CollInquiryID'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CollInquiryStatus'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CollInquiryStatus'         , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CollInquiryResult'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CollInquiryResult'         , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoCollInquiryQualifier'    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpCollInquiryQualifier, N, T, fun fix_groups:decode_CollateralInquiryAck_grpCollInquiryQualifier/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoCollInquiryQualifier'    , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'TotNumReports'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'TotNumReports'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoPartyIDs'                , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpPartyIDs, N, T, fun fix_groups:decode_CollateralInquiryAck_grpPartyIDs/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoPartyIDs'                , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Account'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Account'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'AccountType'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'AccountType'               , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'ClOrdID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'ClOrdID'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'OrderID'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'OrderID'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecondaryOrderID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecondaryOrderID'          , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecondaryClOrdID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecondaryClOrdID'          , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoExecs'                   , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpExecs, N, T, fun fix_groups:decode_CollateralInquiryAck_grpExecs/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoExecs'                   , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoTrades'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpTrades, N, T, fun fix_groups:decode_CollateralInquiryAck_grpTrades/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoTrades'                  , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Symbol'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Symbol'                    , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SymbolSfx'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SymbolSfx'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecurityID'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecurityID'                , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecurityIDSource'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecurityIDSource'          , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoSecurityAltID'           , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpSecurityAltID, N, T, fun fix_groups:decode_CollateralInquiryAck_grpSecurityAltID/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoSecurityAltID'           , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Product'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Product'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CFICode'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CFICode'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecurityType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecurityType'              , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecuritySubType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecuritySubType'           , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'MaturityMonthYear'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'MaturityMonthYear'         , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'MaturityDate'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'MaturityDate'              , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'PutOrCall'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'PutOrCall'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CouponPaymentDate'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CouponPaymentDate'         , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'IssueDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'IssueDate'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'RepoCollateralSecurityType', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'RepoCollateralSecurityType', V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'RepurchaseTerm'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'RepurchaseTerm'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'RepurchaseRate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'RepurchaseRate'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Factor'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Factor'                    , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CreditRating'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CreditRating'              , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'InstrRegistry'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'InstrRegistry'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CountryOfIssue'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CountryOfIssue'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'StateOrProvinceOfIssue'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'StateOrProvinceOfIssue'    , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'LocaleOfIssue'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'LocaleOfIssue'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'RedemptionDate'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'RedemptionDate'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'StrikePrice'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'StrikePrice'               , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'StrikeCurrency'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'StrikeCurrency'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'OptAttribute'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'OptAttribute'              , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'ContractMultiplier'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'ContractMultiplier'        , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CouponRate'                , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CouponRate'                , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecurityExchange'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecurityExchange'          , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Issuer'                    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Issuer'                    , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EncodedIssuerLen'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EncodedIssuerLen'          , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EncodedIssuer'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EncodedIssuer'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SecurityDesc'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SecurityDesc'              , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EncodedSecurityDescLen'    , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EncodedSecurityDescLen'    , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EncodedSecurityDesc'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EncodedSecurityDesc'       , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Pool'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Pool'                      , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'ContractSettlMonth'        , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'ContractSettlMonth'        , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CPProgram'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CPProgram'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'CPRegType'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'CPRegType'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoEvents'                  , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpEvents, N, T, fun fix_groups:decode_CollateralInquiryAck_grpEvents/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoEvents'                  , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'DatedDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'DatedDate'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'InterestAccrualDate'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'InterestAccrualDate'       , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'AgreementDesc'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'AgreementDesc'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'AgreementID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'AgreementID'               , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'AgreementDate'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'AgreementDate'             , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'AgreementCurrency'         , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'AgreementCurrency'         , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'TerminationType'           , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'TerminationType'           , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'StartDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'StartDate'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EndDate'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EndDate'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'DeliveryType'              , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'DeliveryType'              , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'MarginRatio'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'MarginRatio'               , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SettlDate'                 , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SettlDate'                 , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Quantity'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Quantity'                  , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'QtyType'                   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'QtyType'                   , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Currency'                  , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Currency'                  , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoLegs'                    , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpLegs, N, T, fun fix_groups:decode_CollateralInquiryAck_grpLegs/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoLegs'                    , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'NoUnderlyings'             , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpUnderlyings, N, T, fun fix_groups:decode_CollateralInquiryAck_grpUnderlyings/2), decode_msg_CollateralInquiryAck(L, ?MAP_SET(R, 'CollateralInquiryAck', 'NoUnderlyings'             , G), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'TradingSessionID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'TradingSessionID'          , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'TradingSessionSubID'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'TradingSessionSubID'       , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SettlSessID'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SettlSessID'               , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'SettlSessSubID'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'SettlSessSubID'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'ClearingBusinessDate'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'ClearingBusinessDate'      , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'ResponseTransportType'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'ResponseTransportType'     , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'ResponseDestination'       , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'ResponseDestination'       , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'Text'                      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'Text'                      , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EncodedTextLen'            , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EncodedTextLen'            , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{'EncodedText'               , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, ?MAP_SET(R, 'CollateralInquiryAck', 'EncodedText'               , V), I+1, U);
decode_msg_CollateralInquiryAck                   ([{K,V}|T], R, I, U)                                       -> decode_msg_CollateralInquiryAck([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_CollateralInquiryAck                   ([H|T], R, I, U) -> decode_msg_CollateralInquiryAck(T, R, I, [H|U]);
decode_msg_CollateralInquiryAck                   ([], R, I, U)    -> {R, I, lists:reverse(U)}.

decode_msg_ConfirmationRequest                    ([{'ConfirmReqID'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'ConfirmReqID'     , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'ConfirmType'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'ConfirmType'      , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'NoOrders'         , N,_Tag,_Pos}|T], R, I, U) -> {G,L} = forgrp(grpOrders, N, T, fun fix_groups:decode_ConfirmationRequest_grpOrders/2), decode_msg_ConfirmationRequest(L, ?MAP_SET(R, 'ConfirmationRequest', 'NoOrders'         , G), I+1, U);
decode_msg_ConfirmationRequest                    ([{'AllocID'          , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'AllocID'          , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'SecondaryAllocID' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'SecondaryAllocID' , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'IndividualAllocID', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'IndividualAllocID', V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'TransactTime'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'TransactTime'     , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'AllocAccount'     , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'AllocAccount'     , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'AllocAcctIDSource', V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'AllocAcctIDSource', V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'AllocAccountType' , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'AllocAccountType' , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'Text'             , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'Text'             , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'EncodedTextLen'   , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'EncodedTextLen'   , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{'EncodedText'      , V,_Tag,_Pos}|T], R, I, U) -> decode_msg_ConfirmationRequest(T, ?MAP_SET(R, 'ConfirmationRequest', 'EncodedText'      , V), I+1, U);
decode_msg_ConfirmationRequest                    ([{K,V}|T], R, I, U)                              -> decode_msg_ConfirmationRequest([{K,V,undefined,undefined}|T], R, I, U);
decode_msg_ConfirmationRequest                    ([H|T], R, I, U) -> decode_msg_ConfirmationRequest(T, R, I, [H|U]);
decode_msg_ConfirmationRequest                    ([], R, I, U)    -> {R, I, lists:reverse(U)}.


forgrp(GN,N, L, F) ->
  Init = #group{name = GN, fields = #{}},
  forgrp(1, N, F, Init, F(L, Init), []).
forgrp(I, I,_F,_Init, {L,R}, Acc) ->
  {lists:reverse([R|Acc]), L};
forgrp(I, N, F, Init, {L,R}, Acc) ->
  forgrp(I+1, N, F, Init, F(L, Init), [R|Acc]).
