%%------------------------------------------------------------------------------
%% Metadata about FIX groups
%%------------------------------------------------------------------------------
%% Author: Serge Aleynikov <saleyn at gmail dot com>
%%
%% The work is derived from Maxim Lapshin's open source work:
%% https://github.com/maxlapshin/fix under the same open source MIT
%% licensing terms as the original.
%%------------------------------------------------------------------------------
%% *** This file is auto-generated, don't modify by hand!!! ***
%%------------------------------------------------------------------------------

-module(fix_groups).

-include("fix.hrl").

-export([
  decode_Advertisement_grpEvents/2,
  decode_Advertisement_grpLegSecurityAltID/2,
  decode_Advertisement_grpLegs/2,
  decode_Advertisement_grpSecurityAltID/2,
  decode_Advertisement_grpUnderlyingSecurityAltID/2,
  decode_Advertisement_grpUnderlyingStips/2,
  decode_Advertisement_grpUnderlyings/2,
  decode_AllocationInstruction_grpAllocs/2,
  decode_AllocationInstruction_grpClearingInstructions/2,
  decode_AllocationInstruction_grpDlvyInst/2,
  decode_AllocationInstruction_grpEvents/2,
  decode_AllocationInstruction_grpExecs/2,
  decode_AllocationInstruction_grpInstrAttrib/2,
  decode_AllocationInstruction_grpLegSecurityAltID/2,
  decode_AllocationInstruction_grpLegs/2,
  decode_AllocationInstruction_grpMiscFees/2,
  decode_AllocationInstruction_grpNested2PartyIDs/2,
  decode_AllocationInstruction_grpNested2PartySubIDs/2,
  decode_AllocationInstruction_grpNestedPartyIDs/2,
  decode_AllocationInstruction_grpNestedPartySubIDs/2,
  decode_AllocationInstruction_grpOrders/2,
  decode_AllocationInstruction_grpPartyIDs/2,
  decode_AllocationInstruction_grpPartySubIDs/2,
  decode_AllocationInstruction_grpSecurityAltID/2,
  decode_AllocationInstruction_grpSettlPartyIDs/2,
  decode_AllocationInstruction_grpSettlPartySubIDs/2,
  decode_AllocationInstruction_grpStipulations/2,
  decode_AllocationInstruction_grpUnderlyingSecurityAltID/2,
  decode_AllocationInstruction_grpUnderlyingStips/2,
  decode_AllocationInstruction_grpUnderlyings/2,
  decode_AllocationInstructionAck_grpAllocs/2,
  decode_AllocationInstructionAck_grpPartyIDs/2,
  decode_AllocationInstructionAck_grpPartySubIDs/2,
  decode_AllocationReport_grpAllocs/2,
  decode_AllocationReport_grpClearingInstructions/2,
  decode_AllocationReport_grpDlvyInst/2,
  decode_AllocationReport_grpEvents/2,
  decode_AllocationReport_grpExecs/2,
  decode_AllocationReport_grpInstrAttrib/2,
  decode_AllocationReport_grpLegSecurityAltID/2,
  decode_AllocationReport_grpLegs/2,
  decode_AllocationReport_grpMiscFees/2,
  decode_AllocationReport_grpNested2PartyIDs/2,
  decode_AllocationReport_grpNested2PartySubIDs/2,
  decode_AllocationReport_grpNestedPartyIDs/2,
  decode_AllocationReport_grpNestedPartySubIDs/2,
  decode_AllocationReport_grpOrders/2,
  decode_AllocationReport_grpPartyIDs/2,
  decode_AllocationReport_grpPartySubIDs/2,
  decode_AllocationReport_grpSecurityAltID/2,
  decode_AllocationReport_grpSettlPartyIDs/2,
  decode_AllocationReport_grpSettlPartySubIDs/2,
  decode_AllocationReport_grpStipulations/2,
  decode_AllocationReport_grpUnderlyingSecurityAltID/2,
  decode_AllocationReport_grpUnderlyingStips/2,
  decode_AllocationReport_grpUnderlyings/2,
  decode_AllocationReportAck_grpAllocs/2,
  decode_AllocationReportAck_grpPartyIDs/2,
  decode_AllocationReportAck_grpPartySubIDs/2,
  decode_AssignmentReport_grpEvents/2,
  decode_AssignmentReport_grpLegSecurityAltID/2,
  decode_AssignmentReport_grpLegs/2,
  decode_AssignmentReport_grpNestedPartyIDs/2,
  decode_AssignmentReport_grpNestedPartySubIDs/2,
  decode_AssignmentReport_grpPartyIDs/2,
  decode_AssignmentReport_grpPartySubIDs/2,
  decode_AssignmentReport_grpPosAmt/2,
  decode_AssignmentReport_grpPositions/2,
  decode_AssignmentReport_grpSecurityAltID/2,
  decode_AssignmentReport_grpUnderlyingSecurityAltID/2,
  decode_AssignmentReport_grpUnderlyingStips/2,
  decode_AssignmentReport_grpUnderlyings/2,
  decode_BidRequest_grpBidComponents/2,
  decode_BidRequest_grpBidDescriptors/2,
  decode_BidResponse_grpBidComponents/2,
  decode_CollateralAssignment_grpDlvyInst/2,
  decode_CollateralAssignment_grpEvents/2,
  decode_CollateralAssignment_grpExecs/2,
  decode_CollateralAssignment_grpLegSecurityAltID/2,
  decode_CollateralAssignment_grpLegs/2,
  decode_CollateralAssignment_grpMiscFees/2,
  decode_CollateralAssignment_grpPartyIDs/2,
  decode_CollateralAssignment_grpPartySubIDs/2,
  decode_CollateralAssignment_grpSecurityAltID/2,
  decode_CollateralAssignment_grpSettlPartyIDs/2,
  decode_CollateralAssignment_grpSettlPartySubIDs/2,
  decode_CollateralAssignment_grpStipulations/2,
  decode_CollateralAssignment_grpTrades/2,
  decode_CollateralAssignment_grpTrdRegTimestamps/2,
  decode_CollateralAssignment_grpUnderlyingSecurityAltID/2,
  decode_CollateralAssignment_grpUnderlyingStips/2,
  decode_CollateralAssignment_grpUnderlyings/2,
  decode_CollateralInquiry_grpCollInquiryQualifier/2,
  decode_CollateralInquiry_grpDlvyInst/2,
  decode_CollateralInquiry_grpEvents/2,
  decode_CollateralInquiry_grpExecs/2,
  decode_CollateralInquiry_grpLegSecurityAltID/2,
  decode_CollateralInquiry_grpLegs/2,
  decode_CollateralInquiry_grpPartyIDs/2,
  decode_CollateralInquiry_grpPartySubIDs/2,
  decode_CollateralInquiry_grpSecurityAltID/2,
  decode_CollateralInquiry_grpSettlPartyIDs/2,
  decode_CollateralInquiry_grpSettlPartySubIDs/2,
  decode_CollateralInquiry_grpStipulations/2,
  decode_CollateralInquiry_grpTrades/2,
  decode_CollateralInquiry_grpTrdRegTimestamps/2,
  decode_CollateralInquiry_grpUnderlyingSecurityAltID/2,
  decode_CollateralInquiry_grpUnderlyingStips/2,
  decode_CollateralInquiry_grpUnderlyings/2,
  decode_CollateralInquiryAck_grpCollInquiryQualifier/2,
  decode_CollateralInquiryAck_grpEvents/2,
  decode_CollateralInquiryAck_grpExecs/2,
  decode_CollateralInquiryAck_grpLegSecurityAltID/2,
  decode_CollateralInquiryAck_grpLegs/2,
  decode_CollateralInquiryAck_grpPartyIDs/2,
  decode_CollateralInquiryAck_grpPartySubIDs/2,
  decode_CollateralInquiryAck_grpSecurityAltID/2,
  decode_CollateralInquiryAck_grpTrades/2,
  decode_CollateralInquiryAck_grpUnderlyingSecurityAltID/2,
  decode_CollateralInquiryAck_grpUnderlyingStips/2,
  decode_CollateralInquiryAck_grpUnderlyings/2,
  decode_CollateralReport_grpDlvyInst/2,
  decode_CollateralReport_grpEvents/2,
  decode_CollateralReport_grpExecs/2,
  decode_CollateralReport_grpLegSecurityAltID/2,
  decode_CollateralReport_grpLegs/2,
  decode_CollateralReport_grpMiscFees/2,
  decode_CollateralReport_grpPartyIDs/2,
  decode_CollateralReport_grpPartySubIDs/2,
  decode_CollateralReport_grpSecurityAltID/2,
  decode_CollateralReport_grpSettlPartyIDs/2,
  decode_CollateralReport_grpSettlPartySubIDs/2,
  decode_CollateralReport_grpStipulations/2,
  decode_CollateralReport_grpTrades/2,
  decode_CollateralReport_grpTrdRegTimestamps/2,
  decode_CollateralReport_grpUnderlyingSecurityAltID/2,
  decode_CollateralReport_grpUnderlyingStips/2,
  decode_CollateralReport_grpUnderlyings/2,
  decode_CollateralRequest_grpEvents/2,
  decode_CollateralRequest_grpExecs/2,
  decode_CollateralRequest_grpLegSecurityAltID/2,
  decode_CollateralRequest_grpLegs/2,
  decode_CollateralRequest_grpMiscFees/2,
  decode_CollateralRequest_grpPartyIDs/2,
  decode_CollateralRequest_grpPartySubIDs/2,
  decode_CollateralRequest_grpSecurityAltID/2,
  decode_CollateralRequest_grpStipulations/2,
  decode_CollateralRequest_grpTrades/2,
  decode_CollateralRequest_grpTrdRegTimestamps/2,
  decode_CollateralRequest_grpUnderlyingSecurityAltID/2,
  decode_CollateralRequest_grpUnderlyingStips/2,
  decode_CollateralRequest_grpUnderlyings/2,
  decode_CollateralResponse_grpEvents/2,
  decode_CollateralResponse_grpExecs/2,
  decode_CollateralResponse_grpLegSecurityAltID/2,
  decode_CollateralResponse_grpLegs/2,
  decode_CollateralResponse_grpMiscFees/2,
  decode_CollateralResponse_grpPartyIDs/2,
  decode_CollateralResponse_grpPartySubIDs/2,
  decode_CollateralResponse_grpSecurityAltID/2,
  decode_CollateralResponse_grpStipulations/2,
  decode_CollateralResponse_grpTrades/2,
  decode_CollateralResponse_grpTrdRegTimestamps/2,
  decode_CollateralResponse_grpUnderlyingSecurityAltID/2,
  decode_CollateralResponse_grpUnderlyingStips/2,
  decode_CollateralResponse_grpUnderlyings/2,
  decode_Confirmation_grpCapacities/2,
  decode_Confirmation_grpDlvyInst/2,
  decode_Confirmation_grpEvents/2,
  decode_Confirmation_grpInstrAttrib/2,
  decode_Confirmation_grpLegSecurityAltID/2,
  decode_Confirmation_grpLegs/2,
  decode_Confirmation_grpMiscFees/2,
  decode_Confirmation_grpNested2PartyIDs/2,
  decode_Confirmation_grpNested2PartySubIDs/2,
  decode_Confirmation_grpOrders/2,
  decode_Confirmation_grpPartyIDs/2,
  decode_Confirmation_grpPartySubIDs/2,
  decode_Confirmation_grpSecurityAltID/2,
  decode_Confirmation_grpSettlPartyIDs/2,
  decode_Confirmation_grpSettlPartySubIDs/2,
  decode_Confirmation_grpStipulations/2,
  decode_Confirmation_grpTrdRegTimestamps/2,
  decode_Confirmation_grpUnderlyingSecurityAltID/2,
  decode_Confirmation_grpUnderlyingStips/2,
  decode_Confirmation_grpUnderlyings/2,
  decode_ConfirmationRequest_grpNested2PartyIDs/2,
  decode_ConfirmationRequest_grpNested2PartySubIDs/2,
  decode_ConfirmationRequest_grpOrders/2,
  decode_CrossOrderCancelReplaceRequest_grpAllocs/2,
  decode_CrossOrderCancelReplaceRequest_grpEvents/2,
  decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID/2,
  decode_CrossOrderCancelReplaceRequest_grpLegs/2,
  decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs/2,
  decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs/2,
  decode_CrossOrderCancelReplaceRequest_grpPartyIDs/2,
  decode_CrossOrderCancelReplaceRequest_grpPartySubIDs/2,
  decode_CrossOrderCancelReplaceRequest_grpSecurityAltID/2,
  decode_CrossOrderCancelReplaceRequest_grpSides/2,
  decode_CrossOrderCancelReplaceRequest_grpStipulations/2,
  decode_CrossOrderCancelReplaceRequest_grpTradingSessions/2,
  decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID/2,
  decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips/2,
  decode_CrossOrderCancelReplaceRequest_grpUnderlyings/2,
  decode_CrossOrderCancelRequest_grpEvents/2,
  decode_CrossOrderCancelRequest_grpLegSecurityAltID/2,
  decode_CrossOrderCancelRequest_grpLegs/2,
  decode_CrossOrderCancelRequest_grpPartyIDs/2,
  decode_CrossOrderCancelRequest_grpPartySubIDs/2,
  decode_CrossOrderCancelRequest_grpSecurityAltID/2,
  decode_CrossOrderCancelRequest_grpSides/2,
  decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID/2,
  decode_CrossOrderCancelRequest_grpUnderlyingStips/2,
  decode_CrossOrderCancelRequest_grpUnderlyings/2,
  decode_DerivativeSecurityList_grpEvents/2,
  decode_DerivativeSecurityList_grpInstrAttrib/2,
  decode_DerivativeSecurityList_grpLegSecurityAltID/2,
  decode_DerivativeSecurityList_grpLegs/2,
  decode_DerivativeSecurityList_grpRelatedSym/2,
  decode_DerivativeSecurityList_grpSecurityAltID/2,
  decode_DerivativeSecurityList_grpUnderlyingSecurityAltID/2,
  decode_DerivativeSecurityList_grpUnderlyingStips/2,
  decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID/2,
  decode_DerivativeSecurityListRequest_grpUnderlyingStips/2,
  decode_DontKnowTrade_grpEvents/2,
  decode_DontKnowTrade_grpLegSecurityAltID/2,
  decode_DontKnowTrade_grpLegs/2,
  decode_DontKnowTrade_grpSecurityAltID/2,
  decode_DontKnowTrade_grpUnderlyingSecurityAltID/2,
  decode_DontKnowTrade_grpUnderlyingStips/2,
  decode_DontKnowTrade_grpUnderlyings/2,
  decode_Email_grpEvents/2,
  decode_Email_grpLegSecurityAltID/2,
  decode_Email_grpLegs/2,
  decode_Email_grpLinesOfText/2,
  decode_Email_grpRelatedSym/2,
  decode_Email_grpRoutingIDs/2,
  decode_Email_grpSecurityAltID/2,
  decode_Email_grpUnderlyingSecurityAltID/2,
  decode_Email_grpUnderlyingStips/2,
  decode_Email_grpUnderlyings/2,
  decode_ExecutionReport_grpContAmts/2,
  decode_ExecutionReport_grpContraBrokers/2,
  decode_ExecutionReport_grpEvents/2,
  decode_ExecutionReport_grpLegSecurityAltID/2,
  decode_ExecutionReport_grpLegStipulations/2,
  decode_ExecutionReport_grpLegs/2,
  decode_ExecutionReport_grpMiscFees/2,
  decode_ExecutionReport_grpNestedPartyIDs/2,
  decode_ExecutionReport_grpNestedPartySubIDs/2,
  decode_ExecutionReport_grpPartyIDs/2,
  decode_ExecutionReport_grpPartySubIDs/2,
  decode_ExecutionReport_grpSecurityAltID/2,
  decode_ExecutionReport_grpStipulations/2,
  decode_ExecutionReport_grpUnderlyingSecurityAltID/2,
  decode_ExecutionReport_grpUnderlyingStips/2,
  decode_ExecutionReport_grpUnderlyings/2,
  decode_IOI_grpEvents/2,
  decode_IOI_grpIOIQualifiers/2,
  decode_IOI_grpLegSecurityAltID/2,
  decode_IOI_grpLegStipulations/2,
  decode_IOI_grpLegs/2,
  decode_IOI_grpRoutingIDs/2,
  decode_IOI_grpSecurityAltID/2,
  decode_IOI_grpStipulations/2,
  decode_IOI_grpUnderlyingSecurityAltID/2,
  decode_IOI_grpUnderlyingStips/2,
  decode_IOI_grpUnderlyings/2,
  decode_ListStatus_grpOrders/2,
  decode_ListStrikePrice_grpEvents/2,
  decode_ListStrikePrice_grpSecurityAltID/2,
  decode_ListStrikePrice_grpStrikes/2,
  decode_ListStrikePrice_grpUnderlyingSecurityAltID/2,
  decode_ListStrikePrice_grpUnderlyingStips/2,
  decode_ListStrikePrice_grpUnderlyings/2,
  decode_Logon_grpMsgTypes/2,
  decode_MarketDataIncrementalRefresh_grpEvents/2,
  decode_MarketDataIncrementalRefresh_grpLegSecurityAltID/2,
  decode_MarketDataIncrementalRefresh_grpLegs/2,
  decode_MarketDataIncrementalRefresh_grpMDEntries/2,
  decode_MarketDataIncrementalRefresh_grpSecurityAltID/2,
  decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID/2,
  decode_MarketDataIncrementalRefresh_grpUnderlyingStips/2,
  decode_MarketDataIncrementalRefresh_grpUnderlyings/2,
  decode_MarketDataRequest_grpEvents/2,
  decode_MarketDataRequest_grpLegSecurityAltID/2,
  decode_MarketDataRequest_grpLegs/2,
  decode_MarketDataRequest_grpMDEntryTypes/2,
  decode_MarketDataRequest_grpRelatedSym/2,
  decode_MarketDataRequest_grpSecurityAltID/2,
  decode_MarketDataRequest_grpTradingSessions/2,
  decode_MarketDataRequest_grpUnderlyingSecurityAltID/2,
  decode_MarketDataRequest_grpUnderlyingStips/2,
  decode_MarketDataRequest_grpUnderlyings/2,
  decode_MarketDataRequestReject_grpAltMDSource/2,
  decode_MarketDataSnapshotFullRefresh_grpEvents/2,
  decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID/2,
  decode_MarketDataSnapshotFullRefresh_grpLegs/2,
  decode_MarketDataSnapshotFullRefresh_grpMDEntries/2,
  decode_MarketDataSnapshotFullRefresh_grpSecurityAltID/2,
  decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID/2,
  decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips/2,
  decode_MarketDataSnapshotFullRefresh_grpUnderlyings/2,
  decode_MassQuote_grpEvents/2,
  decode_MassQuote_grpLegSecurityAltID/2,
  decode_MassQuote_grpLegs/2,
  decode_MassQuote_grpPartyIDs/2,
  decode_MassQuote_grpPartySubIDs/2,
  decode_MassQuote_grpQuoteEntries/2,
  decode_MassQuote_grpQuoteSets/2,
  decode_MassQuote_grpSecurityAltID/2,
  decode_MassQuote_grpUnderlyingSecurityAltID/2,
  decode_MassQuote_grpUnderlyingStips/2,
  decode_MassQuoteAcknowledgement_grpEvents/2,
  decode_MassQuoteAcknowledgement_grpLegSecurityAltID/2,
  decode_MassQuoteAcknowledgement_grpLegs/2,
  decode_MassQuoteAcknowledgement_grpPartyIDs/2,
  decode_MassQuoteAcknowledgement_grpPartySubIDs/2,
  decode_MassQuoteAcknowledgement_grpQuoteEntries/2,
  decode_MassQuoteAcknowledgement_grpQuoteSets/2,
  decode_MassQuoteAcknowledgement_grpSecurityAltID/2,
  decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID/2,
  decode_MassQuoteAcknowledgement_grpUnderlyingStips/2,
  decode_MultilegOrderCancelReplace_grpAllocs/2,
  decode_MultilegOrderCancelReplace_grpEvents/2,
  decode_MultilegOrderCancelReplace_grpLegAllocs/2,
  decode_MultilegOrderCancelReplace_grpLegSecurityAltID/2,
  decode_MultilegOrderCancelReplace_grpLegStipulations/2,
  decode_MultilegOrderCancelReplace_grpLegs/2,
  decode_MultilegOrderCancelReplace_grpNested2PartyIDs/2,
  decode_MultilegOrderCancelReplace_grpNested2PartySubIDs/2,
  decode_MultilegOrderCancelReplace_grpNested3PartyIDs/2,
  decode_MultilegOrderCancelReplace_grpNested3PartySubIDs/2,
  decode_MultilegOrderCancelReplace_grpNestedPartyIDs/2,
  decode_MultilegOrderCancelReplace_grpNestedPartySubIDs/2,
  decode_MultilegOrderCancelReplace_grpPartyIDs/2,
  decode_MultilegOrderCancelReplace_grpPartySubIDs/2,
  decode_MultilegOrderCancelReplace_grpSecurityAltID/2,
  decode_MultilegOrderCancelReplace_grpTradingSessions/2,
  decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID/2,
  decode_MultilegOrderCancelReplace_grpUnderlyingStips/2,
  decode_MultilegOrderCancelReplace_grpUnderlyings/2,
  decode_NetworkCounterpartySystemStatusRequest_grpCompIDs/2,
  decode_NetworkCounterpartySystemStatusResponse_grpCompIDs/2,
  decode_NewOrderCross_grpAllocs/2,
  decode_NewOrderCross_grpEvents/2,
  decode_NewOrderCross_grpLegSecurityAltID/2,
  decode_NewOrderCross_grpLegs/2,
  decode_NewOrderCross_grpNestedPartyIDs/2,
  decode_NewOrderCross_grpNestedPartySubIDs/2,
  decode_NewOrderCross_grpPartyIDs/2,
  decode_NewOrderCross_grpPartySubIDs/2,
  decode_NewOrderCross_grpSecurityAltID/2,
  decode_NewOrderCross_grpSides/2,
  decode_NewOrderCross_grpStipulations/2,
  decode_NewOrderCross_grpTradingSessions/2,
  decode_NewOrderCross_grpUnderlyingSecurityAltID/2,
  decode_NewOrderCross_grpUnderlyingStips/2,
  decode_NewOrderCross_grpUnderlyings/2,
  decode_NewOrderList_grpAllocs/2,
  decode_NewOrderList_grpEvents/2,
  decode_NewOrderList_grpNestedPartyIDs/2,
  decode_NewOrderList_grpNestedPartySubIDs/2,
  decode_NewOrderList_grpOrders/2,
  decode_NewOrderList_grpPartyIDs/2,
  decode_NewOrderList_grpPartySubIDs/2,
  decode_NewOrderList_grpSecurityAltID/2,
  decode_NewOrderList_grpStipulations/2,
  decode_NewOrderList_grpTradingSessions/2,
  decode_NewOrderList_grpUnderlyingSecurityAltID/2,
  decode_NewOrderList_grpUnderlyingStips/2,
  decode_NewOrderList_grpUnderlyings/2,
  decode_NewOrderMultileg_grpAllocs/2,
  decode_NewOrderMultileg_grpEvents/2,
  decode_NewOrderMultileg_grpLegAllocs/2,
  decode_NewOrderMultileg_grpLegSecurityAltID/2,
  decode_NewOrderMultileg_grpLegStipulations/2,
  decode_NewOrderMultileg_grpLegs/2,
  decode_NewOrderMultileg_grpNested2PartyIDs/2,
  decode_NewOrderMultileg_grpNested2PartySubIDs/2,
  decode_NewOrderMultileg_grpNested3PartyIDs/2,
  decode_NewOrderMultileg_grpNested3PartySubIDs/2,
  decode_NewOrderMultileg_grpNestedPartyIDs/2,
  decode_NewOrderMultileg_grpNestedPartySubIDs/2,
  decode_NewOrderMultileg_grpPartyIDs/2,
  decode_NewOrderMultileg_grpPartySubIDs/2,
  decode_NewOrderMultileg_grpSecurityAltID/2,
  decode_NewOrderMultileg_grpTradingSessions/2,
  decode_NewOrderMultileg_grpUnderlyingSecurityAltID/2,
  decode_NewOrderMultileg_grpUnderlyingStips/2,
  decode_NewOrderMultileg_grpUnderlyings/2,
  decode_NewOrderSingle_grpAllocs/2,
  decode_NewOrderSingle_grpEvents/2,
  decode_NewOrderSingle_grpNestedPartyIDs/2,
  decode_NewOrderSingle_grpNestedPartySubIDs/2,
  decode_NewOrderSingle_grpPartyIDs/2,
  decode_NewOrderSingle_grpPartySubIDs/2,
  decode_NewOrderSingle_grpSecurityAltID/2,
  decode_NewOrderSingle_grpStipulations/2,
  decode_NewOrderSingle_grpTradingSessions/2,
  decode_NewOrderSingle_grpUnderlyingSecurityAltID/2,
  decode_NewOrderSingle_grpUnderlyingStips/2,
  decode_NewOrderSingle_grpUnderlyings/2,
  decode_News_grpEvents/2,
  decode_News_grpLegSecurityAltID/2,
  decode_News_grpLegs/2,
  decode_News_grpLinesOfText/2,
  decode_News_grpRelatedSym/2,
  decode_News_grpRoutingIDs/2,
  decode_News_grpSecurityAltID/2,
  decode_News_grpUnderlyingSecurityAltID/2,
  decode_News_grpUnderlyingStips/2,
  decode_News_grpUnderlyings/2,
  decode_OrderCancelReplaceRequest_grpAllocs/2,
  decode_OrderCancelReplaceRequest_grpEvents/2,
  decode_OrderCancelReplaceRequest_grpNestedPartyIDs/2,
  decode_OrderCancelReplaceRequest_grpNestedPartySubIDs/2,
  decode_OrderCancelReplaceRequest_grpPartyIDs/2,
  decode_OrderCancelReplaceRequest_grpPartySubIDs/2,
  decode_OrderCancelReplaceRequest_grpSecurityAltID/2,
  decode_OrderCancelReplaceRequest_grpTradingSessions/2,
  decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID/2,
  decode_OrderCancelReplaceRequest_grpUnderlyingStips/2,
  decode_OrderCancelReplaceRequest_grpUnderlyings/2,
  decode_OrderCancelRequest_grpEvents/2,
  decode_OrderCancelRequest_grpPartyIDs/2,
  decode_OrderCancelRequest_grpPartySubIDs/2,
  decode_OrderCancelRequest_grpSecurityAltID/2,
  decode_OrderCancelRequest_grpUnderlyingSecurityAltID/2,
  decode_OrderCancelRequest_grpUnderlyingStips/2,
  decode_OrderCancelRequest_grpUnderlyings/2,
  decode_OrderMassCancelReport_grpAffectedOrders/2,
  decode_OrderMassCancelReport_grpEvents/2,
  decode_OrderMassCancelReport_grpSecurityAltID/2,
  decode_OrderMassCancelReport_grpUnderlyingSecurityAltID/2,
  decode_OrderMassCancelReport_grpUnderlyingStips/2,
  decode_OrderMassCancelRequest_grpEvents/2,
  decode_OrderMassCancelRequest_grpSecurityAltID/2,
  decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID/2,
  decode_OrderMassCancelRequest_grpUnderlyingStips/2,
  decode_OrderMassStatusRequest_grpEvents/2,
  decode_OrderMassStatusRequest_grpPartyIDs/2,
  decode_OrderMassStatusRequest_grpPartySubIDs/2,
  decode_OrderMassStatusRequest_grpSecurityAltID/2,
  decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID/2,
  decode_OrderMassStatusRequest_grpUnderlyingStips/2,
  decode_OrderStatusRequest_grpEvents/2,
  decode_OrderStatusRequest_grpPartyIDs/2,
  decode_OrderStatusRequest_grpPartySubIDs/2,
  decode_OrderStatusRequest_grpSecurityAltID/2,
  decode_OrderStatusRequest_grpUnderlyingSecurityAltID/2,
  decode_OrderStatusRequest_grpUnderlyingStips/2,
  decode_OrderStatusRequest_grpUnderlyings/2,
  decode_PositionMaintenanceReport_grpEvents/2,
  decode_PositionMaintenanceReport_grpLegSecurityAltID/2,
  decode_PositionMaintenanceReport_grpLegs/2,
  decode_PositionMaintenanceReport_grpNestedPartyIDs/2,
  decode_PositionMaintenanceReport_grpNestedPartySubIDs/2,
  decode_PositionMaintenanceReport_grpPartyIDs/2,
  decode_PositionMaintenanceReport_grpPartySubIDs/2,
  decode_PositionMaintenanceReport_grpPosAmt/2,
  decode_PositionMaintenanceReport_grpPositions/2,
  decode_PositionMaintenanceReport_grpSecurityAltID/2,
  decode_PositionMaintenanceReport_grpTradingSessions/2,
  decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID/2,
  decode_PositionMaintenanceReport_grpUnderlyingStips/2,
  decode_PositionMaintenanceReport_grpUnderlyings/2,
  decode_PositionMaintenanceRequest_grpEvents/2,
  decode_PositionMaintenanceRequest_grpLegSecurityAltID/2,
  decode_PositionMaintenanceRequest_grpLegs/2,
  decode_PositionMaintenanceRequest_grpNestedPartyIDs/2,
  decode_PositionMaintenanceRequest_grpNestedPartySubIDs/2,
  decode_PositionMaintenanceRequest_grpPartyIDs/2,
  decode_PositionMaintenanceRequest_grpPartySubIDs/2,
  decode_PositionMaintenanceRequest_grpPositions/2,
  decode_PositionMaintenanceRequest_grpSecurityAltID/2,
  decode_PositionMaintenanceRequest_grpTradingSessions/2,
  decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID/2,
  decode_PositionMaintenanceRequest_grpUnderlyingStips/2,
  decode_PositionMaintenanceRequest_grpUnderlyings/2,
  decode_PositionReport_grpEvents/2,
  decode_PositionReport_grpLegSecurityAltID/2,
  decode_PositionReport_grpLegs/2,
  decode_PositionReport_grpNestedPartyIDs/2,
  decode_PositionReport_grpNestedPartySubIDs/2,
  decode_PositionReport_grpPartyIDs/2,
  decode_PositionReport_grpPartySubIDs/2,
  decode_PositionReport_grpPosAmt/2,
  decode_PositionReport_grpPositions/2,
  decode_PositionReport_grpSecurityAltID/2,
  decode_PositionReport_grpUnderlyingSecurityAltID/2,
  decode_PositionReport_grpUnderlyingStips/2,
  decode_PositionReport_grpUnderlyings/2,
  decode_Quote_grpEvents/2,
  decode_Quote_grpLegSecurityAltID/2,
  decode_Quote_grpLegStipulations/2,
  decode_Quote_grpLegs/2,
  decode_Quote_grpNestedPartyIDs/2,
  decode_Quote_grpNestedPartySubIDs/2,
  decode_Quote_grpPartyIDs/2,
  decode_Quote_grpPartySubIDs/2,
  decode_Quote_grpQuoteQualifiers/2,
  decode_Quote_grpSecurityAltID/2,
  decode_Quote_grpStipulations/2,
  decode_Quote_grpUnderlyingSecurityAltID/2,
  decode_Quote_grpUnderlyingStips/2,
  decode_Quote_grpUnderlyings/2,
  decode_QuoteCancel_grpEvents/2,
  decode_QuoteCancel_grpLegSecurityAltID/2,
  decode_QuoteCancel_grpLegs/2,
  decode_QuoteCancel_grpPartyIDs/2,
  decode_QuoteCancel_grpPartySubIDs/2,
  decode_QuoteCancel_grpQuoteEntries/2,
  decode_QuoteCancel_grpSecurityAltID/2,
  decode_QuoteCancel_grpUnderlyingSecurityAltID/2,
  decode_QuoteCancel_grpUnderlyingStips/2,
  decode_QuoteCancel_grpUnderlyings/2,
  decode_QuoteRequest_grpEvents/2,
  decode_QuoteRequest_grpLegSecurityAltID/2,
  decode_QuoteRequest_grpLegStipulations/2,
  decode_QuoteRequest_grpLegs/2,
  decode_QuoteRequest_grpNestedPartyIDs/2,
  decode_QuoteRequest_grpNestedPartySubIDs/2,
  decode_QuoteRequest_grpPartyIDs/2,
  decode_QuoteRequest_grpPartySubIDs/2,
  decode_QuoteRequest_grpQuoteQualifiers/2,
  decode_QuoteRequest_grpRelatedSym/2,
  decode_QuoteRequest_grpSecurityAltID/2,
  decode_QuoteRequest_grpStipulations/2,
  decode_QuoteRequest_grpUnderlyingSecurityAltID/2,
  decode_QuoteRequest_grpUnderlyingStips/2,
  decode_QuoteRequest_grpUnderlyings/2,
  decode_QuoteRequestReject_grpEvents/2,
  decode_QuoteRequestReject_grpLegSecurityAltID/2,
  decode_QuoteRequestReject_grpLegStipulations/2,
  decode_QuoteRequestReject_grpLegs/2,
  decode_QuoteRequestReject_grpNestedPartyIDs/2,
  decode_QuoteRequestReject_grpNestedPartySubIDs/2,
  decode_QuoteRequestReject_grpPartyIDs/2,
  decode_QuoteRequestReject_grpPartySubIDs/2,
  decode_QuoteRequestReject_grpQuoteQualifiers/2,
  decode_QuoteRequestReject_grpRelatedSym/2,
  decode_QuoteRequestReject_grpSecurityAltID/2,
  decode_QuoteRequestReject_grpStipulations/2,
  decode_QuoteRequestReject_grpUnderlyingSecurityAltID/2,
  decode_QuoteRequestReject_grpUnderlyingStips/2,
  decode_QuoteRequestReject_grpUnderlyings/2,
  decode_QuoteResponse_grpEvents/2,
  decode_QuoteResponse_grpLegSecurityAltID/2,
  decode_QuoteResponse_grpLegStipulations/2,
  decode_QuoteResponse_grpLegs/2,
  decode_QuoteResponse_grpNestedPartyIDs/2,
  decode_QuoteResponse_grpNestedPartySubIDs/2,
  decode_QuoteResponse_grpPartyIDs/2,
  decode_QuoteResponse_grpPartySubIDs/2,
  decode_QuoteResponse_grpQuoteQualifiers/2,
  decode_QuoteResponse_grpSecurityAltID/2,
  decode_QuoteResponse_grpStipulations/2,
  decode_QuoteResponse_grpUnderlyingSecurityAltID/2,
  decode_QuoteResponse_grpUnderlyingStips/2,
  decode_QuoteResponse_grpUnderlyings/2,
  decode_QuoteStatusReport_grpEvents/2,
  decode_QuoteStatusReport_grpLegSecurityAltID/2,
  decode_QuoteStatusReport_grpLegStipulations/2,
  decode_QuoteStatusReport_grpLegs/2,
  decode_QuoteStatusReport_grpNestedPartyIDs/2,
  decode_QuoteStatusReport_grpNestedPartySubIDs/2,
  decode_QuoteStatusReport_grpPartyIDs/2,
  decode_QuoteStatusReport_grpPartySubIDs/2,
  decode_QuoteStatusReport_grpQuoteQualifiers/2,
  decode_QuoteStatusReport_grpSecurityAltID/2,
  decode_QuoteStatusReport_grpStipulations/2,
  decode_QuoteStatusReport_grpUnderlyingSecurityAltID/2,
  decode_QuoteStatusReport_grpUnderlyingStips/2,
  decode_QuoteStatusReport_grpUnderlyings/2,
  decode_QuoteStatusRequest_grpEvents/2,
  decode_QuoteStatusRequest_grpLegSecurityAltID/2,
  decode_QuoteStatusRequest_grpLegs/2,
  decode_QuoteStatusRequest_grpPartyIDs/2,
  decode_QuoteStatusRequest_grpPartySubIDs/2,
  decode_QuoteStatusRequest_grpSecurityAltID/2,
  decode_QuoteStatusRequest_grpUnderlyingSecurityAltID/2,
  decode_QuoteStatusRequest_grpUnderlyingStips/2,
  decode_QuoteStatusRequest_grpUnderlyings/2,
  decode_RFQRequest_grpEvents/2,
  decode_RFQRequest_grpLegSecurityAltID/2,
  decode_RFQRequest_grpLegs/2,
  decode_RFQRequest_grpRelatedSym/2,
  decode_RFQRequest_grpSecurityAltID/2,
  decode_RFQRequest_grpUnderlyingSecurityAltID/2,
  decode_RFQRequest_grpUnderlyingStips/2,
  decode_RFQRequest_grpUnderlyings/2,
  decode_RegistrationInstructions_grpDistribInsts/2,
  decode_RegistrationInstructions_grpNestedPartyIDs/2,
  decode_RegistrationInstructions_grpNestedPartySubIDs/2,
  decode_RegistrationInstructions_grpPartyIDs/2,
  decode_RegistrationInstructions_grpPartySubIDs/2,
  decode_RegistrationInstructions_grpRegistDtls/2,
  decode_RegistrationInstructionsResponse_grpPartyIDs/2,
  decode_RegistrationInstructionsResponse_grpPartySubIDs/2,
  decode_RequestForPositions_grpEvents/2,
  decode_RequestForPositions_grpLegSecurityAltID/2,
  decode_RequestForPositions_grpLegs/2,
  decode_RequestForPositions_grpPartyIDs/2,
  decode_RequestForPositions_grpPartySubIDs/2,
  decode_RequestForPositions_grpSecurityAltID/2,
  decode_RequestForPositions_grpTradingSessions/2,
  decode_RequestForPositions_grpUnderlyingSecurityAltID/2,
  decode_RequestForPositions_grpUnderlyingStips/2,
  decode_RequestForPositions_grpUnderlyings/2,
  decode_RequestForPositionsAck_grpEvents/2,
  decode_RequestForPositionsAck_grpLegSecurityAltID/2,
  decode_RequestForPositionsAck_grpLegs/2,
  decode_RequestForPositionsAck_grpPartyIDs/2,
  decode_RequestForPositionsAck_grpPartySubIDs/2,
  decode_RequestForPositionsAck_grpSecurityAltID/2,
  decode_RequestForPositionsAck_grpUnderlyingSecurityAltID/2,
  decode_RequestForPositionsAck_grpUnderlyingStips/2,
  decode_RequestForPositionsAck_grpUnderlyings/2,
  decode_SecurityDefinition_grpEvents/2,
  decode_SecurityDefinition_grpInstrAttrib/2,
  decode_SecurityDefinition_grpLegSecurityAltID/2,
  decode_SecurityDefinition_grpLegs/2,
  decode_SecurityDefinition_grpSecurityAltID/2,
  decode_SecurityDefinition_grpUnderlyingSecurityAltID/2,
  decode_SecurityDefinition_grpUnderlyingStips/2,
  decode_SecurityDefinition_grpUnderlyings/2,
  decode_SecurityDefinitionRequest_grpEvents/2,
  decode_SecurityDefinitionRequest_grpInstrAttrib/2,
  decode_SecurityDefinitionRequest_grpLegSecurityAltID/2,
  decode_SecurityDefinitionRequest_grpLegs/2,
  decode_SecurityDefinitionRequest_grpSecurityAltID/2,
  decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID/2,
  decode_SecurityDefinitionRequest_grpUnderlyingStips/2,
  decode_SecurityDefinitionRequest_grpUnderlyings/2,
  decode_SecurityList_grpEvents/2,
  decode_SecurityList_grpInstrAttrib/2,
  decode_SecurityList_grpLegSecurityAltID/2,
  decode_SecurityList_grpLegStipulations/2,
  decode_SecurityList_grpLegs/2,
  decode_SecurityList_grpRelatedSym/2,
  decode_SecurityList_grpSecurityAltID/2,
  decode_SecurityList_grpStipulations/2,
  decode_SecurityList_grpUnderlyingSecurityAltID/2,
  decode_SecurityList_grpUnderlyingStips/2,
  decode_SecurityList_grpUnderlyings/2,
  decode_SecurityListRequest_grpEvents/2,
  decode_SecurityListRequest_grpInstrAttrib/2,
  decode_SecurityListRequest_grpLegSecurityAltID/2,
  decode_SecurityListRequest_grpLegs/2,
  decode_SecurityListRequest_grpSecurityAltID/2,
  decode_SecurityListRequest_grpUnderlyingSecurityAltID/2,
  decode_SecurityListRequest_grpUnderlyingStips/2,
  decode_SecurityListRequest_grpUnderlyings/2,
  decode_SecurityStatus_grpEvents/2,
  decode_SecurityStatus_grpInstrAttrib/2,
  decode_SecurityStatus_grpLegSecurityAltID/2,
  decode_SecurityStatus_grpLegs/2,
  decode_SecurityStatus_grpSecurityAltID/2,
  decode_SecurityStatus_grpUnderlyingSecurityAltID/2,
  decode_SecurityStatus_grpUnderlyingStips/2,
  decode_SecurityStatus_grpUnderlyings/2,
  decode_SecurityStatusRequest_grpEvents/2,
  decode_SecurityStatusRequest_grpInstrAttrib/2,
  decode_SecurityStatusRequest_grpLegSecurityAltID/2,
  decode_SecurityStatusRequest_grpLegs/2,
  decode_SecurityStatusRequest_grpSecurityAltID/2,
  decode_SecurityStatusRequest_grpUnderlyingSecurityAltID/2,
  decode_SecurityStatusRequest_grpUnderlyingStips/2,
  decode_SecurityStatusRequest_grpUnderlyings/2,
  decode_SecurityTypes_grpSecurityTypes/2,
  decode_SettlementInstructionRequest_grpPartyIDs/2,
  decode_SettlementInstructionRequest_grpPartySubIDs/2,
  decode_SettlementInstructions_grpDlvyInst/2,
  decode_SettlementInstructions_grpPartyIDs/2,
  decode_SettlementInstructions_grpPartySubIDs/2,
  decode_SettlementInstructions_grpSettlInst/2,
  decode_SettlementInstructions_grpSettlPartyIDs/2,
  decode_SettlementInstructions_grpSettlPartySubIDs/2,
  decode_TradeCaptureReport_grpAllocs/2,
  decode_TradeCaptureReport_grpClearingInstructions/2,
  decode_TradeCaptureReport_grpContAmts/2,
  decode_TradeCaptureReport_grpEvents/2,
  decode_TradeCaptureReport_grpLegSecurityAltID/2,
  decode_TradeCaptureReport_grpLegStipulations/2,
  decode_TradeCaptureReport_grpLegs/2,
  decode_TradeCaptureReport_grpMiscFees/2,
  decode_TradeCaptureReport_grpNested2PartyIDs/2,
  decode_TradeCaptureReport_grpNested2PartySubIDs/2,
  decode_TradeCaptureReport_grpNestedPartyIDs/2,
  decode_TradeCaptureReport_grpNestedPartySubIDs/2,
  decode_TradeCaptureReport_grpPartyIDs/2,
  decode_TradeCaptureReport_grpPartySubIDs/2,
  decode_TradeCaptureReport_grpPosAmt/2,
  decode_TradeCaptureReport_grpSecurityAltID/2,
  decode_TradeCaptureReport_grpSides/2,
  decode_TradeCaptureReport_grpStipulations/2,
  decode_TradeCaptureReport_grpTrdRegTimestamps/2,
  decode_TradeCaptureReport_grpUnderlyingSecurityAltID/2,
  decode_TradeCaptureReport_grpUnderlyingStips/2,
  decode_TradeCaptureReport_grpUnderlyings/2,
  decode_TradeCaptureReportAck_grpAllocs/2,
  decode_TradeCaptureReportAck_grpEvents/2,
  decode_TradeCaptureReportAck_grpLegSecurityAltID/2,
  decode_TradeCaptureReportAck_grpLegStipulations/2,
  decode_TradeCaptureReportAck_grpLegs/2,
  decode_TradeCaptureReportAck_grpNested2PartyIDs/2,
  decode_TradeCaptureReportAck_grpNested2PartySubIDs/2,
  decode_TradeCaptureReportAck_grpNestedPartyIDs/2,
  decode_TradeCaptureReportAck_grpNestedPartySubIDs/2,
  decode_TradeCaptureReportAck_grpSecurityAltID/2,
  decode_TradeCaptureReportAck_grpTrdRegTimestamps/2,
  decode_TradeCaptureReportRequest_grpDates/2,
  decode_TradeCaptureReportRequest_grpEvents/2,
  decode_TradeCaptureReportRequest_grpInstrAttrib/2,
  decode_TradeCaptureReportRequest_grpLegSecurityAltID/2,
  decode_TradeCaptureReportRequest_grpLegs/2,
  decode_TradeCaptureReportRequest_grpPartyIDs/2,
  decode_TradeCaptureReportRequest_grpPartySubIDs/2,
  decode_TradeCaptureReportRequest_grpSecurityAltID/2,
  decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID/2,
  decode_TradeCaptureReportRequest_grpUnderlyingStips/2,
  decode_TradeCaptureReportRequest_grpUnderlyings/2,
  decode_TradeCaptureReportRequestAck_grpEvents/2,
  decode_TradeCaptureReportRequestAck_grpLegSecurityAltID/2,
  decode_TradeCaptureReportRequestAck_grpLegs/2,
  decode_TradeCaptureReportRequestAck_grpSecurityAltID/2,
  decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID/2,
  decode_TradeCaptureReportRequestAck_grpUnderlyingStips/2,
  decode_TradeCaptureReportRequestAck_grpUnderlyings/2,
  decode_header_grpHops/2,
  decode_group/3
]).

decode_group('Advertisement'                        , 'NoEvents'                            , L) -> decode_Advertisement_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('Advertisement'                        , 'NoLegSecurityAltID'                  , L) -> decode_Advertisement_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('Advertisement'                        , 'NoLegs'                              , L) -> decode_Advertisement_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('Advertisement'                        , 'NoSecurityAltID'                     , L) -> decode_Advertisement_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('Advertisement'                        , 'NoUnderlyingSecurityAltID'           , L) -> decode_Advertisement_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('Advertisement'                        , 'NoUnderlyingStips'                   , L) -> decode_Advertisement_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('Advertisement'                        , 'NoUnderlyings'                       , L) -> decode_Advertisement_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('AllocationInstruction'                , 'NoAllocs'                            , L) -> decode_AllocationInstruction_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('AllocationInstruction'                , 'NoClearingInstructions'              , L) -> decode_AllocationInstruction_grpClearingInstructions(L, undefined, #group{name='NoClearingInstructions'});
decode_group('AllocationInstruction'                , 'NoDlvyInst'                          , L) -> decode_AllocationInstruction_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('AllocationInstruction'                , 'NoEvents'                            , L) -> decode_AllocationInstruction_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('AllocationInstruction'                , 'NoExecs'                             , L) -> decode_AllocationInstruction_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('AllocationInstruction'                , 'NoInstrAttrib'                       , L) -> decode_AllocationInstruction_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('AllocationInstruction'                , 'NoLegSecurityAltID'                  , L) -> decode_AllocationInstruction_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('AllocationInstruction'                , 'NoLegs'                              , L) -> decode_AllocationInstruction_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('AllocationInstruction'                , 'NoMiscFees'                          , L) -> decode_AllocationInstruction_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('AllocationInstruction'                , 'NoNested2PartyIDs'                   , L) -> decode_AllocationInstruction_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('AllocationInstruction'                , 'NoNested2PartySubIDs'                , L) -> decode_AllocationInstruction_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('AllocationInstruction'                , 'NoNestedPartyIDs'                    , L) -> decode_AllocationInstruction_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('AllocationInstruction'                , 'NoNestedPartySubIDs'                 , L) -> decode_AllocationInstruction_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('AllocationInstruction'                , 'NoOrders'                            , L) -> decode_AllocationInstruction_grpOrders(L, undefined, #group{name='NoOrders'});
decode_group('AllocationInstruction'                , 'NoPartyIDs'                          , L) -> decode_AllocationInstruction_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('AllocationInstruction'                , 'NoPartySubIDs'                       , L) -> decode_AllocationInstruction_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('AllocationInstruction'                , 'NoSecurityAltID'                     , L) -> decode_AllocationInstruction_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('AllocationInstruction'                , 'NoSettlPartyIDs'                     , L) -> decode_AllocationInstruction_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('AllocationInstruction'                , 'NoSettlPartySubIDs'                  , L) -> decode_AllocationInstruction_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('AllocationInstruction'                , 'NoStipulations'                      , L) -> decode_AllocationInstruction_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('AllocationInstruction'                , 'NoUnderlyingSecurityAltID'           , L) -> decode_AllocationInstruction_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('AllocationInstruction'                , 'NoUnderlyingStips'                   , L) -> decode_AllocationInstruction_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('AllocationInstruction'                , 'NoUnderlyings'                       , L) -> decode_AllocationInstruction_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('AllocationInstructionAck'             , 'NoAllocs'                            , L) -> decode_AllocationInstructionAck_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('AllocationInstructionAck'             , 'NoPartyIDs'                          , L) -> decode_AllocationInstructionAck_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('AllocationInstructionAck'             , 'NoPartySubIDs'                       , L) -> decode_AllocationInstructionAck_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('AllocationReport'                     , 'NoAllocs'                            , L) -> decode_AllocationReport_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('AllocationReport'                     , 'NoClearingInstructions'              , L) -> decode_AllocationReport_grpClearingInstructions(L, undefined, #group{name='NoClearingInstructions'});
decode_group('AllocationReport'                     , 'NoDlvyInst'                          , L) -> decode_AllocationReport_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('AllocationReport'                     , 'NoEvents'                            , L) -> decode_AllocationReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('AllocationReport'                     , 'NoExecs'                             , L) -> decode_AllocationReport_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('AllocationReport'                     , 'NoInstrAttrib'                       , L) -> decode_AllocationReport_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('AllocationReport'                     , 'NoLegSecurityAltID'                  , L) -> decode_AllocationReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('AllocationReport'                     , 'NoLegs'                              , L) -> decode_AllocationReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('AllocationReport'                     , 'NoMiscFees'                          , L) -> decode_AllocationReport_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('AllocationReport'                     , 'NoNested2PartyIDs'                   , L) -> decode_AllocationReport_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('AllocationReport'                     , 'NoNested2PartySubIDs'                , L) -> decode_AllocationReport_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('AllocationReport'                     , 'NoNestedPartyIDs'                    , L) -> decode_AllocationReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('AllocationReport'                     , 'NoNestedPartySubIDs'                 , L) -> decode_AllocationReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('AllocationReport'                     , 'NoOrders'                            , L) -> decode_AllocationReport_grpOrders(L, undefined, #group{name='NoOrders'});
decode_group('AllocationReport'                     , 'NoPartyIDs'                          , L) -> decode_AllocationReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('AllocationReport'                     , 'NoPartySubIDs'                       , L) -> decode_AllocationReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('AllocationReport'                     , 'NoSecurityAltID'                     , L) -> decode_AllocationReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('AllocationReport'                     , 'NoSettlPartyIDs'                     , L) -> decode_AllocationReport_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('AllocationReport'                     , 'NoSettlPartySubIDs'                  , L) -> decode_AllocationReport_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('AllocationReport'                     , 'NoStipulations'                      , L) -> decode_AllocationReport_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('AllocationReport'                     , 'NoUnderlyingSecurityAltID'           , L) -> decode_AllocationReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('AllocationReport'                     , 'NoUnderlyingStips'                   , L) -> decode_AllocationReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('AllocationReport'                     , 'NoUnderlyings'                       , L) -> decode_AllocationReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('AllocationReportAck'                  , 'NoAllocs'                            , L) -> decode_AllocationReportAck_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('AllocationReportAck'                  , 'NoPartyIDs'                          , L) -> decode_AllocationReportAck_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('AllocationReportAck'                  , 'NoPartySubIDs'                       , L) -> decode_AllocationReportAck_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('AssignmentReport'                     , 'NoEvents'                            , L) -> decode_AssignmentReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('AssignmentReport'                     , 'NoLegSecurityAltID'                  , L) -> decode_AssignmentReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('AssignmentReport'                     , 'NoLegs'                              , L) -> decode_AssignmentReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('AssignmentReport'                     , 'NoNestedPartyIDs'                    , L) -> decode_AssignmentReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('AssignmentReport'                     , 'NoNestedPartySubIDs'                 , L) -> decode_AssignmentReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('AssignmentReport'                     , 'NoPartyIDs'                          , L) -> decode_AssignmentReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('AssignmentReport'                     , 'NoPartySubIDs'                       , L) -> decode_AssignmentReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('AssignmentReport'                     , 'NoPosAmt'                            , L) -> decode_AssignmentReport_grpPosAmt(L, undefined, #group{name='NoPosAmt'});
decode_group('AssignmentReport'                     , 'NoPositions'                         , L) -> decode_AssignmentReport_grpPositions(L, undefined, #group{name='NoPositions'});
decode_group('AssignmentReport'                     , 'NoSecurityAltID'                     , L) -> decode_AssignmentReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('AssignmentReport'                     , 'NoUnderlyingSecurityAltID'           , L) -> decode_AssignmentReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('AssignmentReport'                     , 'NoUnderlyingStips'                   , L) -> decode_AssignmentReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('AssignmentReport'                     , 'NoUnderlyings'                       , L) -> decode_AssignmentReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('BidRequest'                           , 'NoBidComponents'                     , L) -> decode_BidRequest_grpBidComponents(L, undefined, #group{name='NoBidComponents'});
decode_group('BidRequest'                           , 'NoBidDescriptors'                    , L) -> decode_BidRequest_grpBidDescriptors(L, undefined, #group{name='NoBidDescriptors'});
decode_group('BidResponse'                          , 'NoBidComponents'                     , L) -> decode_BidResponse_grpBidComponents(L, undefined, #group{name='NoBidComponents'});
decode_group('CollateralAssignment'                 , 'NoDlvyInst'                          , L) -> decode_CollateralAssignment_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('CollateralAssignment'                 , 'NoEvents'                            , L) -> decode_CollateralAssignment_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CollateralAssignment'                 , 'NoExecs'                             , L) -> decode_CollateralAssignment_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('CollateralAssignment'                 , 'NoLegSecurityAltID'                  , L) -> decode_CollateralAssignment_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CollateralAssignment'                 , 'NoLegs'                              , L) -> decode_CollateralAssignment_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CollateralAssignment'                 , 'NoMiscFees'                          , L) -> decode_CollateralAssignment_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('CollateralAssignment'                 , 'NoPartyIDs'                          , L) -> decode_CollateralAssignment_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CollateralAssignment'                 , 'NoPartySubIDs'                       , L) -> decode_CollateralAssignment_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CollateralAssignment'                 , 'NoSecurityAltID'                     , L) -> decode_CollateralAssignment_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CollateralAssignment'                 , 'NoSettlPartyIDs'                     , L) -> decode_CollateralAssignment_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('CollateralAssignment'                 , 'NoSettlPartySubIDs'                  , L) -> decode_CollateralAssignment_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('CollateralAssignment'                 , 'NoStipulations'                      , L) -> decode_CollateralAssignment_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('CollateralAssignment'                 , 'NoTrades'                            , L) -> decode_CollateralAssignment_grpTrades(L, undefined, #group{name='NoTrades'});
decode_group('CollateralAssignment'                 , 'NoTrdRegTimestamps'                  , L) -> decode_CollateralAssignment_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('CollateralAssignment'                 , 'NoUnderlyingSecurityAltID'           , L) -> decode_CollateralAssignment_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CollateralAssignment'                 , 'NoUnderlyingStips'                   , L) -> decode_CollateralAssignment_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CollateralAssignment'                 , 'NoUnderlyings'                       , L) -> decode_CollateralAssignment_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('CollateralInquiry'                    , 'NoCollInquiryQualifier'              , L) -> decode_CollateralInquiry_grpCollInquiryQualifier(L, undefined, #group{name='NoCollInquiryQualifier'});
decode_group('CollateralInquiry'                    , 'NoDlvyInst'                          , L) -> decode_CollateralInquiry_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('CollateralInquiry'                    , 'NoEvents'                            , L) -> decode_CollateralInquiry_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CollateralInquiry'                    , 'NoExecs'                             , L) -> decode_CollateralInquiry_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('CollateralInquiry'                    , 'NoLegSecurityAltID'                  , L) -> decode_CollateralInquiry_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CollateralInquiry'                    , 'NoLegs'                              , L) -> decode_CollateralInquiry_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CollateralInquiry'                    , 'NoPartyIDs'                          , L) -> decode_CollateralInquiry_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CollateralInquiry'                    , 'NoPartySubIDs'                       , L) -> decode_CollateralInquiry_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CollateralInquiry'                    , 'NoSecurityAltID'                     , L) -> decode_CollateralInquiry_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CollateralInquiry'                    , 'NoSettlPartyIDs'                     , L) -> decode_CollateralInquiry_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('CollateralInquiry'                    , 'NoSettlPartySubIDs'                  , L) -> decode_CollateralInquiry_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('CollateralInquiry'                    , 'NoStipulations'                      , L) -> decode_CollateralInquiry_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('CollateralInquiry'                    , 'NoTrades'                            , L) -> decode_CollateralInquiry_grpTrades(L, undefined, #group{name='NoTrades'});
decode_group('CollateralInquiry'                    , 'NoTrdRegTimestamps'                  , L) -> decode_CollateralInquiry_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('CollateralInquiry'                    , 'NoUnderlyingSecurityAltID'           , L) -> decode_CollateralInquiry_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CollateralInquiry'                    , 'NoUnderlyingStips'                   , L) -> decode_CollateralInquiry_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CollateralInquiry'                    , 'NoUnderlyings'                       , L) -> decode_CollateralInquiry_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('CollateralInquiryAck'                 , 'NoCollInquiryQualifier'              , L) -> decode_CollateralInquiryAck_grpCollInquiryQualifier(L, undefined, #group{name='NoCollInquiryQualifier'});
decode_group('CollateralInquiryAck'                 , 'NoEvents'                            , L) -> decode_CollateralInquiryAck_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CollateralInquiryAck'                 , 'NoExecs'                             , L) -> decode_CollateralInquiryAck_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('CollateralInquiryAck'                 , 'NoLegSecurityAltID'                  , L) -> decode_CollateralInquiryAck_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CollateralInquiryAck'                 , 'NoLegs'                              , L) -> decode_CollateralInquiryAck_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CollateralInquiryAck'                 , 'NoPartyIDs'                          , L) -> decode_CollateralInquiryAck_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CollateralInquiryAck'                 , 'NoPartySubIDs'                       , L) -> decode_CollateralInquiryAck_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CollateralInquiryAck'                 , 'NoSecurityAltID'                     , L) -> decode_CollateralInquiryAck_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CollateralInquiryAck'                 , 'NoTrades'                            , L) -> decode_CollateralInquiryAck_grpTrades(L, undefined, #group{name='NoTrades'});
decode_group('CollateralInquiryAck'                 , 'NoUnderlyingSecurityAltID'           , L) -> decode_CollateralInquiryAck_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CollateralInquiryAck'                 , 'NoUnderlyingStips'                   , L) -> decode_CollateralInquiryAck_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CollateralInquiryAck'                 , 'NoUnderlyings'                       , L) -> decode_CollateralInquiryAck_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('CollateralReport'                     , 'NoDlvyInst'                          , L) -> decode_CollateralReport_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('CollateralReport'                     , 'NoEvents'                            , L) -> decode_CollateralReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CollateralReport'                     , 'NoExecs'                             , L) -> decode_CollateralReport_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('CollateralReport'                     , 'NoLegSecurityAltID'                  , L) -> decode_CollateralReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CollateralReport'                     , 'NoLegs'                              , L) -> decode_CollateralReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CollateralReport'                     , 'NoMiscFees'                          , L) -> decode_CollateralReport_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('CollateralReport'                     , 'NoPartyIDs'                          , L) -> decode_CollateralReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CollateralReport'                     , 'NoPartySubIDs'                       , L) -> decode_CollateralReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CollateralReport'                     , 'NoSecurityAltID'                     , L) -> decode_CollateralReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CollateralReport'                     , 'NoSettlPartyIDs'                     , L) -> decode_CollateralReport_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('CollateralReport'                     , 'NoSettlPartySubIDs'                  , L) -> decode_CollateralReport_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('CollateralReport'                     , 'NoStipulations'                      , L) -> decode_CollateralReport_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('CollateralReport'                     , 'NoTrades'                            , L) -> decode_CollateralReport_grpTrades(L, undefined, #group{name='NoTrades'});
decode_group('CollateralReport'                     , 'NoTrdRegTimestamps'                  , L) -> decode_CollateralReport_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('CollateralReport'                     , 'NoUnderlyingSecurityAltID'           , L) -> decode_CollateralReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CollateralReport'                     , 'NoUnderlyingStips'                   , L) -> decode_CollateralReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CollateralReport'                     , 'NoUnderlyings'                       , L) -> decode_CollateralReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('CollateralRequest'                    , 'NoEvents'                            , L) -> decode_CollateralRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CollateralRequest'                    , 'NoExecs'                             , L) -> decode_CollateralRequest_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('CollateralRequest'                    , 'NoLegSecurityAltID'                  , L) -> decode_CollateralRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CollateralRequest'                    , 'NoLegs'                              , L) -> decode_CollateralRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CollateralRequest'                    , 'NoMiscFees'                          , L) -> decode_CollateralRequest_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('CollateralRequest'                    , 'NoPartyIDs'                          , L) -> decode_CollateralRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CollateralRequest'                    , 'NoPartySubIDs'                       , L) -> decode_CollateralRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CollateralRequest'                    , 'NoSecurityAltID'                     , L) -> decode_CollateralRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CollateralRequest'                    , 'NoStipulations'                      , L) -> decode_CollateralRequest_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('CollateralRequest'                    , 'NoTrades'                            , L) -> decode_CollateralRequest_grpTrades(L, undefined, #group{name='NoTrades'});
decode_group('CollateralRequest'                    , 'NoTrdRegTimestamps'                  , L) -> decode_CollateralRequest_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('CollateralRequest'                    , 'NoUnderlyingSecurityAltID'           , L) -> decode_CollateralRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CollateralRequest'                    , 'NoUnderlyingStips'                   , L) -> decode_CollateralRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CollateralRequest'                    , 'NoUnderlyings'                       , L) -> decode_CollateralRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('CollateralResponse'                   , 'NoEvents'                            , L) -> decode_CollateralResponse_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CollateralResponse'                   , 'NoExecs'                             , L) -> decode_CollateralResponse_grpExecs(L, undefined, #group{name='NoExecs'});
decode_group('CollateralResponse'                   , 'NoLegSecurityAltID'                  , L) -> decode_CollateralResponse_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CollateralResponse'                   , 'NoLegs'                              , L) -> decode_CollateralResponse_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CollateralResponse'                   , 'NoMiscFees'                          , L) -> decode_CollateralResponse_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('CollateralResponse'                   , 'NoPartyIDs'                          , L) -> decode_CollateralResponse_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CollateralResponse'                   , 'NoPartySubIDs'                       , L) -> decode_CollateralResponse_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CollateralResponse'                   , 'NoSecurityAltID'                     , L) -> decode_CollateralResponse_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CollateralResponse'                   , 'NoStipulations'                      , L) -> decode_CollateralResponse_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('CollateralResponse'                   , 'NoTrades'                            , L) -> decode_CollateralResponse_grpTrades(L, undefined, #group{name='NoTrades'});
decode_group('CollateralResponse'                   , 'NoTrdRegTimestamps'                  , L) -> decode_CollateralResponse_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('CollateralResponse'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_CollateralResponse_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CollateralResponse'                   , 'NoUnderlyingStips'                   , L) -> decode_CollateralResponse_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CollateralResponse'                   , 'NoUnderlyings'                       , L) -> decode_CollateralResponse_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('Confirmation'                         , 'NoCapacities'                        , L) -> decode_Confirmation_grpCapacities(L, undefined, #group{name='NoCapacities'});
decode_group('Confirmation'                         , 'NoDlvyInst'                          , L) -> decode_Confirmation_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('Confirmation'                         , 'NoEvents'                            , L) -> decode_Confirmation_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('Confirmation'                         , 'NoInstrAttrib'                       , L) -> decode_Confirmation_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('Confirmation'                         , 'NoLegSecurityAltID'                  , L) -> decode_Confirmation_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('Confirmation'                         , 'NoLegs'                              , L) -> decode_Confirmation_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('Confirmation'                         , 'NoMiscFees'                          , L) -> decode_Confirmation_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('Confirmation'                         , 'NoNested2PartyIDs'                   , L) -> decode_Confirmation_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('Confirmation'                         , 'NoNested2PartySubIDs'                , L) -> decode_Confirmation_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('Confirmation'                         , 'NoOrders'                            , L) -> decode_Confirmation_grpOrders(L, undefined, #group{name='NoOrders'});
decode_group('Confirmation'                         , 'NoPartyIDs'                          , L) -> decode_Confirmation_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('Confirmation'                         , 'NoPartySubIDs'                       , L) -> decode_Confirmation_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('Confirmation'                         , 'NoSecurityAltID'                     , L) -> decode_Confirmation_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('Confirmation'                         , 'NoSettlPartyIDs'                     , L) -> decode_Confirmation_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('Confirmation'                         , 'NoSettlPartySubIDs'                  , L) -> decode_Confirmation_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('Confirmation'                         , 'NoStipulations'                      , L) -> decode_Confirmation_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('Confirmation'                         , 'NoTrdRegTimestamps'                  , L) -> decode_Confirmation_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('Confirmation'                         , 'NoUnderlyingSecurityAltID'           , L) -> decode_Confirmation_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('Confirmation'                         , 'NoUnderlyingStips'                   , L) -> decode_Confirmation_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('Confirmation'                         , 'NoUnderlyings'                       , L) -> decode_Confirmation_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('ConfirmationRequest'                  , 'NoNested2PartyIDs'                   , L) -> decode_ConfirmationRequest_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('ConfirmationRequest'                  , 'NoNested2PartySubIDs'                , L) -> decode_ConfirmationRequest_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('ConfirmationRequest'                  , 'NoOrders'                            , L) -> decode_ConfirmationRequest_grpOrders(L, undefined, #group{name='NoOrders'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoAllocs'                            , L) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoEvents'                            , L) -> decode_CrossOrderCancelReplaceRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoLegSecurityAltID'                  , L) -> decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoLegs'                              , L) -> decode_CrossOrderCancelReplaceRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoNestedPartyIDs'                    , L) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoNestedPartySubIDs'                 , L) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoPartyIDs'                          , L) -> decode_CrossOrderCancelReplaceRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoPartySubIDs'                       , L) -> decode_CrossOrderCancelReplaceRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoSecurityAltID'                     , L) -> decode_CrossOrderCancelReplaceRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoSides'                             , L) -> decode_CrossOrderCancelReplaceRequest_grpSides(L, undefined, #group{name='NoSides'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoStipulations'                      , L) -> decode_CrossOrderCancelReplaceRequest_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoTradingSessions'                   , L) -> decode_CrossOrderCancelReplaceRequest_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoUnderlyingSecurityAltID'           , L) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoUnderlyingStips'                   , L) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CrossOrderCancelReplaceRequest'       , 'NoUnderlyings'                       , L) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('CrossOrderCancelRequest'              , 'NoEvents'                            , L) -> decode_CrossOrderCancelRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('CrossOrderCancelRequest'              , 'NoLegSecurityAltID'                  , L) -> decode_CrossOrderCancelRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('CrossOrderCancelRequest'              , 'NoLegs'                              , L) -> decode_CrossOrderCancelRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('CrossOrderCancelRequest'              , 'NoPartyIDs'                          , L) -> decode_CrossOrderCancelRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('CrossOrderCancelRequest'              , 'NoPartySubIDs'                       , L) -> decode_CrossOrderCancelRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('CrossOrderCancelRequest'              , 'NoSecurityAltID'                     , L) -> decode_CrossOrderCancelRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('CrossOrderCancelRequest'              , 'NoSides'                             , L) -> decode_CrossOrderCancelRequest_grpSides(L, undefined, #group{name='NoSides'});
decode_group('CrossOrderCancelRequest'              , 'NoUnderlyingSecurityAltID'           , L) -> decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('CrossOrderCancelRequest'              , 'NoUnderlyingStips'                   , L) -> decode_CrossOrderCancelRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('CrossOrderCancelRequest'              , 'NoUnderlyings'                       , L) -> decode_CrossOrderCancelRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('DerivativeSecurityList'               , 'NoEvents'                            , L) -> decode_DerivativeSecurityList_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('DerivativeSecurityList'               , 'NoInstrAttrib'                       , L) -> decode_DerivativeSecurityList_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('DerivativeSecurityList'               , 'NoLegSecurityAltID'                  , L) -> decode_DerivativeSecurityList_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('DerivativeSecurityList'               , 'NoLegs'                              , L) -> decode_DerivativeSecurityList_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('DerivativeSecurityList'               , 'NoRelatedSym'                        , L) -> decode_DerivativeSecurityList_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('DerivativeSecurityList'               , 'NoSecurityAltID'                     , L) -> decode_DerivativeSecurityList_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('DerivativeSecurityList'               , 'NoUnderlyingSecurityAltID'           , L) -> decode_DerivativeSecurityList_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('DerivativeSecurityList'               , 'NoUnderlyingStips'                   , L) -> decode_DerivativeSecurityList_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('DerivativeSecurityListRequest'        , 'NoUnderlyingSecurityAltID'           , L) -> decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('DerivativeSecurityListRequest'        , 'NoUnderlyingStips'                   , L) -> decode_DerivativeSecurityListRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('DontKnowTrade'                        , 'NoEvents'                            , L) -> decode_DontKnowTrade_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('DontKnowTrade'                        , 'NoLegSecurityAltID'                  , L) -> decode_DontKnowTrade_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('DontKnowTrade'                        , 'NoLegs'                              , L) -> decode_DontKnowTrade_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('DontKnowTrade'                        , 'NoSecurityAltID'                     , L) -> decode_DontKnowTrade_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('DontKnowTrade'                        , 'NoUnderlyingSecurityAltID'           , L) -> decode_DontKnowTrade_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('DontKnowTrade'                        , 'NoUnderlyingStips'                   , L) -> decode_DontKnowTrade_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('DontKnowTrade'                        , 'NoUnderlyings'                       , L) -> decode_DontKnowTrade_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('Email'                                , 'NoEvents'                            , L) -> decode_Email_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('Email'                                , 'NoLegSecurityAltID'                  , L) -> decode_Email_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('Email'                                , 'NoLegs'                              , L) -> decode_Email_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('Email'                                , 'NoLinesOfText'                       , L) -> decode_Email_grpLinesOfText(L, undefined, #group{name='NoLinesOfText'});
decode_group('Email'                                , 'NoRelatedSym'                        , L) -> decode_Email_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('Email'                                , 'NoRoutingIDs'                        , L) -> decode_Email_grpRoutingIDs(L, undefined, #group{name='NoRoutingIDs'});
decode_group('Email'                                , 'NoSecurityAltID'                     , L) -> decode_Email_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('Email'                                , 'NoUnderlyingSecurityAltID'           , L) -> decode_Email_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('Email'                                , 'NoUnderlyingStips'                   , L) -> decode_Email_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('Email'                                , 'NoUnderlyings'                       , L) -> decode_Email_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('ExecutionReport'                      , 'NoContAmts'                          , L) -> decode_ExecutionReport_grpContAmts(L, undefined, #group{name='NoContAmts'});
decode_group('ExecutionReport'                      , 'NoContraBrokers'                     , L) -> decode_ExecutionReport_grpContraBrokers(L, undefined, #group{name='NoContraBrokers'});
decode_group('ExecutionReport'                      , 'NoEvents'                            , L) -> decode_ExecutionReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('ExecutionReport'                      , 'NoLegSecurityAltID'                  , L) -> decode_ExecutionReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('ExecutionReport'                      , 'NoLegStipulations'                   , L) -> decode_ExecutionReport_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('ExecutionReport'                      , 'NoLegs'                              , L) -> decode_ExecutionReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('ExecutionReport'                      , 'NoMiscFees'                          , L) -> decode_ExecutionReport_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('ExecutionReport'                      , 'NoNestedPartyIDs'                    , L) -> decode_ExecutionReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('ExecutionReport'                      , 'NoNestedPartySubIDs'                 , L) -> decode_ExecutionReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('ExecutionReport'                      , 'NoPartyIDs'                          , L) -> decode_ExecutionReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('ExecutionReport'                      , 'NoPartySubIDs'                       , L) -> decode_ExecutionReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('ExecutionReport'                      , 'NoSecurityAltID'                     , L) -> decode_ExecutionReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('ExecutionReport'                      , 'NoStipulations'                      , L) -> decode_ExecutionReport_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('ExecutionReport'                      , 'NoUnderlyingSecurityAltID'           , L) -> decode_ExecutionReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('ExecutionReport'                      , 'NoUnderlyingStips'                   , L) -> decode_ExecutionReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('ExecutionReport'                      , 'NoUnderlyings'                       , L) -> decode_ExecutionReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('IOI'                                  , 'NoEvents'                            , L) -> decode_IOI_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('IOI'                                  , 'NoIOIQualifiers'                     , L) -> decode_IOI_grpIOIQualifiers(L, undefined, #group{name='NoIOIQualifiers'});
decode_group('IOI'                                  , 'NoLegSecurityAltID'                  , L) -> decode_IOI_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('IOI'                                  , 'NoLegStipulations'                   , L) -> decode_IOI_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('IOI'                                  , 'NoLegs'                              , L) -> decode_IOI_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('IOI'                                  , 'NoRoutingIDs'                        , L) -> decode_IOI_grpRoutingIDs(L, undefined, #group{name='NoRoutingIDs'});
decode_group('IOI'                                  , 'NoSecurityAltID'                     , L) -> decode_IOI_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('IOI'                                  , 'NoStipulations'                      , L) -> decode_IOI_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('IOI'                                  , 'NoUnderlyingSecurityAltID'           , L) -> decode_IOI_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('IOI'                                  , 'NoUnderlyingStips'                   , L) -> decode_IOI_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('IOI'                                  , 'NoUnderlyings'                       , L) -> decode_IOI_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('ListStatus'                           , 'NoOrders'                            , L) -> decode_ListStatus_grpOrders(L, undefined, #group{name='NoOrders'});
decode_group('ListStrikePrice'                      , 'NoEvents'                            , L) -> decode_ListStrikePrice_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('ListStrikePrice'                      , 'NoSecurityAltID'                     , L) -> decode_ListStrikePrice_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('ListStrikePrice'                      , 'NoStrikes'                           , L) -> decode_ListStrikePrice_grpStrikes(L, undefined, #group{name='NoStrikes'});
decode_group('ListStrikePrice'                      , 'NoUnderlyingSecurityAltID'           , L) -> decode_ListStrikePrice_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('ListStrikePrice'                      , 'NoUnderlyingStips'                   , L) -> decode_ListStrikePrice_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('ListStrikePrice'                      , 'NoUnderlyings'                       , L) -> decode_ListStrikePrice_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('Logon'                                , 'NoMsgTypes'                          , L) -> decode_Logon_grpMsgTypes(L, undefined, #group{name='NoMsgTypes'});
decode_group('MarketDataIncrementalRefresh'         , 'NoEvents'                            , L) -> decode_MarketDataIncrementalRefresh_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('MarketDataIncrementalRefresh'         , 'NoLegSecurityAltID'                  , L) -> decode_MarketDataIncrementalRefresh_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('MarketDataIncrementalRefresh'         , 'NoLegs'                              , L) -> decode_MarketDataIncrementalRefresh_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('MarketDataIncrementalRefresh'         , 'NoMDEntries'                         , L) -> decode_MarketDataIncrementalRefresh_grpMDEntries(L, undefined, #group{name='NoMDEntries'});
decode_group('MarketDataIncrementalRefresh'         , 'NoSecurityAltID'                     , L) -> decode_MarketDataIncrementalRefresh_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('MarketDataIncrementalRefresh'         , 'NoUnderlyingSecurityAltID'           , L) -> decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('MarketDataIncrementalRefresh'         , 'NoUnderlyingStips'                   , L) -> decode_MarketDataIncrementalRefresh_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('MarketDataIncrementalRefresh'         , 'NoUnderlyings'                       , L) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('MarketDataRequest'                    , 'NoEvents'                            , L) -> decode_MarketDataRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('MarketDataRequest'                    , 'NoLegSecurityAltID'                  , L) -> decode_MarketDataRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('MarketDataRequest'                    , 'NoLegs'                              , L) -> decode_MarketDataRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('MarketDataRequest'                    , 'NoMDEntryTypes'                      , L) -> decode_MarketDataRequest_grpMDEntryTypes(L, undefined, #group{name='NoMDEntryTypes'});
decode_group('MarketDataRequest'                    , 'NoRelatedSym'                        , L) -> decode_MarketDataRequest_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('MarketDataRequest'                    , 'NoSecurityAltID'                     , L) -> decode_MarketDataRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('MarketDataRequest'                    , 'NoTradingSessions'                   , L) -> decode_MarketDataRequest_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('MarketDataRequest'                    , 'NoUnderlyingSecurityAltID'           , L) -> decode_MarketDataRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('MarketDataRequest'                    , 'NoUnderlyingStips'                   , L) -> decode_MarketDataRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('MarketDataRequest'                    , 'NoUnderlyings'                       , L) -> decode_MarketDataRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('MarketDataRequestReject'              , 'NoAltMDSource'                       , L) -> decode_MarketDataRequestReject_grpAltMDSource(L, undefined, #group{name='NoAltMDSource'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoEvents'                            , L) -> decode_MarketDataSnapshotFullRefresh_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoLegSecurityAltID'                  , L) -> decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoLegs'                              , L) -> decode_MarketDataSnapshotFullRefresh_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoMDEntries'                         , L) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(L, undefined, #group{name='NoMDEntries'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoSecurityAltID'                     , L) -> decode_MarketDataSnapshotFullRefresh_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoUnderlyingSecurityAltID'           , L) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoUnderlyingStips'                   , L) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('MarketDataSnapshotFullRefresh'        , 'NoUnderlyings'                       , L) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('MassQuote'                            , 'NoEvents'                            , L) -> decode_MassQuote_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('MassQuote'                            , 'NoLegSecurityAltID'                  , L) -> decode_MassQuote_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('MassQuote'                            , 'NoLegs'                              , L) -> decode_MassQuote_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('MassQuote'                            , 'NoPartyIDs'                          , L) -> decode_MassQuote_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('MassQuote'                            , 'NoPartySubIDs'                       , L) -> decode_MassQuote_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('MassQuote'                            , 'NoQuoteEntries'                      , L) -> decode_MassQuote_grpQuoteEntries(L, undefined, #group{name='NoQuoteEntries'});
decode_group('MassQuote'                            , 'NoQuoteSets'                         , L) -> decode_MassQuote_grpQuoteSets(L, undefined, #group{name='NoQuoteSets'});
decode_group('MassQuote'                            , 'NoSecurityAltID'                     , L) -> decode_MassQuote_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('MassQuote'                            , 'NoUnderlyingSecurityAltID'           , L) -> decode_MassQuote_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('MassQuote'                            , 'NoUnderlyingStips'                   , L) -> decode_MassQuote_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('MassQuoteAcknowledgement'             , 'NoEvents'                            , L) -> decode_MassQuoteAcknowledgement_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('MassQuoteAcknowledgement'             , 'NoLegSecurityAltID'                  , L) -> decode_MassQuoteAcknowledgement_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('MassQuoteAcknowledgement'             , 'NoLegs'                              , L) -> decode_MassQuoteAcknowledgement_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('MassQuoteAcknowledgement'             , 'NoPartyIDs'                          , L) -> decode_MassQuoteAcknowledgement_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('MassQuoteAcknowledgement'             , 'NoPartySubIDs'                       , L) -> decode_MassQuoteAcknowledgement_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('MassQuoteAcknowledgement'             , 'NoQuoteEntries'                      , L) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(L, undefined, #group{name='NoQuoteEntries'});
decode_group('MassQuoteAcknowledgement'             , 'NoQuoteSets'                         , L) -> decode_MassQuoteAcknowledgement_grpQuoteSets(L, undefined, #group{name='NoQuoteSets'});
decode_group('MassQuoteAcknowledgement'             , 'NoSecurityAltID'                     , L) -> decode_MassQuoteAcknowledgement_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('MassQuoteAcknowledgement'             , 'NoUnderlyingSecurityAltID'           , L) -> decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('MassQuoteAcknowledgement'             , 'NoUnderlyingStips'                   , L) -> decode_MassQuoteAcknowledgement_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('MultilegOrderCancelReplace'           , 'NoAllocs'                            , L) -> decode_MultilegOrderCancelReplace_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('MultilegOrderCancelReplace'           , 'NoEvents'                            , L) -> decode_MultilegOrderCancelReplace_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('MultilegOrderCancelReplace'           , 'NoLegAllocs'                         , L) -> decode_MultilegOrderCancelReplace_grpLegAllocs(L, undefined, #group{name='NoLegAllocs'});
decode_group('MultilegOrderCancelReplace'           , 'NoLegSecurityAltID'                  , L) -> decode_MultilegOrderCancelReplace_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('MultilegOrderCancelReplace'           , 'NoLegStipulations'                   , L) -> decode_MultilegOrderCancelReplace_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('MultilegOrderCancelReplace'           , 'NoLegs'                              , L) -> decode_MultilegOrderCancelReplace_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('MultilegOrderCancelReplace'           , 'NoNested2PartyIDs'                   , L) -> decode_MultilegOrderCancelReplace_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoNested2PartySubIDs'                , L) -> decode_MultilegOrderCancelReplace_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoNested3PartyIDs'                   , L) -> decode_MultilegOrderCancelReplace_grpNested3PartyIDs(L, undefined, #group{name='NoNested3PartyIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoNested3PartySubIDs'                , L) -> decode_MultilegOrderCancelReplace_grpNested3PartySubIDs(L, undefined, #group{name='NoNested3PartySubIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoNestedPartyIDs'                    , L) -> decode_MultilegOrderCancelReplace_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoNestedPartySubIDs'                 , L) -> decode_MultilegOrderCancelReplace_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoPartyIDs'                          , L) -> decode_MultilegOrderCancelReplace_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoPartySubIDs'                       , L) -> decode_MultilegOrderCancelReplace_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('MultilegOrderCancelReplace'           , 'NoSecurityAltID'                     , L) -> decode_MultilegOrderCancelReplace_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('MultilegOrderCancelReplace'           , 'NoTradingSessions'                   , L) -> decode_MultilegOrderCancelReplace_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('MultilegOrderCancelReplace'           , 'NoUnderlyingSecurityAltID'           , L) -> decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('MultilegOrderCancelReplace'           , 'NoUnderlyingStips'                   , L) -> decode_MultilegOrderCancelReplace_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('MultilegOrderCancelReplace'           , 'NoUnderlyings'                       , L) -> decode_MultilegOrderCancelReplace_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('NetworkCounterpartySystemStatusRequest', 'NoCompIDs'                           , L) -> decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(L, undefined, #group{name='NoCompIDs'});
decode_group('NetworkCounterpartySystemStatusResponse', 'NoCompIDs'                           , L) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(L, undefined, #group{name='NoCompIDs'});
decode_group('NewOrderCross'                        , 'NoAllocs'                            , L) -> decode_NewOrderCross_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('NewOrderCross'                        , 'NoEvents'                            , L) -> decode_NewOrderCross_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('NewOrderCross'                        , 'NoLegSecurityAltID'                  , L) -> decode_NewOrderCross_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('NewOrderCross'                        , 'NoLegs'                              , L) -> decode_NewOrderCross_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('NewOrderCross'                        , 'NoNestedPartyIDs'                    , L) -> decode_NewOrderCross_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('NewOrderCross'                        , 'NoNestedPartySubIDs'                 , L) -> decode_NewOrderCross_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('NewOrderCross'                        , 'NoPartyIDs'                          , L) -> decode_NewOrderCross_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('NewOrderCross'                        , 'NoPartySubIDs'                       , L) -> decode_NewOrderCross_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('NewOrderCross'                        , 'NoSecurityAltID'                     , L) -> decode_NewOrderCross_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('NewOrderCross'                        , 'NoSides'                             , L) -> decode_NewOrderCross_grpSides(L, undefined, #group{name='NoSides'});
decode_group('NewOrderCross'                        , 'NoStipulations'                      , L) -> decode_NewOrderCross_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('NewOrderCross'                        , 'NoTradingSessions'                   , L) -> decode_NewOrderCross_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('NewOrderCross'                        , 'NoUnderlyingSecurityAltID'           , L) -> decode_NewOrderCross_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('NewOrderCross'                        , 'NoUnderlyingStips'                   , L) -> decode_NewOrderCross_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('NewOrderCross'                        , 'NoUnderlyings'                       , L) -> decode_NewOrderCross_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('NewOrderList'                         , 'NoAllocs'                            , L) -> decode_NewOrderList_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('NewOrderList'                         , 'NoEvents'                            , L) -> decode_NewOrderList_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('NewOrderList'                         , 'NoNestedPartyIDs'                    , L) -> decode_NewOrderList_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('NewOrderList'                         , 'NoNestedPartySubIDs'                 , L) -> decode_NewOrderList_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('NewOrderList'                         , 'NoOrders'                            , L) -> decode_NewOrderList_grpOrders(L, undefined, #group{name='NoOrders'});
decode_group('NewOrderList'                         , 'NoPartyIDs'                          , L) -> decode_NewOrderList_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('NewOrderList'                         , 'NoPartySubIDs'                       , L) -> decode_NewOrderList_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('NewOrderList'                         , 'NoSecurityAltID'                     , L) -> decode_NewOrderList_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('NewOrderList'                         , 'NoStipulations'                      , L) -> decode_NewOrderList_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('NewOrderList'                         , 'NoTradingSessions'                   , L) -> decode_NewOrderList_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('NewOrderList'                         , 'NoUnderlyingSecurityAltID'           , L) -> decode_NewOrderList_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('NewOrderList'                         , 'NoUnderlyingStips'                   , L) -> decode_NewOrderList_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('NewOrderList'                         , 'NoUnderlyings'                       , L) -> decode_NewOrderList_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('NewOrderMultileg'                     , 'NoAllocs'                            , L) -> decode_NewOrderMultileg_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('NewOrderMultileg'                     , 'NoEvents'                            , L) -> decode_NewOrderMultileg_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('NewOrderMultileg'                     , 'NoLegAllocs'                         , L) -> decode_NewOrderMultileg_grpLegAllocs(L, undefined, #group{name='NoLegAllocs'});
decode_group('NewOrderMultileg'                     , 'NoLegSecurityAltID'                  , L) -> decode_NewOrderMultileg_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('NewOrderMultileg'                     , 'NoLegStipulations'                   , L) -> decode_NewOrderMultileg_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('NewOrderMultileg'                     , 'NoLegs'                              , L) -> decode_NewOrderMultileg_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('NewOrderMultileg'                     , 'NoNested2PartyIDs'                   , L) -> decode_NewOrderMultileg_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('NewOrderMultileg'                     , 'NoNested2PartySubIDs'                , L) -> decode_NewOrderMultileg_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('NewOrderMultileg'                     , 'NoNested3PartyIDs'                   , L) -> decode_NewOrderMultileg_grpNested3PartyIDs(L, undefined, #group{name='NoNested3PartyIDs'});
decode_group('NewOrderMultileg'                     , 'NoNested3PartySubIDs'                , L) -> decode_NewOrderMultileg_grpNested3PartySubIDs(L, undefined, #group{name='NoNested3PartySubIDs'});
decode_group('NewOrderMultileg'                     , 'NoNestedPartyIDs'                    , L) -> decode_NewOrderMultileg_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('NewOrderMultileg'                     , 'NoNestedPartySubIDs'                 , L) -> decode_NewOrderMultileg_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('NewOrderMultileg'                     , 'NoPartyIDs'                          , L) -> decode_NewOrderMultileg_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('NewOrderMultileg'                     , 'NoPartySubIDs'                       , L) -> decode_NewOrderMultileg_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('NewOrderMultileg'                     , 'NoSecurityAltID'                     , L) -> decode_NewOrderMultileg_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('NewOrderMultileg'                     , 'NoTradingSessions'                   , L) -> decode_NewOrderMultileg_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('NewOrderMultileg'                     , 'NoUnderlyingSecurityAltID'           , L) -> decode_NewOrderMultileg_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('NewOrderMultileg'                     , 'NoUnderlyingStips'                   , L) -> decode_NewOrderMultileg_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('NewOrderMultileg'                     , 'NoUnderlyings'                       , L) -> decode_NewOrderMultileg_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('NewOrderSingle'                       , 'NoAllocs'                            , L) -> decode_NewOrderSingle_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('NewOrderSingle'                       , 'NoEvents'                            , L) -> decode_NewOrderSingle_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('NewOrderSingle'                       , 'NoNestedPartyIDs'                    , L) -> decode_NewOrderSingle_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('NewOrderSingle'                       , 'NoNestedPartySubIDs'                 , L) -> decode_NewOrderSingle_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('NewOrderSingle'                       , 'NoPartyIDs'                          , L) -> decode_NewOrderSingle_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('NewOrderSingle'                       , 'NoPartySubIDs'                       , L) -> decode_NewOrderSingle_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('NewOrderSingle'                       , 'NoSecurityAltID'                     , L) -> decode_NewOrderSingle_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('NewOrderSingle'                       , 'NoStipulations'                      , L) -> decode_NewOrderSingle_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('NewOrderSingle'                       , 'NoTradingSessions'                   , L) -> decode_NewOrderSingle_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('NewOrderSingle'                       , 'NoUnderlyingSecurityAltID'           , L) -> decode_NewOrderSingle_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('NewOrderSingle'                       , 'NoUnderlyingStips'                   , L) -> decode_NewOrderSingle_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('NewOrderSingle'                       , 'NoUnderlyings'                       , L) -> decode_NewOrderSingle_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('News'                                 , 'NoEvents'                            , L) -> decode_News_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('News'                                 , 'NoLegSecurityAltID'                  , L) -> decode_News_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('News'                                 , 'NoLegs'                              , L) -> decode_News_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('News'                                 , 'NoLinesOfText'                       , L) -> decode_News_grpLinesOfText(L, undefined, #group{name='NoLinesOfText'});
decode_group('News'                                 , 'NoRelatedSym'                        , L) -> decode_News_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('News'                                 , 'NoRoutingIDs'                        , L) -> decode_News_grpRoutingIDs(L, undefined, #group{name='NoRoutingIDs'});
decode_group('News'                                 , 'NoSecurityAltID'                     , L) -> decode_News_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('News'                                 , 'NoUnderlyingSecurityAltID'           , L) -> decode_News_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('News'                                 , 'NoUnderlyingStips'                   , L) -> decode_News_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('News'                                 , 'NoUnderlyings'                       , L) -> decode_News_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('OrderCancelReplaceRequest'            , 'NoAllocs'                            , L) -> decode_OrderCancelReplaceRequest_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('OrderCancelReplaceRequest'            , 'NoEvents'                            , L) -> decode_OrderCancelReplaceRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('OrderCancelReplaceRequest'            , 'NoNestedPartyIDs'                    , L) -> decode_OrderCancelReplaceRequest_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('OrderCancelReplaceRequest'            , 'NoNestedPartySubIDs'                 , L) -> decode_OrderCancelReplaceRequest_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('OrderCancelReplaceRequest'            , 'NoPartyIDs'                          , L) -> decode_OrderCancelReplaceRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('OrderCancelReplaceRequest'            , 'NoPartySubIDs'                       , L) -> decode_OrderCancelReplaceRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('OrderCancelReplaceRequest'            , 'NoSecurityAltID'                     , L) -> decode_OrderCancelReplaceRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('OrderCancelReplaceRequest'            , 'NoTradingSessions'                   , L) -> decode_OrderCancelReplaceRequest_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('OrderCancelReplaceRequest'            , 'NoUnderlyingSecurityAltID'           , L) -> decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('OrderCancelReplaceRequest'            , 'NoUnderlyingStips'                   , L) -> decode_OrderCancelReplaceRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('OrderCancelReplaceRequest'            , 'NoUnderlyings'                       , L) -> decode_OrderCancelReplaceRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('OrderCancelRequest'                   , 'NoEvents'                            , L) -> decode_OrderCancelRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('OrderCancelRequest'                   , 'NoPartyIDs'                          , L) -> decode_OrderCancelRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('OrderCancelRequest'                   , 'NoPartySubIDs'                       , L) -> decode_OrderCancelRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('OrderCancelRequest'                   , 'NoSecurityAltID'                     , L) -> decode_OrderCancelRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('OrderCancelRequest'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_OrderCancelRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('OrderCancelRequest'                   , 'NoUnderlyingStips'                   , L) -> decode_OrderCancelRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('OrderCancelRequest'                   , 'NoUnderlyings'                       , L) -> decode_OrderCancelRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('OrderMassCancelReport'                , 'NoAffectedOrders'                    , L) -> decode_OrderMassCancelReport_grpAffectedOrders(L, undefined, #group{name='NoAffectedOrders'});
decode_group('OrderMassCancelReport'                , 'NoEvents'                            , L) -> decode_OrderMassCancelReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('OrderMassCancelReport'                , 'NoSecurityAltID'                     , L) -> decode_OrderMassCancelReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('OrderMassCancelReport'                , 'NoUnderlyingSecurityAltID'           , L) -> decode_OrderMassCancelReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('OrderMassCancelReport'                , 'NoUnderlyingStips'                   , L) -> decode_OrderMassCancelReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('OrderMassCancelRequest'               , 'NoEvents'                            , L) -> decode_OrderMassCancelRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('OrderMassCancelRequest'               , 'NoSecurityAltID'                     , L) -> decode_OrderMassCancelRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('OrderMassCancelRequest'               , 'NoUnderlyingSecurityAltID'           , L) -> decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('OrderMassCancelRequest'               , 'NoUnderlyingStips'                   , L) -> decode_OrderMassCancelRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('OrderMassStatusRequest'               , 'NoEvents'                            , L) -> decode_OrderMassStatusRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('OrderMassStatusRequest'               , 'NoPartyIDs'                          , L) -> decode_OrderMassStatusRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('OrderMassStatusRequest'               , 'NoPartySubIDs'                       , L) -> decode_OrderMassStatusRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('OrderMassStatusRequest'               , 'NoSecurityAltID'                     , L) -> decode_OrderMassStatusRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('OrderMassStatusRequest'               , 'NoUnderlyingSecurityAltID'           , L) -> decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('OrderMassStatusRequest'               , 'NoUnderlyingStips'                   , L) -> decode_OrderMassStatusRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('OrderStatusRequest'                   , 'NoEvents'                            , L) -> decode_OrderStatusRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('OrderStatusRequest'                   , 'NoPartyIDs'                          , L) -> decode_OrderStatusRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('OrderStatusRequest'                   , 'NoPartySubIDs'                       , L) -> decode_OrderStatusRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('OrderStatusRequest'                   , 'NoSecurityAltID'                     , L) -> decode_OrderStatusRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('OrderStatusRequest'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_OrderStatusRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('OrderStatusRequest'                   , 'NoUnderlyingStips'                   , L) -> decode_OrderStatusRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('OrderStatusRequest'                   , 'NoUnderlyings'                       , L) -> decode_OrderStatusRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('PositionMaintenanceReport'            , 'NoEvents'                            , L) -> decode_PositionMaintenanceReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('PositionMaintenanceReport'            , 'NoLegSecurityAltID'                  , L) -> decode_PositionMaintenanceReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('PositionMaintenanceReport'            , 'NoLegs'                              , L) -> decode_PositionMaintenanceReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('PositionMaintenanceReport'            , 'NoNestedPartyIDs'                    , L) -> decode_PositionMaintenanceReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('PositionMaintenanceReport'            , 'NoNestedPartySubIDs'                 , L) -> decode_PositionMaintenanceReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('PositionMaintenanceReport'            , 'NoPartyIDs'                          , L) -> decode_PositionMaintenanceReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('PositionMaintenanceReport'            , 'NoPartySubIDs'                       , L) -> decode_PositionMaintenanceReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('PositionMaintenanceReport'            , 'NoPosAmt'                            , L) -> decode_PositionMaintenanceReport_grpPosAmt(L, undefined, #group{name='NoPosAmt'});
decode_group('PositionMaintenanceReport'            , 'NoPositions'                         , L) -> decode_PositionMaintenanceReport_grpPositions(L, undefined, #group{name='NoPositions'});
decode_group('PositionMaintenanceReport'            , 'NoSecurityAltID'                     , L) -> decode_PositionMaintenanceReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('PositionMaintenanceReport'            , 'NoTradingSessions'                   , L) -> decode_PositionMaintenanceReport_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('PositionMaintenanceReport'            , 'NoUnderlyingSecurityAltID'           , L) -> decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('PositionMaintenanceReport'            , 'NoUnderlyingStips'                   , L) -> decode_PositionMaintenanceReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('PositionMaintenanceReport'            , 'NoUnderlyings'                       , L) -> decode_PositionMaintenanceReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('PositionMaintenanceRequest'           , 'NoEvents'                            , L) -> decode_PositionMaintenanceRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('PositionMaintenanceRequest'           , 'NoLegSecurityAltID'                  , L) -> decode_PositionMaintenanceRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('PositionMaintenanceRequest'           , 'NoLegs'                              , L) -> decode_PositionMaintenanceRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('PositionMaintenanceRequest'           , 'NoNestedPartyIDs'                    , L) -> decode_PositionMaintenanceRequest_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('PositionMaintenanceRequest'           , 'NoNestedPartySubIDs'                 , L) -> decode_PositionMaintenanceRequest_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('PositionMaintenanceRequest'           , 'NoPartyIDs'                          , L) -> decode_PositionMaintenanceRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('PositionMaintenanceRequest'           , 'NoPartySubIDs'                       , L) -> decode_PositionMaintenanceRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('PositionMaintenanceRequest'           , 'NoPositions'                         , L) -> decode_PositionMaintenanceRequest_grpPositions(L, undefined, #group{name='NoPositions'});
decode_group('PositionMaintenanceRequest'           , 'NoSecurityAltID'                     , L) -> decode_PositionMaintenanceRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('PositionMaintenanceRequest'           , 'NoTradingSessions'                   , L) -> decode_PositionMaintenanceRequest_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('PositionMaintenanceRequest'           , 'NoUnderlyingSecurityAltID'           , L) -> decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('PositionMaintenanceRequest'           , 'NoUnderlyingStips'                   , L) -> decode_PositionMaintenanceRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('PositionMaintenanceRequest'           , 'NoUnderlyings'                       , L) -> decode_PositionMaintenanceRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('PositionReport'                       , 'NoEvents'                            , L) -> decode_PositionReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('PositionReport'                       , 'NoLegSecurityAltID'                  , L) -> decode_PositionReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('PositionReport'                       , 'NoLegs'                              , L) -> decode_PositionReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('PositionReport'                       , 'NoNestedPartyIDs'                    , L) -> decode_PositionReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('PositionReport'                       , 'NoNestedPartySubIDs'                 , L) -> decode_PositionReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('PositionReport'                       , 'NoPartyIDs'                          , L) -> decode_PositionReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('PositionReport'                       , 'NoPartySubIDs'                       , L) -> decode_PositionReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('PositionReport'                       , 'NoPosAmt'                            , L) -> decode_PositionReport_grpPosAmt(L, undefined, #group{name='NoPosAmt'});
decode_group('PositionReport'                       , 'NoPositions'                         , L) -> decode_PositionReport_grpPositions(L, undefined, #group{name='NoPositions'});
decode_group('PositionReport'                       , 'NoSecurityAltID'                     , L) -> decode_PositionReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('PositionReport'                       , 'NoUnderlyingSecurityAltID'           , L) -> decode_PositionReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('PositionReport'                       , 'NoUnderlyingStips'                   , L) -> decode_PositionReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('PositionReport'                       , 'NoUnderlyings'                       , L) -> decode_PositionReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('Quote'                                , 'NoEvents'                            , L) -> decode_Quote_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('Quote'                                , 'NoLegSecurityAltID'                  , L) -> decode_Quote_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('Quote'                                , 'NoLegStipulations'                   , L) -> decode_Quote_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('Quote'                                , 'NoLegs'                              , L) -> decode_Quote_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('Quote'                                , 'NoNestedPartyIDs'                    , L) -> decode_Quote_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('Quote'                                , 'NoNestedPartySubIDs'                 , L) -> decode_Quote_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('Quote'                                , 'NoPartyIDs'                          , L) -> decode_Quote_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('Quote'                                , 'NoPartySubIDs'                       , L) -> decode_Quote_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('Quote'                                , 'NoQuoteQualifiers'                   , L) -> decode_Quote_grpQuoteQualifiers(L, undefined, #group{name='NoQuoteQualifiers'});
decode_group('Quote'                                , 'NoSecurityAltID'                     , L) -> decode_Quote_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('Quote'                                , 'NoStipulations'                      , L) -> decode_Quote_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('Quote'                                , 'NoUnderlyingSecurityAltID'           , L) -> decode_Quote_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('Quote'                                , 'NoUnderlyingStips'                   , L) -> decode_Quote_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('Quote'                                , 'NoUnderlyings'                       , L) -> decode_Quote_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('QuoteCancel'                          , 'NoEvents'                            , L) -> decode_QuoteCancel_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('QuoteCancel'                          , 'NoLegSecurityAltID'                  , L) -> decode_QuoteCancel_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('QuoteCancel'                          , 'NoLegs'                              , L) -> decode_QuoteCancel_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('QuoteCancel'                          , 'NoPartyIDs'                          , L) -> decode_QuoteCancel_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('QuoteCancel'                          , 'NoPartySubIDs'                       , L) -> decode_QuoteCancel_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('QuoteCancel'                          , 'NoQuoteEntries'                      , L) -> decode_QuoteCancel_grpQuoteEntries(L, undefined, #group{name='NoQuoteEntries'});
decode_group('QuoteCancel'                          , 'NoSecurityAltID'                     , L) -> decode_QuoteCancel_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('QuoteCancel'                          , 'NoUnderlyingSecurityAltID'           , L) -> decode_QuoteCancel_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('QuoteCancel'                          , 'NoUnderlyingStips'                   , L) -> decode_QuoteCancel_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('QuoteCancel'                          , 'NoUnderlyings'                       , L) -> decode_QuoteCancel_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('QuoteRequest'                         , 'NoEvents'                            , L) -> decode_QuoteRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('QuoteRequest'                         , 'NoLegSecurityAltID'                  , L) -> decode_QuoteRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('QuoteRequest'                         , 'NoLegStipulations'                   , L) -> decode_QuoteRequest_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('QuoteRequest'                         , 'NoLegs'                              , L) -> decode_QuoteRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('QuoteRequest'                         , 'NoNestedPartyIDs'                    , L) -> decode_QuoteRequest_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('QuoteRequest'                         , 'NoNestedPartySubIDs'                 , L) -> decode_QuoteRequest_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('QuoteRequest'                         , 'NoPartyIDs'                          , L) -> decode_QuoteRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('QuoteRequest'                         , 'NoPartySubIDs'                       , L) -> decode_QuoteRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('QuoteRequest'                         , 'NoQuoteQualifiers'                   , L) -> decode_QuoteRequest_grpQuoteQualifiers(L, undefined, #group{name='NoQuoteQualifiers'});
decode_group('QuoteRequest'                         , 'NoRelatedSym'                        , L) -> decode_QuoteRequest_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('QuoteRequest'                         , 'NoSecurityAltID'                     , L) -> decode_QuoteRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('QuoteRequest'                         , 'NoStipulations'                      , L) -> decode_QuoteRequest_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('QuoteRequest'                         , 'NoUnderlyingSecurityAltID'           , L) -> decode_QuoteRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('QuoteRequest'                         , 'NoUnderlyingStips'                   , L) -> decode_QuoteRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('QuoteRequest'                         , 'NoUnderlyings'                       , L) -> decode_QuoteRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('QuoteRequestReject'                   , 'NoEvents'                            , L) -> decode_QuoteRequestReject_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('QuoteRequestReject'                   , 'NoLegSecurityAltID'                  , L) -> decode_QuoteRequestReject_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('QuoteRequestReject'                   , 'NoLegStipulations'                   , L) -> decode_QuoteRequestReject_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('QuoteRequestReject'                   , 'NoLegs'                              , L) -> decode_QuoteRequestReject_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('QuoteRequestReject'                   , 'NoNestedPartyIDs'                    , L) -> decode_QuoteRequestReject_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('QuoteRequestReject'                   , 'NoNestedPartySubIDs'                 , L) -> decode_QuoteRequestReject_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('QuoteRequestReject'                   , 'NoPartyIDs'                          , L) -> decode_QuoteRequestReject_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('QuoteRequestReject'                   , 'NoPartySubIDs'                       , L) -> decode_QuoteRequestReject_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('QuoteRequestReject'                   , 'NoQuoteQualifiers'                   , L) -> decode_QuoteRequestReject_grpQuoteQualifiers(L, undefined, #group{name='NoQuoteQualifiers'});
decode_group('QuoteRequestReject'                   , 'NoRelatedSym'                        , L) -> decode_QuoteRequestReject_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('QuoteRequestReject'                   , 'NoSecurityAltID'                     , L) -> decode_QuoteRequestReject_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('QuoteRequestReject'                   , 'NoStipulations'                      , L) -> decode_QuoteRequestReject_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('QuoteRequestReject'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_QuoteRequestReject_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('QuoteRequestReject'                   , 'NoUnderlyingStips'                   , L) -> decode_QuoteRequestReject_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('QuoteRequestReject'                   , 'NoUnderlyings'                       , L) -> decode_QuoteRequestReject_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('QuoteResponse'                        , 'NoEvents'                            , L) -> decode_QuoteResponse_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('QuoteResponse'                        , 'NoLegSecurityAltID'                  , L) -> decode_QuoteResponse_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('QuoteResponse'                        , 'NoLegStipulations'                   , L) -> decode_QuoteResponse_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('QuoteResponse'                        , 'NoLegs'                              , L) -> decode_QuoteResponse_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('QuoteResponse'                        , 'NoNestedPartyIDs'                    , L) -> decode_QuoteResponse_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('QuoteResponse'                        , 'NoNestedPartySubIDs'                 , L) -> decode_QuoteResponse_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('QuoteResponse'                        , 'NoPartyIDs'                          , L) -> decode_QuoteResponse_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('QuoteResponse'                        , 'NoPartySubIDs'                       , L) -> decode_QuoteResponse_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('QuoteResponse'                        , 'NoQuoteQualifiers'                   , L) -> decode_QuoteResponse_grpQuoteQualifiers(L, undefined, #group{name='NoQuoteQualifiers'});
decode_group('QuoteResponse'                        , 'NoSecurityAltID'                     , L) -> decode_QuoteResponse_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('QuoteResponse'                        , 'NoStipulations'                      , L) -> decode_QuoteResponse_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('QuoteResponse'                        , 'NoUnderlyingSecurityAltID'           , L) -> decode_QuoteResponse_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('QuoteResponse'                        , 'NoUnderlyingStips'                   , L) -> decode_QuoteResponse_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('QuoteResponse'                        , 'NoUnderlyings'                       , L) -> decode_QuoteResponse_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('QuoteStatusReport'                    , 'NoEvents'                            , L) -> decode_QuoteStatusReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('QuoteStatusReport'                    , 'NoLegSecurityAltID'                  , L) -> decode_QuoteStatusReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('QuoteStatusReport'                    , 'NoLegStipulations'                   , L) -> decode_QuoteStatusReport_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('QuoteStatusReport'                    , 'NoLegs'                              , L) -> decode_QuoteStatusReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('QuoteStatusReport'                    , 'NoNestedPartyIDs'                    , L) -> decode_QuoteStatusReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('QuoteStatusReport'                    , 'NoNestedPartySubIDs'                 , L) -> decode_QuoteStatusReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('QuoteStatusReport'                    , 'NoPartyIDs'                          , L) -> decode_QuoteStatusReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('QuoteStatusReport'                    , 'NoPartySubIDs'                       , L) -> decode_QuoteStatusReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('QuoteStatusReport'                    , 'NoQuoteQualifiers'                   , L) -> decode_QuoteStatusReport_grpQuoteQualifiers(L, undefined, #group{name='NoQuoteQualifiers'});
decode_group('QuoteStatusReport'                    , 'NoSecurityAltID'                     , L) -> decode_QuoteStatusReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('QuoteStatusReport'                    , 'NoStipulations'                      , L) -> decode_QuoteStatusReport_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('QuoteStatusReport'                    , 'NoUnderlyingSecurityAltID'           , L) -> decode_QuoteStatusReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('QuoteStatusReport'                    , 'NoUnderlyingStips'                   , L) -> decode_QuoteStatusReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('QuoteStatusReport'                    , 'NoUnderlyings'                       , L) -> decode_QuoteStatusReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('QuoteStatusRequest'                   , 'NoEvents'                            , L) -> decode_QuoteStatusRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('QuoteStatusRequest'                   , 'NoLegSecurityAltID'                  , L) -> decode_QuoteStatusRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('QuoteStatusRequest'                   , 'NoLegs'                              , L) -> decode_QuoteStatusRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('QuoteStatusRequest'                   , 'NoPartyIDs'                          , L) -> decode_QuoteStatusRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('QuoteStatusRequest'                   , 'NoPartySubIDs'                       , L) -> decode_QuoteStatusRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('QuoteStatusRequest'                   , 'NoSecurityAltID'                     , L) -> decode_QuoteStatusRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('QuoteStatusRequest'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_QuoteStatusRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('QuoteStatusRequest'                   , 'NoUnderlyingStips'                   , L) -> decode_QuoteStatusRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('QuoteStatusRequest'                   , 'NoUnderlyings'                       , L) -> decode_QuoteStatusRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('RFQRequest'                           , 'NoEvents'                            , L) -> decode_RFQRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('RFQRequest'                           , 'NoLegSecurityAltID'                  , L) -> decode_RFQRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('RFQRequest'                           , 'NoLegs'                              , L) -> decode_RFQRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('RFQRequest'                           , 'NoRelatedSym'                        , L) -> decode_RFQRequest_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('RFQRequest'                           , 'NoSecurityAltID'                     , L) -> decode_RFQRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('RFQRequest'                           , 'NoUnderlyingSecurityAltID'           , L) -> decode_RFQRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('RFQRequest'                           , 'NoUnderlyingStips'                   , L) -> decode_RFQRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('RFQRequest'                           , 'NoUnderlyings'                       , L) -> decode_RFQRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('RegistrationInstructions'             , 'NoDistribInsts'                      , L) -> decode_RegistrationInstructions_grpDistribInsts(L, undefined, #group{name='NoDistribInsts'});
decode_group('RegistrationInstructions'             , 'NoNestedPartyIDs'                    , L) -> decode_RegistrationInstructions_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('RegistrationInstructions'             , 'NoNestedPartySubIDs'                 , L) -> decode_RegistrationInstructions_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('RegistrationInstructions'             , 'NoPartyIDs'                          , L) -> decode_RegistrationInstructions_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('RegistrationInstructions'             , 'NoPartySubIDs'                       , L) -> decode_RegistrationInstructions_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('RegistrationInstructions'             , 'NoRegistDtls'                        , L) -> decode_RegistrationInstructions_grpRegistDtls(L, undefined, #group{name='NoRegistDtls'});
decode_group('RegistrationInstructionsResponse'     , 'NoPartyIDs'                          , L) -> decode_RegistrationInstructionsResponse_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('RegistrationInstructionsResponse'     , 'NoPartySubIDs'                       , L) -> decode_RegistrationInstructionsResponse_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('RequestForPositions'                  , 'NoEvents'                            , L) -> decode_RequestForPositions_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('RequestForPositions'                  , 'NoLegSecurityAltID'                  , L) -> decode_RequestForPositions_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('RequestForPositions'                  , 'NoLegs'                              , L) -> decode_RequestForPositions_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('RequestForPositions'                  , 'NoPartyIDs'                          , L) -> decode_RequestForPositions_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('RequestForPositions'                  , 'NoPartySubIDs'                       , L) -> decode_RequestForPositions_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('RequestForPositions'                  , 'NoSecurityAltID'                     , L) -> decode_RequestForPositions_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('RequestForPositions'                  , 'NoTradingSessions'                   , L) -> decode_RequestForPositions_grpTradingSessions(L, undefined, #group{name='NoTradingSessions'});
decode_group('RequestForPositions'                  , 'NoUnderlyingSecurityAltID'           , L) -> decode_RequestForPositions_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('RequestForPositions'                  , 'NoUnderlyingStips'                   , L) -> decode_RequestForPositions_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('RequestForPositions'                  , 'NoUnderlyings'                       , L) -> decode_RequestForPositions_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('RequestForPositionsAck'               , 'NoEvents'                            , L) -> decode_RequestForPositionsAck_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('RequestForPositionsAck'               , 'NoLegSecurityAltID'                  , L) -> decode_RequestForPositionsAck_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('RequestForPositionsAck'               , 'NoLegs'                              , L) -> decode_RequestForPositionsAck_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('RequestForPositionsAck'               , 'NoPartyIDs'                          , L) -> decode_RequestForPositionsAck_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('RequestForPositionsAck'               , 'NoPartySubIDs'                       , L) -> decode_RequestForPositionsAck_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('RequestForPositionsAck'               , 'NoSecurityAltID'                     , L) -> decode_RequestForPositionsAck_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('RequestForPositionsAck'               , 'NoUnderlyingSecurityAltID'           , L) -> decode_RequestForPositionsAck_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('RequestForPositionsAck'               , 'NoUnderlyingStips'                   , L) -> decode_RequestForPositionsAck_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('RequestForPositionsAck'               , 'NoUnderlyings'                       , L) -> decode_RequestForPositionsAck_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityDefinition'                   , 'NoEvents'                            , L) -> decode_SecurityDefinition_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('SecurityDefinition'                   , 'NoInstrAttrib'                       , L) -> decode_SecurityDefinition_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('SecurityDefinition'                   , 'NoLegSecurityAltID'                  , L) -> decode_SecurityDefinition_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('SecurityDefinition'                   , 'NoLegs'                              , L) -> decode_SecurityDefinition_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('SecurityDefinition'                   , 'NoSecurityAltID'                     , L) -> decode_SecurityDefinition_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('SecurityDefinition'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_SecurityDefinition_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('SecurityDefinition'                   , 'NoUnderlyingStips'                   , L) -> decode_SecurityDefinition_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('SecurityDefinition'                   , 'NoUnderlyings'                       , L) -> decode_SecurityDefinition_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityDefinitionRequest'            , 'NoEvents'                            , L) -> decode_SecurityDefinitionRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('SecurityDefinitionRequest'            , 'NoInstrAttrib'                       , L) -> decode_SecurityDefinitionRequest_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('SecurityDefinitionRequest'            , 'NoLegSecurityAltID'                  , L) -> decode_SecurityDefinitionRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('SecurityDefinitionRequest'            , 'NoLegs'                              , L) -> decode_SecurityDefinitionRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('SecurityDefinitionRequest'            , 'NoSecurityAltID'                     , L) -> decode_SecurityDefinitionRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('SecurityDefinitionRequest'            , 'NoUnderlyingSecurityAltID'           , L) -> decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('SecurityDefinitionRequest'            , 'NoUnderlyingStips'                   , L) -> decode_SecurityDefinitionRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('SecurityDefinitionRequest'            , 'NoUnderlyings'                       , L) -> decode_SecurityDefinitionRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityList'                         , 'NoEvents'                            , L) -> decode_SecurityList_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('SecurityList'                         , 'NoInstrAttrib'                       , L) -> decode_SecurityList_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('SecurityList'                         , 'NoLegSecurityAltID'                  , L) -> decode_SecurityList_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('SecurityList'                         , 'NoLegStipulations'                   , L) -> decode_SecurityList_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('SecurityList'                         , 'NoLegs'                              , L) -> decode_SecurityList_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('SecurityList'                         , 'NoRelatedSym'                        , L) -> decode_SecurityList_grpRelatedSym(L, undefined, #group{name='NoRelatedSym'});
decode_group('SecurityList'                         , 'NoSecurityAltID'                     , L) -> decode_SecurityList_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('SecurityList'                         , 'NoStipulations'                      , L) -> decode_SecurityList_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('SecurityList'                         , 'NoUnderlyingSecurityAltID'           , L) -> decode_SecurityList_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('SecurityList'                         , 'NoUnderlyingStips'                   , L) -> decode_SecurityList_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('SecurityList'                         , 'NoUnderlyings'                       , L) -> decode_SecurityList_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityListRequest'                  , 'NoEvents'                            , L) -> decode_SecurityListRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('SecurityListRequest'                  , 'NoInstrAttrib'                       , L) -> decode_SecurityListRequest_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('SecurityListRequest'                  , 'NoLegSecurityAltID'                  , L) -> decode_SecurityListRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('SecurityListRequest'                  , 'NoLegs'                              , L) -> decode_SecurityListRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('SecurityListRequest'                  , 'NoSecurityAltID'                     , L) -> decode_SecurityListRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('SecurityListRequest'                  , 'NoUnderlyingSecurityAltID'           , L) -> decode_SecurityListRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('SecurityListRequest'                  , 'NoUnderlyingStips'                   , L) -> decode_SecurityListRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('SecurityListRequest'                  , 'NoUnderlyings'                       , L) -> decode_SecurityListRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityStatus'                       , 'NoEvents'                            , L) -> decode_SecurityStatus_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('SecurityStatus'                       , 'NoInstrAttrib'                       , L) -> decode_SecurityStatus_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('SecurityStatus'                       , 'NoLegSecurityAltID'                  , L) -> decode_SecurityStatus_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('SecurityStatus'                       , 'NoLegs'                              , L) -> decode_SecurityStatus_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('SecurityStatus'                       , 'NoSecurityAltID'                     , L) -> decode_SecurityStatus_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('SecurityStatus'                       , 'NoUnderlyingSecurityAltID'           , L) -> decode_SecurityStatus_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('SecurityStatus'                       , 'NoUnderlyingStips'                   , L) -> decode_SecurityStatus_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('SecurityStatus'                       , 'NoUnderlyings'                       , L) -> decode_SecurityStatus_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityStatusRequest'                , 'NoEvents'                            , L) -> decode_SecurityStatusRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('SecurityStatusRequest'                , 'NoInstrAttrib'                       , L) -> decode_SecurityStatusRequest_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('SecurityStatusRequest'                , 'NoLegSecurityAltID'                  , L) -> decode_SecurityStatusRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('SecurityStatusRequest'                , 'NoLegs'                              , L) -> decode_SecurityStatusRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('SecurityStatusRequest'                , 'NoSecurityAltID'                     , L) -> decode_SecurityStatusRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('SecurityStatusRequest'                , 'NoUnderlyingSecurityAltID'           , L) -> decode_SecurityStatusRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('SecurityStatusRequest'                , 'NoUnderlyingStips'                   , L) -> decode_SecurityStatusRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('SecurityStatusRequest'                , 'NoUnderlyings'                       , L) -> decode_SecurityStatusRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('SecurityTypes'                        , 'NoSecurityTypes'                     , L) -> decode_SecurityTypes_grpSecurityTypes(L, undefined, #group{name='NoSecurityTypes'});
decode_group('SettlementInstructionRequest'         , 'NoPartyIDs'                          , L) -> decode_SettlementInstructionRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('SettlementInstructionRequest'         , 'NoPartySubIDs'                       , L) -> decode_SettlementInstructionRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('SettlementInstructions'               , 'NoDlvyInst'                          , L) -> decode_SettlementInstructions_grpDlvyInst(L, undefined, #group{name='NoDlvyInst'});
decode_group('SettlementInstructions'               , 'NoPartyIDs'                          , L) -> decode_SettlementInstructions_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('SettlementInstructions'               , 'NoPartySubIDs'                       , L) -> decode_SettlementInstructions_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('SettlementInstructions'               , 'NoSettlInst'                         , L) -> decode_SettlementInstructions_grpSettlInst(L, undefined, #group{name='NoSettlInst'});
decode_group('SettlementInstructions'               , 'NoSettlPartyIDs'                     , L) -> decode_SettlementInstructions_grpSettlPartyIDs(L, undefined, #group{name='NoSettlPartyIDs'});
decode_group('SettlementInstructions'               , 'NoSettlPartySubIDs'                  , L) -> decode_SettlementInstructions_grpSettlPartySubIDs(L, undefined, #group{name='NoSettlPartySubIDs'});
decode_group('TradeCaptureReport'                   , 'NoAllocs'                            , L) -> decode_TradeCaptureReport_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('TradeCaptureReport'                   , 'NoClearingInstructions'              , L) -> decode_TradeCaptureReport_grpClearingInstructions(L, undefined, #group{name='NoClearingInstructions'});
decode_group('TradeCaptureReport'                   , 'NoContAmts'                          , L) -> decode_TradeCaptureReport_grpContAmts(L, undefined, #group{name='NoContAmts'});
decode_group('TradeCaptureReport'                   , 'NoEvents'                            , L) -> decode_TradeCaptureReport_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('TradeCaptureReport'                   , 'NoLegSecurityAltID'                  , L) -> decode_TradeCaptureReport_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('TradeCaptureReport'                   , 'NoLegStipulations'                   , L) -> decode_TradeCaptureReport_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('TradeCaptureReport'                   , 'NoLegs'                              , L) -> decode_TradeCaptureReport_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('TradeCaptureReport'                   , 'NoMiscFees'                          , L) -> decode_TradeCaptureReport_grpMiscFees(L, undefined, #group{name='NoMiscFees'});
decode_group('TradeCaptureReport'                   , 'NoNested2PartyIDs'                   , L) -> decode_TradeCaptureReport_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('TradeCaptureReport'                   , 'NoNested2PartySubIDs'                , L) -> decode_TradeCaptureReport_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('TradeCaptureReport'                   , 'NoNestedPartyIDs'                    , L) -> decode_TradeCaptureReport_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('TradeCaptureReport'                   , 'NoNestedPartySubIDs'                 , L) -> decode_TradeCaptureReport_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('TradeCaptureReport'                   , 'NoPartyIDs'                          , L) -> decode_TradeCaptureReport_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('TradeCaptureReport'                   , 'NoPartySubIDs'                       , L) -> decode_TradeCaptureReport_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('TradeCaptureReport'                   , 'NoPosAmt'                            , L) -> decode_TradeCaptureReport_grpPosAmt(L, undefined, #group{name='NoPosAmt'});
decode_group('TradeCaptureReport'                   , 'NoSecurityAltID'                     , L) -> decode_TradeCaptureReport_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('TradeCaptureReport'                   , 'NoSides'                             , L) -> decode_TradeCaptureReport_grpSides(L, undefined, #group{name='NoSides'});
decode_group('TradeCaptureReport'                   , 'NoStipulations'                      , L) -> decode_TradeCaptureReport_grpStipulations(L, undefined, #group{name='NoStipulations'});
decode_group('TradeCaptureReport'                   , 'NoTrdRegTimestamps'                  , L) -> decode_TradeCaptureReport_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('TradeCaptureReport'                   , 'NoUnderlyingSecurityAltID'           , L) -> decode_TradeCaptureReport_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('TradeCaptureReport'                   , 'NoUnderlyingStips'                   , L) -> decode_TradeCaptureReport_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('TradeCaptureReport'                   , 'NoUnderlyings'                       , L) -> decode_TradeCaptureReport_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('TradeCaptureReportAck'                , 'NoAllocs'                            , L) -> decode_TradeCaptureReportAck_grpAllocs(L, undefined, #group{name='NoAllocs'});
decode_group('TradeCaptureReportAck'                , 'NoEvents'                            , L) -> decode_TradeCaptureReportAck_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('TradeCaptureReportAck'                , 'NoLegSecurityAltID'                  , L) -> decode_TradeCaptureReportAck_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('TradeCaptureReportAck'                , 'NoLegStipulations'                   , L) -> decode_TradeCaptureReportAck_grpLegStipulations(L, undefined, #group{name='NoLegStipulations'});
decode_group('TradeCaptureReportAck'                , 'NoLegs'                              , L) -> decode_TradeCaptureReportAck_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('TradeCaptureReportAck'                , 'NoNested2PartyIDs'                   , L) -> decode_TradeCaptureReportAck_grpNested2PartyIDs(L, undefined, #group{name='NoNested2PartyIDs'});
decode_group('TradeCaptureReportAck'                , 'NoNested2PartySubIDs'                , L) -> decode_TradeCaptureReportAck_grpNested2PartySubIDs(L, undefined, #group{name='NoNested2PartySubIDs'});
decode_group('TradeCaptureReportAck'                , 'NoNestedPartyIDs'                    , L) -> decode_TradeCaptureReportAck_grpNestedPartyIDs(L, undefined, #group{name='NoNestedPartyIDs'});
decode_group('TradeCaptureReportAck'                , 'NoNestedPartySubIDs'                 , L) -> decode_TradeCaptureReportAck_grpNestedPartySubIDs(L, undefined, #group{name='NoNestedPartySubIDs'});
decode_group('TradeCaptureReportAck'                , 'NoSecurityAltID'                     , L) -> decode_TradeCaptureReportAck_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('TradeCaptureReportAck'                , 'NoTrdRegTimestamps'                  , L) -> decode_TradeCaptureReportAck_grpTrdRegTimestamps(L, undefined, #group{name='NoTrdRegTimestamps'});
decode_group('TradeCaptureReportRequest'            , 'NoDates'                             , L) -> decode_TradeCaptureReportRequest_grpDates(L, undefined, #group{name='NoDates'});
decode_group('TradeCaptureReportRequest'            , 'NoEvents'                            , L) -> decode_TradeCaptureReportRequest_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('TradeCaptureReportRequest'            , 'NoInstrAttrib'                       , L) -> decode_TradeCaptureReportRequest_grpInstrAttrib(L, undefined, #group{name='NoInstrAttrib'});
decode_group('TradeCaptureReportRequest'            , 'NoLegSecurityAltID'                  , L) -> decode_TradeCaptureReportRequest_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('TradeCaptureReportRequest'            , 'NoLegs'                              , L) -> decode_TradeCaptureReportRequest_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('TradeCaptureReportRequest'            , 'NoPartyIDs'                          , L) -> decode_TradeCaptureReportRequest_grpPartyIDs(L, undefined, #group{name='NoPartyIDs'});
decode_group('TradeCaptureReportRequest'            , 'NoPartySubIDs'                       , L) -> decode_TradeCaptureReportRequest_grpPartySubIDs(L, undefined, #group{name='NoPartySubIDs'});
decode_group('TradeCaptureReportRequest'            , 'NoSecurityAltID'                     , L) -> decode_TradeCaptureReportRequest_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('TradeCaptureReportRequest'            , 'NoUnderlyingSecurityAltID'           , L) -> decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('TradeCaptureReportRequest'            , 'NoUnderlyingStips'                   , L) -> decode_TradeCaptureReportRequest_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('TradeCaptureReportRequest'            , 'NoUnderlyings'                       , L) -> decode_TradeCaptureReportRequest_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('TradeCaptureReportRequestAck'         , 'NoEvents'                            , L) -> decode_TradeCaptureReportRequestAck_grpEvents(L, undefined, #group{name='NoEvents'});
decode_group('TradeCaptureReportRequestAck'         , 'NoLegSecurityAltID'                  , L) -> decode_TradeCaptureReportRequestAck_grpLegSecurityAltID(L, undefined, #group{name='NoLegSecurityAltID'});
decode_group('TradeCaptureReportRequestAck'         , 'NoLegs'                              , L) -> decode_TradeCaptureReportRequestAck_grpLegs(L, undefined, #group{name='NoLegs'});
decode_group('TradeCaptureReportRequestAck'         , 'NoSecurityAltID'                     , L) -> decode_TradeCaptureReportRequestAck_grpSecurityAltID(L, undefined, #group{name='NoSecurityAltID'});
decode_group('TradeCaptureReportRequestAck'         , 'NoUnderlyingSecurityAltID'           , L) -> decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID(L, undefined, #group{name='NoUnderlyingSecurityAltID'});
decode_group('TradeCaptureReportRequestAck'         , 'NoUnderlyingStips'                   , L) -> decode_TradeCaptureReportRequestAck_grpUnderlyingStips(L, undefined, #group{name='NoUnderlyingStips'});
decode_group('TradeCaptureReportRequestAck'         , 'NoUnderlyings'                       , L) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(L, undefined, #group{name='NoUnderlyings'});
decode_group('header'                               , 'NoHops'                              , L) -> decode_header_grpHops(L, undefined, #group{name='NoHops'});
decode_group(_, _, _) -> false.

%% Parse Group: grpEvents in message Advertisement
decode_Advertisement_grpEvents(L, R) -> decode_Advertisement_grpEvents(L, undefined, R).
decode_Advertisement_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_Advertisement_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_Advertisement_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_Advertisement_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_Advertisement_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message Advertisement
decode_Advertisement_grpLegSecurityAltID(L, R) -> decode_Advertisement_grpLegSecurityAltID(L, undefined, R).
decode_Advertisement_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_Advertisement_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_Advertisement_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message Advertisement
decode_Advertisement_grpLegs(L, R) -> decode_Advertisement_grpLegs(L, undefined, R).
decode_Advertisement_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_Advertisement_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_Advertisement_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_Advertisement_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_Advertisement_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_Advertisement_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_Advertisement_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_Advertisement_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_Advertisement_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_Advertisement_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_Advertisement_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_Advertisement_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_Advertisement_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_Advertisement_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_Advertisement_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_Advertisement_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_Advertisement_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_Advertisement_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_Advertisement_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_Advertisement_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_Advertisement_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_Advertisement_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_Advertisement_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_Advertisement_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_Advertisement_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_Advertisement_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_Advertisement_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_Advertisement_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_Advertisement_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_Advertisement_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_Advertisement_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_Advertisement_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_Advertisement_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_Advertisement_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_Advertisement_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_Advertisement_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_Advertisement_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_Advertisement_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_Advertisement_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_Advertisement_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_Advertisement_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_Advertisement_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_Advertisement_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message Advertisement
decode_Advertisement_grpSecurityAltID(L, R) -> decode_Advertisement_grpSecurityAltID(L, undefined, R).
decode_Advertisement_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_Advertisement_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_Advertisement_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message Advertisement
decode_Advertisement_grpUnderlyingSecurityAltID(L, R) -> decode_Advertisement_grpUnderlyingSecurityAltID(L, undefined, R).
decode_Advertisement_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_Advertisement_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_Advertisement_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message Advertisement
decode_Advertisement_grpUnderlyingStips(L, R) -> decode_Advertisement_grpUnderlyingStips(L, undefined, R).
decode_Advertisement_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_Advertisement_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_Advertisement_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message Advertisement
decode_Advertisement_grpUnderlyings(L, R) -> decode_Advertisement_grpUnderlyings(L, undefined, R).
decode_Advertisement_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Advertisement_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_Advertisement_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_Advertisement_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_Advertisement_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_Advertisement_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_Advertisement_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_Advertisement_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_Advertisement_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Advertisement_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_Advertisement_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message AllocationInstruction
decode_AllocationInstruction_grpAllocs(L, R) -> decode_AllocationInstruction_grpAllocs(L, undefined, R).
decode_AllocationInstruction_grpAllocs([{Delim                      ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpAllocs([{'AllocAccount'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'            => V}});
decode_AllocationInstruction_grpAllocs([{'AllocAcctIDSource'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'       => V}});
decode_AllocationInstruction_grpAllocs([{'MatchStatus'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'MatchStatus'             => V}});
decode_AllocationInstruction_grpAllocs([{'AllocPrice'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocPrice'              => V}});
decode_AllocationInstruction_grpAllocs([{'AllocQty'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'                => V}});
decode_AllocationInstruction_grpAllocs([{'IndividualAllocID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'       => V}});
decode_AllocationInstruction_grpAllocs([{'ProcessCode'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'ProcessCode'             => V}});
decode_AllocationInstruction_grpAllocs([{'NoNestedPartyIDs'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'        => V}});
decode_AllocationInstruction_grpAllocs([{'NotifyBrokerOfCredit'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NotifyBrokerOfCredit'    => V}});
decode_AllocationInstruction_grpAllocs([{'AllocHandlInst'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocHandlInst'          => V}});
decode_AllocationInstruction_grpAllocs([{'AllocText'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocText'               => V}});
decode_AllocationInstruction_grpAllocs([{'EncodedAllocTextLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocTextLen'     => V}});
decode_AllocationInstruction_grpAllocs([{'EncodedAllocText'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocText'        => V}});
decode_AllocationInstruction_grpAllocs([{'Commission'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'Commission'              => V}});
decode_AllocationInstruction_grpAllocs([{'CommType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'CommType'                => V}});
decode_AllocationInstruction_grpAllocs([{'CommCurrency'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'CommCurrency'            => V}});
decode_AllocationInstruction_grpAllocs([{'FundRenewWaiv'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'           => V}});
decode_AllocationInstruction_grpAllocs([{'AllocAvgPx'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAvgPx'              => V}});
decode_AllocationInstruction_grpAllocs([{'AllocNetMoney'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocNetMoney'           => V}});
decode_AllocationInstruction_grpAllocs([{'SettlCurrAmt'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrAmt'            => V}});
decode_AllocationInstruction_grpAllocs([{'AllocSettlCurrAmt'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrAmt'       => V}});
decode_AllocationInstruction_grpAllocs([{'SettlCurrency'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrency'           => V}});
decode_AllocationInstruction_grpAllocs([{'AllocSettlCurrency'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency'      => V}});
decode_AllocationInstruction_grpAllocs([{'SettlCurrFxRate'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrFxRate'         => V}});
decode_AllocationInstruction_grpAllocs([{'SettlCurrFxRateCalc'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrFxRateCalc'     => V}});
decode_AllocationInstruction_grpAllocs([{'AllocAccruedInterestAmt'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccruedInterestAmt' => V}});
decode_AllocationInstruction_grpAllocs([{'AllocInterestAtMaturity'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocInterestAtMaturity' => V}});
decode_AllocationInstruction_grpAllocs([{'NoMiscFees'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoMiscFees'              => V}});
decode_AllocationInstruction_grpAllocs([{'NoClearingInstructions'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoClearingInstructions'  => V}});
decode_AllocationInstruction_grpAllocs([{'AllocSettlInstType'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlInstType'      => V}});
decode_AllocationInstruction_grpAllocs([{'SettlDeliveryType'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlDeliveryType'       => V}});
decode_AllocationInstruction_grpAllocs([{'StandInstDbType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'StandInstDbType'         => V}});
decode_AllocationInstruction_grpAllocs([{'StandInstDbName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'StandInstDbName'         => V}});
decode_AllocationInstruction_grpAllocs([{'StandInstDbID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'StandInstDbID'           => V}});
decode_AllocationInstruction_grpAllocs([{'NoDlvyInst'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoDlvyInst'              => V}});
decode_AllocationInstruction_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpClearingInstructions in message AllocationInstruction
decode_AllocationInstruction_grpClearingInstructions(L, R) -> decode_AllocationInstruction_grpClearingInstructions(L, undefined, R).
decode_AllocationInstruction_grpClearingInstructions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpClearingInstructions([{'ClearingInstruction'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpClearingInstructions(T, def(Delim,H), R#group{fields = F#{'ClearingInstruction' => V}});
decode_AllocationInstruction_grpClearingInstructions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message AllocationInstruction
decode_AllocationInstruction_grpDlvyInst(L, R) -> decode_AllocationInstruction_grpDlvyInst(L, undefined, R).
decode_AllocationInstruction_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_AllocationInstruction_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_AllocationInstruction_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_AllocationInstruction_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message AllocationInstruction
decode_AllocationInstruction_grpEvents(L, R) -> decode_AllocationInstruction_grpEvents(L, undefined, R).
decode_AllocationInstruction_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_AllocationInstruction_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_AllocationInstruction_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_AllocationInstruction_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_AllocationInstruction_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message AllocationInstruction
decode_AllocationInstruction_grpExecs(L, R) -> decode_AllocationInstruction_grpExecs(L, undefined, R).
decode_AllocationInstruction_grpExecs([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpExecs([{'LastQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastQty'         => V}});
decode_AllocationInstruction_grpExecs([{'ExecID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID'          => V}});
decode_AllocationInstruction_grpExecs([{'SecondaryExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpExecs(T, def(Delim,H), R#group{fields = F#{'SecondaryExecID' => V}});
decode_AllocationInstruction_grpExecs([{'LastPx'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastPx'          => V}});
decode_AllocationInstruction_grpExecs([{'LastParPx'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastParPx'       => V}});
decode_AllocationInstruction_grpExecs([{'LastCapacity'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastCapacity'    => V}});
decode_AllocationInstruction_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message AllocationInstruction
decode_AllocationInstruction_grpInstrAttrib(L, R) -> decode_AllocationInstruction_grpInstrAttrib(L, undefined, R).
decode_AllocationInstruction_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_AllocationInstruction_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_AllocationInstruction_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message AllocationInstruction
decode_AllocationInstruction_grpLegSecurityAltID(L, R) -> decode_AllocationInstruction_grpLegSecurityAltID(L, undefined, R).
decode_AllocationInstruction_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_AllocationInstruction_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_AllocationInstruction_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message AllocationInstruction
decode_AllocationInstruction_grpLegs(L, R) -> decode_AllocationInstruction_grpLegs(L, undefined, R).
decode_AllocationInstruction_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_AllocationInstruction_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_AllocationInstruction_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_AllocationInstruction_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_AllocationInstruction_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_AllocationInstruction_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_AllocationInstruction_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_AllocationInstruction_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_AllocationInstruction_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_AllocationInstruction_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_AllocationInstruction_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_AllocationInstruction_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_AllocationInstruction_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_AllocationInstruction_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_AllocationInstruction_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_AllocationInstruction_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_AllocationInstruction_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_AllocationInstruction_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_AllocationInstruction_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_AllocationInstruction_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_AllocationInstruction_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_AllocationInstruction_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_AllocationInstruction_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_AllocationInstruction_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_AllocationInstruction_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_AllocationInstruction_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_AllocationInstruction_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_AllocationInstruction_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_AllocationInstruction_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_AllocationInstruction_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_AllocationInstruction_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_AllocationInstruction_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_AllocationInstruction_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_AllocationInstruction_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_AllocationInstruction_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_AllocationInstruction_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_AllocationInstruction_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_AllocationInstruction_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_AllocationInstruction_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_AllocationInstruction_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_AllocationInstruction_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_AllocationInstruction_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_AllocationInstruction_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message AllocationInstruction
decode_AllocationInstruction_grpMiscFees(L, R) -> decode_AllocationInstruction_grpMiscFees(L, undefined, R).
decode_AllocationInstruction_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_AllocationInstruction_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_AllocationInstruction_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_AllocationInstruction_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_AllocationInstruction_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message AllocationInstruction
decode_AllocationInstruction_grpNested2PartyIDs(L, R) -> decode_AllocationInstruction_grpNested2PartyIDs(L, undefined, R).
decode_AllocationInstruction_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_AllocationInstruction_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_AllocationInstruction_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_AllocationInstruction_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_AllocationInstruction_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message AllocationInstruction
decode_AllocationInstruction_grpNested2PartySubIDs(L, R) -> decode_AllocationInstruction_grpNested2PartySubIDs(L, undefined, R).
decode_AllocationInstruction_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_AllocationInstruction_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_AllocationInstruction_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message AllocationInstruction
decode_AllocationInstruction_grpNestedPartyIDs(L, R) -> decode_AllocationInstruction_grpNestedPartyIDs(L, undefined, R).
decode_AllocationInstruction_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_AllocationInstruction_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_AllocationInstruction_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_AllocationInstruction_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_AllocationInstruction_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message AllocationInstruction
decode_AllocationInstruction_grpNestedPartySubIDs(L, R) -> decode_AllocationInstruction_grpNestedPartySubIDs(L, undefined, R).
decode_AllocationInstruction_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_AllocationInstruction_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_AllocationInstruction_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpOrders in message AllocationInstruction
decode_AllocationInstruction_grpOrders(L, R) -> decode_AllocationInstruction_grpOrders(L, undefined, R).
decode_AllocationInstruction_grpOrders([{Delim                ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpOrders([{'ClOrdID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdID'           => V}});
decode_AllocationInstruction_grpOrders([{'OrderID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderID'           => V}});
decode_AllocationInstruction_grpOrders([{'SecondaryOrderID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryOrderID'  => V}});
decode_AllocationInstruction_grpOrders([{'SecondaryClOrdID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'  => V}});
decode_AllocationInstruction_grpOrders([{'ListID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'ListID'            => V}});
decode_AllocationInstruction_grpOrders([{'NoNested2PartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs' => V}});
decode_AllocationInstruction_grpOrders([{'OrderQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderQty'          => V}});
decode_AllocationInstruction_grpOrders([{'OrderAvgPx'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderAvgPx'        => V}});
decode_AllocationInstruction_grpOrders([{'OrderBookingQty'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderBookingQty'   => V}});
decode_AllocationInstruction_grpOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message AllocationInstruction
decode_AllocationInstruction_grpPartyIDs(L, R) -> decode_AllocationInstruction_grpPartyIDs(L, undefined, R).
decode_AllocationInstruction_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_AllocationInstruction_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_AllocationInstruction_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_AllocationInstruction_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_AllocationInstruction_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message AllocationInstruction
decode_AllocationInstruction_grpPartySubIDs(L, R) -> decode_AllocationInstruction_grpPartySubIDs(L, undefined, R).
decode_AllocationInstruction_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_AllocationInstruction_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_AllocationInstruction_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message AllocationInstruction
decode_AllocationInstruction_grpSecurityAltID(L, R) -> decode_AllocationInstruction_grpSecurityAltID(L, undefined, R).
decode_AllocationInstruction_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_AllocationInstruction_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_AllocationInstruction_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message AllocationInstruction
decode_AllocationInstruction_grpSettlPartyIDs(L, R) -> decode_AllocationInstruction_grpSettlPartyIDs(L, undefined, R).
decode_AllocationInstruction_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_AllocationInstruction_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_AllocationInstruction_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_AllocationInstruction_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_AllocationInstruction_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message AllocationInstruction
decode_AllocationInstruction_grpSettlPartySubIDs(L, R) -> decode_AllocationInstruction_grpSettlPartySubIDs(L, undefined, R).
decode_AllocationInstruction_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_AllocationInstruction_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_AllocationInstruction_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message AllocationInstruction
decode_AllocationInstruction_grpStipulations(L, R) -> decode_AllocationInstruction_grpStipulations(L, undefined, R).
decode_AllocationInstruction_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_AllocationInstruction_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_AllocationInstruction_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message AllocationInstruction
decode_AllocationInstruction_grpUnderlyingSecurityAltID(L, R) -> decode_AllocationInstruction_grpUnderlyingSecurityAltID(L, undefined, R).
decode_AllocationInstruction_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_AllocationInstruction_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_AllocationInstruction_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message AllocationInstruction
decode_AllocationInstruction_grpUnderlyingStips(L, R) -> decode_AllocationInstruction_grpUnderlyingStips(L, undefined, R).
decode_AllocationInstruction_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_AllocationInstruction_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_AllocationInstruction_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message AllocationInstruction
decode_AllocationInstruction_grpUnderlyings(L, R) -> decode_AllocationInstruction_grpUnderlyings(L, undefined, R).
decode_AllocationInstruction_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_AllocationInstruction_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_AllocationInstruction_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_AllocationInstruction_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_AllocationInstruction_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_AllocationInstruction_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_AllocationInstruction_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_AllocationInstruction_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstruction_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_AllocationInstruction_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message AllocationInstructionAck
decode_AllocationInstructionAck_grpAllocs(L, R) -> decode_AllocationInstructionAck_grpAllocs(L, undefined, R).
decode_AllocationInstructionAck_grpAllocs([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstructionAck_grpAllocs([{'AllocAccount'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'           => V}});
decode_AllocationInstructionAck_grpAllocs([{'AllocAcctIDSource'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'      => V}});
decode_AllocationInstructionAck_grpAllocs([{'AllocPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocPrice'             => V}});
decode_AllocationInstructionAck_grpAllocs([{'IndividualAllocID'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'      => V}});
decode_AllocationInstructionAck_grpAllocs([{'IndividualAllocRejCode'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocRejCode' => V}});
decode_AllocationInstructionAck_grpAllocs([{'AllocText'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocText'              => V}});
decode_AllocationInstructionAck_grpAllocs([{'EncodedAllocTextLen'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocTextLen'    => V}});
decode_AllocationInstructionAck_grpAllocs([{'EncodedAllocText'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocText'       => V}});
decode_AllocationInstructionAck_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message AllocationInstructionAck
decode_AllocationInstructionAck_grpPartyIDs(L, R) -> decode_AllocationInstructionAck_grpPartyIDs(L, undefined, R).
decode_AllocationInstructionAck_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstructionAck_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_AllocationInstructionAck_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_AllocationInstructionAck_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_AllocationInstructionAck_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_AllocationInstructionAck_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message AllocationInstructionAck
decode_AllocationInstructionAck_grpPartySubIDs(L, R) -> decode_AllocationInstructionAck_grpPartySubIDs(L, undefined, R).
decode_AllocationInstructionAck_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationInstructionAck_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_AllocationInstructionAck_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationInstructionAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_AllocationInstructionAck_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message AllocationReport
decode_AllocationReport_grpAllocs(L, R) -> decode_AllocationReport_grpAllocs(L, undefined, R).
decode_AllocationReport_grpAllocs([{Delim                      ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpAllocs([{'AllocAccount'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'            => V}});
decode_AllocationReport_grpAllocs([{'AllocAcctIDSource'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'       => V}});
decode_AllocationReport_grpAllocs([{'MatchStatus'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'MatchStatus'             => V}});
decode_AllocationReport_grpAllocs([{'AllocPrice'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocPrice'              => V}});
decode_AllocationReport_grpAllocs([{'AllocQty'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'                => V}});
decode_AllocationReport_grpAllocs([{'IndividualAllocID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'       => V}});
decode_AllocationReport_grpAllocs([{'ProcessCode'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'ProcessCode'             => V}});
decode_AllocationReport_grpAllocs([{'NoNestedPartyIDs'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'        => V}});
decode_AllocationReport_grpAllocs([{'NotifyBrokerOfCredit'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NotifyBrokerOfCredit'    => V}});
decode_AllocationReport_grpAllocs([{'AllocHandlInst'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocHandlInst'          => V}});
decode_AllocationReport_grpAllocs([{'AllocText'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocText'               => V}});
decode_AllocationReport_grpAllocs([{'EncodedAllocTextLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocTextLen'     => V}});
decode_AllocationReport_grpAllocs([{'EncodedAllocText'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocText'        => V}});
decode_AllocationReport_grpAllocs([{'Commission'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'Commission'              => V}});
decode_AllocationReport_grpAllocs([{'CommType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'CommType'                => V}});
decode_AllocationReport_grpAllocs([{'CommCurrency'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'CommCurrency'            => V}});
decode_AllocationReport_grpAllocs([{'FundRenewWaiv'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'           => V}});
decode_AllocationReport_grpAllocs([{'AllocAvgPx'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAvgPx'              => V}});
decode_AllocationReport_grpAllocs([{'AllocNetMoney'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocNetMoney'           => V}});
decode_AllocationReport_grpAllocs([{'SettlCurrAmt'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrAmt'            => V}});
decode_AllocationReport_grpAllocs([{'AllocSettlCurrAmt'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrAmt'       => V}});
decode_AllocationReport_grpAllocs([{'SettlCurrency'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrency'           => V}});
decode_AllocationReport_grpAllocs([{'AllocSettlCurrency'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency'      => V}});
decode_AllocationReport_grpAllocs([{'SettlCurrFxRate'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrFxRate'         => V}});
decode_AllocationReport_grpAllocs([{'SettlCurrFxRateCalc'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlCurrFxRateCalc'     => V}});
decode_AllocationReport_grpAllocs([{'AllocAccruedInterestAmt'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccruedInterestAmt' => V}});
decode_AllocationReport_grpAllocs([{'AllocInterestAtMaturity'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocInterestAtMaturity' => V}});
decode_AllocationReport_grpAllocs([{'NoMiscFees'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoMiscFees'              => V}});
decode_AllocationReport_grpAllocs([{'NoClearingInstructions'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoClearingInstructions'  => V}});
decode_AllocationReport_grpAllocs([{'AllocSettlInstType'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlInstType'      => V}});
decode_AllocationReport_grpAllocs([{'SettlDeliveryType'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'SettlDeliveryType'       => V}});
decode_AllocationReport_grpAllocs([{'StandInstDbType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'StandInstDbType'         => V}});
decode_AllocationReport_grpAllocs([{'StandInstDbName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'StandInstDbName'         => V}});
decode_AllocationReport_grpAllocs([{'StandInstDbID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'StandInstDbID'           => V}});
decode_AllocationReport_grpAllocs([{'NoDlvyInst'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoDlvyInst'              => V}});
decode_AllocationReport_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpClearingInstructions in message AllocationReport
decode_AllocationReport_grpClearingInstructions(L, R) -> decode_AllocationReport_grpClearingInstructions(L, undefined, R).
decode_AllocationReport_grpClearingInstructions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpClearingInstructions([{'ClearingInstruction'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpClearingInstructions(T, def(Delim,H), R#group{fields = F#{'ClearingInstruction' => V}});
decode_AllocationReport_grpClearingInstructions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message AllocationReport
decode_AllocationReport_grpDlvyInst(L, R) -> decode_AllocationReport_grpDlvyInst(L, undefined, R).
decode_AllocationReport_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_AllocationReport_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_AllocationReport_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_AllocationReport_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message AllocationReport
decode_AllocationReport_grpEvents(L, R) -> decode_AllocationReport_grpEvents(L, undefined, R).
decode_AllocationReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_AllocationReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_AllocationReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_AllocationReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_AllocationReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message AllocationReport
decode_AllocationReport_grpExecs(L, R) -> decode_AllocationReport_grpExecs(L, undefined, R).
decode_AllocationReport_grpExecs([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpExecs([{'LastQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastQty'         => V}});
decode_AllocationReport_grpExecs([{'ExecID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID'          => V}});
decode_AllocationReport_grpExecs([{'SecondaryExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'SecondaryExecID' => V}});
decode_AllocationReport_grpExecs([{'LastPx'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastPx'          => V}});
decode_AllocationReport_grpExecs([{'LastParPx'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastParPx'       => V}});
decode_AllocationReport_grpExecs([{'LastCapacity'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'LastCapacity'    => V}});
decode_AllocationReport_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message AllocationReport
decode_AllocationReport_grpInstrAttrib(L, R) -> decode_AllocationReport_grpInstrAttrib(L, undefined, R).
decode_AllocationReport_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_AllocationReport_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_AllocationReport_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message AllocationReport
decode_AllocationReport_grpLegSecurityAltID(L, R) -> decode_AllocationReport_grpLegSecurityAltID(L, undefined, R).
decode_AllocationReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_AllocationReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_AllocationReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message AllocationReport
decode_AllocationReport_grpLegs(L, R) -> decode_AllocationReport_grpLegs(L, undefined, R).
decode_AllocationReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_AllocationReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_AllocationReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_AllocationReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_AllocationReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_AllocationReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_AllocationReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_AllocationReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_AllocationReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_AllocationReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_AllocationReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_AllocationReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_AllocationReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_AllocationReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_AllocationReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_AllocationReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_AllocationReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_AllocationReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_AllocationReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_AllocationReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_AllocationReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_AllocationReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_AllocationReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_AllocationReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_AllocationReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_AllocationReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_AllocationReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_AllocationReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_AllocationReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_AllocationReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_AllocationReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_AllocationReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_AllocationReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_AllocationReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_AllocationReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_AllocationReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_AllocationReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_AllocationReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_AllocationReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_AllocationReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_AllocationReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_AllocationReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_AllocationReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message AllocationReport
decode_AllocationReport_grpMiscFees(L, R) -> decode_AllocationReport_grpMiscFees(L, undefined, R).
decode_AllocationReport_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_AllocationReport_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_AllocationReport_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_AllocationReport_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_AllocationReport_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message AllocationReport
decode_AllocationReport_grpNested2PartyIDs(L, R) -> decode_AllocationReport_grpNested2PartyIDs(L, undefined, R).
decode_AllocationReport_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_AllocationReport_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_AllocationReport_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_AllocationReport_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_AllocationReport_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message AllocationReport
decode_AllocationReport_grpNested2PartySubIDs(L, R) -> decode_AllocationReport_grpNested2PartySubIDs(L, undefined, R).
decode_AllocationReport_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_AllocationReport_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_AllocationReport_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message AllocationReport
decode_AllocationReport_grpNestedPartyIDs(L, R) -> decode_AllocationReport_grpNestedPartyIDs(L, undefined, R).
decode_AllocationReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_AllocationReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_AllocationReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_AllocationReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_AllocationReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message AllocationReport
decode_AllocationReport_grpNestedPartySubIDs(L, R) -> decode_AllocationReport_grpNestedPartySubIDs(L, undefined, R).
decode_AllocationReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_AllocationReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_AllocationReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpOrders in message AllocationReport
decode_AllocationReport_grpOrders(L, R) -> decode_AllocationReport_grpOrders(L, undefined, R).
decode_AllocationReport_grpOrders([{Delim                ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpOrders([{'ClOrdID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdID'           => V}});
decode_AllocationReport_grpOrders([{'OrderID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderID'           => V}});
decode_AllocationReport_grpOrders([{'SecondaryOrderID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryOrderID'  => V}});
decode_AllocationReport_grpOrders([{'SecondaryClOrdID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'  => V}});
decode_AllocationReport_grpOrders([{'ListID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'ListID'            => V}});
decode_AllocationReport_grpOrders([{'NoNested2PartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs' => V}});
decode_AllocationReport_grpOrders([{'OrderQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderQty'          => V}});
decode_AllocationReport_grpOrders([{'OrderAvgPx'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderAvgPx'        => V}});
decode_AllocationReport_grpOrders([{'OrderBookingQty'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderBookingQty'   => V}});
decode_AllocationReport_grpOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message AllocationReport
decode_AllocationReport_grpPartyIDs(L, R) -> decode_AllocationReport_grpPartyIDs(L, undefined, R).
decode_AllocationReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_AllocationReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_AllocationReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_AllocationReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_AllocationReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message AllocationReport
decode_AllocationReport_grpPartySubIDs(L, R) -> decode_AllocationReport_grpPartySubIDs(L, undefined, R).
decode_AllocationReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_AllocationReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_AllocationReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message AllocationReport
decode_AllocationReport_grpSecurityAltID(L, R) -> decode_AllocationReport_grpSecurityAltID(L, undefined, R).
decode_AllocationReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_AllocationReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_AllocationReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message AllocationReport
decode_AllocationReport_grpSettlPartyIDs(L, R) -> decode_AllocationReport_grpSettlPartyIDs(L, undefined, R).
decode_AllocationReport_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_AllocationReport_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_AllocationReport_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_AllocationReport_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_AllocationReport_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message AllocationReport
decode_AllocationReport_grpSettlPartySubIDs(L, R) -> decode_AllocationReport_grpSettlPartySubIDs(L, undefined, R).
decode_AllocationReport_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_AllocationReport_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_AllocationReport_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message AllocationReport
decode_AllocationReport_grpStipulations(L, R) -> decode_AllocationReport_grpStipulations(L, undefined, R).
decode_AllocationReport_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_AllocationReport_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_AllocationReport_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message AllocationReport
decode_AllocationReport_grpUnderlyingSecurityAltID(L, R) -> decode_AllocationReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_AllocationReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_AllocationReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_AllocationReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message AllocationReport
decode_AllocationReport_grpUnderlyingStips(L, R) -> decode_AllocationReport_grpUnderlyingStips(L, undefined, R).
decode_AllocationReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_AllocationReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_AllocationReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message AllocationReport
decode_AllocationReport_grpUnderlyings(L, R) -> decode_AllocationReport_grpUnderlyings(L, undefined, R).
decode_AllocationReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_AllocationReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_AllocationReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_AllocationReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_AllocationReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_AllocationReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_AllocationReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_AllocationReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_AllocationReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message AllocationReportAck
decode_AllocationReportAck_grpAllocs(L, R) -> decode_AllocationReportAck_grpAllocs(L, undefined, R).
decode_AllocationReportAck_grpAllocs([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReportAck_grpAllocs([{'AllocAccount'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'           => V}});
decode_AllocationReportAck_grpAllocs([{'AllocAcctIDSource'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'      => V}});
decode_AllocationReportAck_grpAllocs([{'AllocPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocPrice'             => V}});
decode_AllocationReportAck_grpAllocs([{'IndividualAllocID'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'      => V}});
decode_AllocationReportAck_grpAllocs([{'IndividualAllocRejCode'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocRejCode' => V}});
decode_AllocationReportAck_grpAllocs([{'AllocText'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocText'              => V}});
decode_AllocationReportAck_grpAllocs([{'EncodedAllocTextLen'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocTextLen'    => V}});
decode_AllocationReportAck_grpAllocs([{'EncodedAllocText'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'EncodedAllocText'       => V}});
decode_AllocationReportAck_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message AllocationReportAck
decode_AllocationReportAck_grpPartyIDs(L, R) -> decode_AllocationReportAck_grpPartyIDs(L, undefined, R).
decode_AllocationReportAck_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReportAck_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_AllocationReportAck_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_AllocationReportAck_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_AllocationReportAck_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_AllocationReportAck_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message AllocationReportAck
decode_AllocationReportAck_grpPartySubIDs(L, R) -> decode_AllocationReportAck_grpPartySubIDs(L, undefined, R).
decode_AllocationReportAck_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AllocationReportAck_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_AllocationReportAck_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AllocationReportAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_AllocationReportAck_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message AssignmentReport
decode_AssignmentReport_grpEvents(L, R) -> decode_AssignmentReport_grpEvents(L, undefined, R).
decode_AssignmentReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_AssignmentReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_AssignmentReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_AssignmentReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_AssignmentReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message AssignmentReport
decode_AssignmentReport_grpLegSecurityAltID(L, R) -> decode_AssignmentReport_grpLegSecurityAltID(L, undefined, R).
decode_AssignmentReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_AssignmentReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_AssignmentReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message AssignmentReport
decode_AssignmentReport_grpLegs(L, R) -> decode_AssignmentReport_grpLegs(L, undefined, R).
decode_AssignmentReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_AssignmentReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_AssignmentReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_AssignmentReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_AssignmentReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_AssignmentReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_AssignmentReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_AssignmentReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_AssignmentReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_AssignmentReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_AssignmentReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_AssignmentReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_AssignmentReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_AssignmentReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_AssignmentReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_AssignmentReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_AssignmentReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_AssignmentReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_AssignmentReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_AssignmentReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_AssignmentReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_AssignmentReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_AssignmentReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_AssignmentReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_AssignmentReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_AssignmentReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_AssignmentReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_AssignmentReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_AssignmentReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_AssignmentReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_AssignmentReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_AssignmentReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_AssignmentReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_AssignmentReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_AssignmentReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_AssignmentReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_AssignmentReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_AssignmentReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_AssignmentReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_AssignmentReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_AssignmentReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_AssignmentReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_AssignmentReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message AssignmentReport
decode_AssignmentReport_grpNestedPartyIDs(L, R) -> decode_AssignmentReport_grpNestedPartyIDs(L, undefined, R).
decode_AssignmentReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_AssignmentReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_AssignmentReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_AssignmentReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_AssignmentReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message AssignmentReport
decode_AssignmentReport_grpNestedPartySubIDs(L, R) -> decode_AssignmentReport_grpNestedPartySubIDs(L, undefined, R).
decode_AssignmentReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_AssignmentReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_AssignmentReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message AssignmentReport
decode_AssignmentReport_grpPartyIDs(L, R) -> decode_AssignmentReport_grpPartyIDs(L, undefined, R).
decode_AssignmentReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_AssignmentReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_AssignmentReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_AssignmentReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_AssignmentReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message AssignmentReport
decode_AssignmentReport_grpPartySubIDs(L, R) -> decode_AssignmentReport_grpPartySubIDs(L, undefined, R).
decode_AssignmentReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_AssignmentReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_AssignmentReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPosAmt in message AssignmentReport
decode_AssignmentReport_grpPosAmt(L, R) -> decode_AssignmentReport_grpPosAmt(L, undefined, R).
decode_AssignmentReport_grpPosAmt([{Delim         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpPosAmt([{'PosAmtType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmtType' => V}});
decode_AssignmentReport_grpPosAmt([{'PosAmt'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmt'     => V}});
decode_AssignmentReport_grpPosAmt(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPositions in message AssignmentReport
decode_AssignmentReport_grpPositions(L, R) -> decode_AssignmentReport_grpPositions(L, undefined, R).
decode_AssignmentReport_grpPositions([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpPositions([{'PosType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosType'          => V}});
decode_AssignmentReport_grpPositions([{'LongQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'LongQty'          => V}});
decode_AssignmentReport_grpPositions([{'ShortQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'ShortQty'         => V}});
decode_AssignmentReport_grpPositions([{'PosQtyStatus'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosQtyStatus'     => V}});
decode_AssignmentReport_grpPositions([{'NoNestedPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs' => V}});
decode_AssignmentReport_grpPositions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message AssignmentReport
decode_AssignmentReport_grpSecurityAltID(L, R) -> decode_AssignmentReport_grpSecurityAltID(L, undefined, R).
decode_AssignmentReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_AssignmentReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_AssignmentReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message AssignmentReport
decode_AssignmentReport_grpUnderlyingSecurityAltID(L, R) -> decode_AssignmentReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_AssignmentReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_AssignmentReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_AssignmentReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message AssignmentReport
decode_AssignmentReport_grpUnderlyingStips(L, R) -> decode_AssignmentReport_grpUnderlyingStips(L, undefined, R).
decode_AssignmentReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_AssignmentReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_AssignmentReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message AssignmentReport
decode_AssignmentReport_grpUnderlyings(L, R) -> decode_AssignmentReport_grpUnderlyings(L, undefined, R).
decode_AssignmentReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_AssignmentReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_AssignmentReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_AssignmentReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_AssignmentReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_AssignmentReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_AssignmentReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_AssignmentReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_AssignmentReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_AssignmentReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpBidComponents in message BidRequest
decode_BidRequest_grpBidComponents(L, R) -> decode_BidRequest_grpBidComponents(L, undefined, R).
decode_BidRequest_grpBidComponents([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_BidRequest_grpBidComponents([{'ListID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'ListID'              => V}});
decode_BidRequest_grpBidComponents([{'Side'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Side'                => V}});
decode_BidRequest_grpBidComponents([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_BidRequest_grpBidComponents([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_BidRequest_grpBidComponents([{'NetGrossInd'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'NetGrossInd'         => V}});
decode_BidRequest_grpBidComponents([{'SettlType'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'SettlType'           => V}});
decode_BidRequest_grpBidComponents([{'SettlDate'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'SettlDate'           => V}});
decode_BidRequest_grpBidComponents([{'Account'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Account'             => V}});
decode_BidRequest_grpBidComponents([{'AcctIDSource'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'        => V}});
decode_BidRequest_grpBidComponents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpBidDescriptors in message BidRequest
decode_BidRequest_grpBidDescriptors(L, R) -> decode_BidRequest_grpBidDescriptors(L, undefined, R).
decode_BidRequest_grpBidDescriptors([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_BidRequest_grpBidDescriptors([{'BidDescriptorType'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'BidDescriptorType'      => V}});
decode_BidRequest_grpBidDescriptors([{'BidDescriptor'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'BidDescriptor'          => V}});
decode_BidRequest_grpBidDescriptors([{'SideValueInd'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'SideValueInd'           => V}});
decode_BidRequest_grpBidDescriptors([{'LiquidityValue'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'LiquidityValue'         => V}});
decode_BidRequest_grpBidDescriptors([{'LiquidityNumSecurities'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'LiquidityNumSecurities' => V}});
decode_BidRequest_grpBidDescriptors([{'LiquidityPctLow'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'LiquidityPctLow'        => V}});
decode_BidRequest_grpBidDescriptors([{'LiquidityPctHigh'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'LiquidityPctHigh'       => V}});
decode_BidRequest_grpBidDescriptors([{'EFPTrackingError'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'EFPTrackingError'       => V}});
decode_BidRequest_grpBidDescriptors([{'FairValue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'FairValue'              => V}});
decode_BidRequest_grpBidDescriptors([{'OutsideIndexPct'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'OutsideIndexPct'        => V}});
decode_BidRequest_grpBidDescriptors([{'ValueOfFutures'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidRequest_grpBidDescriptors(T, def(Delim,H), R#group{fields = F#{'ValueOfFutures'         => V}});
decode_BidRequest_grpBidDescriptors(L, _Delim, R) -> {L, R}.

%% Parse Group: grpBidComponents in message BidResponse
decode_BidResponse_grpBidComponents(L, R) -> decode_BidResponse_grpBidComponents(L, undefined, R).
decode_BidResponse_grpBidComponents([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_BidResponse_grpBidComponents([{'Commission'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Commission'          => V}});
decode_BidResponse_grpBidComponents([{'CommType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'CommType'            => V}});
decode_BidResponse_grpBidComponents([{'CommCurrency'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'CommCurrency'        => V}});
decode_BidResponse_grpBidComponents([{'FundRenewWaiv'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'       => V}});
decode_BidResponse_grpBidComponents([{'ListID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'ListID'              => V}});
decode_BidResponse_grpBidComponents([{'Country'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Country'             => V}});
decode_BidResponse_grpBidComponents([{'Side'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Side'                => V}});
decode_BidResponse_grpBidComponents([{'Price'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Price'               => V}});
decode_BidResponse_grpBidComponents([{'PriceType'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'PriceType'           => V}});
decode_BidResponse_grpBidComponents([{'FairValue'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'FairValue'           => V}});
decode_BidResponse_grpBidComponents([{'NetGrossInd'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'NetGrossInd'         => V}});
decode_BidResponse_grpBidComponents([{'SettlType'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'SettlType'           => V}});
decode_BidResponse_grpBidComponents([{'SettlDate'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'SettlDate'           => V}});
decode_BidResponse_grpBidComponents([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_BidResponse_grpBidComponents([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_BidResponse_grpBidComponents([{'Text'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'Text'                => V}});
decode_BidResponse_grpBidComponents([{'EncodedTextLen'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'      => V}});
decode_BidResponse_grpBidComponents([{'EncodedText'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_BidResponse_grpBidComponents(T, def(Delim,H), R#group{fields = F#{'EncodedText'         => V}});
decode_BidResponse_grpBidComponents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message CollateralAssignment
decode_CollateralAssignment_grpDlvyInst(L, R) -> decode_CollateralAssignment_grpDlvyInst(L, undefined, R).
decode_CollateralAssignment_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_CollateralAssignment_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_CollateralAssignment_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_CollateralAssignment_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CollateralAssignment
decode_CollateralAssignment_grpEvents(L, R) -> decode_CollateralAssignment_grpEvents(L, undefined, R).
decode_CollateralAssignment_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CollateralAssignment_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CollateralAssignment_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CollateralAssignment_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CollateralAssignment_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message CollateralAssignment
decode_CollateralAssignment_grpExecs(L, R) -> decode_CollateralAssignment_grpExecs(L, undefined, R).
decode_CollateralAssignment_grpExecs([{Delim     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpExecs([{'ExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID' => V}});
decode_CollateralAssignment_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CollateralAssignment
decode_CollateralAssignment_grpLegSecurityAltID(L, R) -> decode_CollateralAssignment_grpLegSecurityAltID(L, undefined, R).
decode_CollateralAssignment_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CollateralAssignment_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CollateralAssignment_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CollateralAssignment
decode_CollateralAssignment_grpLegs(L, R) -> decode_CollateralAssignment_grpLegs(L, undefined, R).
decode_CollateralAssignment_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CollateralAssignment_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CollateralAssignment_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CollateralAssignment_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CollateralAssignment_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CollateralAssignment_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CollateralAssignment_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CollateralAssignment_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CollateralAssignment_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CollateralAssignment_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CollateralAssignment_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CollateralAssignment_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CollateralAssignment_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CollateralAssignment_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CollateralAssignment_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CollateralAssignment_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CollateralAssignment_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CollateralAssignment_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CollateralAssignment_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CollateralAssignment_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CollateralAssignment_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CollateralAssignment_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CollateralAssignment_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CollateralAssignment_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CollateralAssignment_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CollateralAssignment_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CollateralAssignment_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CollateralAssignment_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CollateralAssignment_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CollateralAssignment_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CollateralAssignment_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CollateralAssignment_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CollateralAssignment_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CollateralAssignment_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CollateralAssignment_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CollateralAssignment_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CollateralAssignment_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CollateralAssignment_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CollateralAssignment_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CollateralAssignment_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CollateralAssignment_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CollateralAssignment_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CollateralAssignment_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message CollateralAssignment
decode_CollateralAssignment_grpMiscFees(L, R) -> decode_CollateralAssignment_grpMiscFees(L, undefined, R).
decode_CollateralAssignment_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_CollateralAssignment_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_CollateralAssignment_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_CollateralAssignment_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_CollateralAssignment_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CollateralAssignment
decode_CollateralAssignment_grpPartyIDs(L, R) -> decode_CollateralAssignment_grpPartyIDs(L, undefined, R).
decode_CollateralAssignment_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CollateralAssignment_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CollateralAssignment_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CollateralAssignment_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CollateralAssignment_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CollateralAssignment
decode_CollateralAssignment_grpPartySubIDs(L, R) -> decode_CollateralAssignment_grpPartySubIDs(L, undefined, R).
decode_CollateralAssignment_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CollateralAssignment_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CollateralAssignment_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CollateralAssignment
decode_CollateralAssignment_grpSecurityAltID(L, R) -> decode_CollateralAssignment_grpSecurityAltID(L, undefined, R).
decode_CollateralAssignment_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CollateralAssignment_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CollateralAssignment_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message CollateralAssignment
decode_CollateralAssignment_grpSettlPartyIDs(L, R) -> decode_CollateralAssignment_grpSettlPartyIDs(L, undefined, R).
decode_CollateralAssignment_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_CollateralAssignment_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_CollateralAssignment_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_CollateralAssignment_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_CollateralAssignment_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message CollateralAssignment
decode_CollateralAssignment_grpSettlPartySubIDs(L, R) -> decode_CollateralAssignment_grpSettlPartySubIDs(L, undefined, R).
decode_CollateralAssignment_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_CollateralAssignment_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_CollateralAssignment_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message CollateralAssignment
decode_CollateralAssignment_grpStipulations(L, R) -> decode_CollateralAssignment_grpStipulations(L, undefined, R).
decode_CollateralAssignment_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_CollateralAssignment_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_CollateralAssignment_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrades in message CollateralAssignment
decode_CollateralAssignment_grpTrades(L, R) -> decode_CollateralAssignment_grpTrades(L, undefined, R).
decode_CollateralAssignment_grpTrades([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpTrades([{'TradeReportID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpTrades(T, def(Delim,H), R#group{fields = F#{'TradeReportID'          => V}});
decode_CollateralAssignment_grpTrades([{'SecondaryTradeReportID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpTrades(T, def(Delim,H), R#group{fields = F#{'SecondaryTradeReportID' => V}});
decode_CollateralAssignment_grpTrades(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message CollateralAssignment
decode_CollateralAssignment_grpTrdRegTimestamps(L, R) -> decode_CollateralAssignment_grpTrdRegTimestamps(L, undefined, R).
decode_CollateralAssignment_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_CollateralAssignment_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_CollateralAssignment_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_CollateralAssignment_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CollateralAssignment
decode_CollateralAssignment_grpUnderlyingSecurityAltID(L, R) -> decode_CollateralAssignment_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CollateralAssignment_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CollateralAssignment_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CollateralAssignment_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CollateralAssignment
decode_CollateralAssignment_grpUnderlyingStips(L, R) -> decode_CollateralAssignment_grpUnderlyingStips(L, undefined, R).
decode_CollateralAssignment_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CollateralAssignment_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CollateralAssignment_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CollateralAssignment
decode_CollateralAssignment_grpUnderlyings(L, R) -> decode_CollateralAssignment_grpUnderlyings(L, undefined, R).
decode_CollateralAssignment_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CollateralAssignment_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CollateralAssignment_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CollateralAssignment_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CollateralAssignment_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CollateralAssignment_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CollateralAssignment_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CollateralAssignment_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CollateralAssignment_grpUnderlyings([{'CollAction'=H                          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralAssignment_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'CollAction'                           => V}});
decode_CollateralAssignment_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpCollInquiryQualifier in message CollateralInquiry
decode_CollateralInquiry_grpCollInquiryQualifier(L, R) -> decode_CollateralInquiry_grpCollInquiryQualifier(L, undefined, R).
decode_CollateralInquiry_grpCollInquiryQualifier([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpCollInquiryQualifier([{'CollInquiryQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpCollInquiryQualifier(T, def(Delim,H), R#group{fields = F#{'CollInquiryQualifier' => V}});
decode_CollateralInquiry_grpCollInquiryQualifier(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message CollateralInquiry
decode_CollateralInquiry_grpDlvyInst(L, R) -> decode_CollateralInquiry_grpDlvyInst(L, undefined, R).
decode_CollateralInquiry_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_CollateralInquiry_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_CollateralInquiry_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_CollateralInquiry_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CollateralInquiry
decode_CollateralInquiry_grpEvents(L, R) -> decode_CollateralInquiry_grpEvents(L, undefined, R).
decode_CollateralInquiry_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CollateralInquiry_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CollateralInquiry_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CollateralInquiry_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CollateralInquiry_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message CollateralInquiry
decode_CollateralInquiry_grpExecs(L, R) -> decode_CollateralInquiry_grpExecs(L, undefined, R).
decode_CollateralInquiry_grpExecs([{Delim     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpExecs([{'ExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID' => V}});
decode_CollateralInquiry_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CollateralInquiry
decode_CollateralInquiry_grpLegSecurityAltID(L, R) -> decode_CollateralInquiry_grpLegSecurityAltID(L, undefined, R).
decode_CollateralInquiry_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CollateralInquiry_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CollateralInquiry_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CollateralInquiry
decode_CollateralInquiry_grpLegs(L, R) -> decode_CollateralInquiry_grpLegs(L, undefined, R).
decode_CollateralInquiry_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CollateralInquiry_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CollateralInquiry_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CollateralInquiry_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CollateralInquiry_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CollateralInquiry_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CollateralInquiry_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CollateralInquiry_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CollateralInquiry_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CollateralInquiry_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CollateralInquiry_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CollateralInquiry_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CollateralInquiry_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CollateralInquiry_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CollateralInquiry_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CollateralInquiry_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CollateralInquiry_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CollateralInquiry_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CollateralInquiry_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CollateralInquiry_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CollateralInquiry_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CollateralInquiry_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CollateralInquiry_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CollateralInquiry_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CollateralInquiry_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CollateralInquiry_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CollateralInquiry_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CollateralInquiry_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CollateralInquiry_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CollateralInquiry_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CollateralInquiry_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CollateralInquiry_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CollateralInquiry_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CollateralInquiry_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CollateralInquiry_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CollateralInquiry_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CollateralInquiry_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CollateralInquiry_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CollateralInquiry_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CollateralInquiry_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CollateralInquiry_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CollateralInquiry_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CollateralInquiry_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CollateralInquiry
decode_CollateralInquiry_grpPartyIDs(L, R) -> decode_CollateralInquiry_grpPartyIDs(L, undefined, R).
decode_CollateralInquiry_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CollateralInquiry_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CollateralInquiry_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CollateralInquiry_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CollateralInquiry_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CollateralInquiry
decode_CollateralInquiry_grpPartySubIDs(L, R) -> decode_CollateralInquiry_grpPartySubIDs(L, undefined, R).
decode_CollateralInquiry_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CollateralInquiry_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CollateralInquiry_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CollateralInquiry
decode_CollateralInquiry_grpSecurityAltID(L, R) -> decode_CollateralInquiry_grpSecurityAltID(L, undefined, R).
decode_CollateralInquiry_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CollateralInquiry_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CollateralInquiry_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message CollateralInquiry
decode_CollateralInquiry_grpSettlPartyIDs(L, R) -> decode_CollateralInquiry_grpSettlPartyIDs(L, undefined, R).
decode_CollateralInquiry_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_CollateralInquiry_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_CollateralInquiry_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_CollateralInquiry_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_CollateralInquiry_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message CollateralInquiry
decode_CollateralInquiry_grpSettlPartySubIDs(L, R) -> decode_CollateralInquiry_grpSettlPartySubIDs(L, undefined, R).
decode_CollateralInquiry_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_CollateralInquiry_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_CollateralInquiry_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message CollateralInquiry
decode_CollateralInquiry_grpStipulations(L, R) -> decode_CollateralInquiry_grpStipulations(L, undefined, R).
decode_CollateralInquiry_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_CollateralInquiry_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_CollateralInquiry_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrades in message CollateralInquiry
decode_CollateralInquiry_grpTrades(L, R) -> decode_CollateralInquiry_grpTrades(L, undefined, R).
decode_CollateralInquiry_grpTrades([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpTrades([{'TradeReportID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpTrades(T, def(Delim,H), R#group{fields = F#{'TradeReportID'          => V}});
decode_CollateralInquiry_grpTrades([{'SecondaryTradeReportID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpTrades(T, def(Delim,H), R#group{fields = F#{'SecondaryTradeReportID' => V}});
decode_CollateralInquiry_grpTrades(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message CollateralInquiry
decode_CollateralInquiry_grpTrdRegTimestamps(L, R) -> decode_CollateralInquiry_grpTrdRegTimestamps(L, undefined, R).
decode_CollateralInquiry_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_CollateralInquiry_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_CollateralInquiry_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_CollateralInquiry_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CollateralInquiry
decode_CollateralInquiry_grpUnderlyingSecurityAltID(L, R) -> decode_CollateralInquiry_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CollateralInquiry_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CollateralInquiry_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CollateralInquiry_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CollateralInquiry
decode_CollateralInquiry_grpUnderlyingStips(L, R) -> decode_CollateralInquiry_grpUnderlyingStips(L, undefined, R).
decode_CollateralInquiry_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CollateralInquiry_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CollateralInquiry_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CollateralInquiry
decode_CollateralInquiry_grpUnderlyings(L, R) -> decode_CollateralInquiry_grpUnderlyings(L, undefined, R).
decode_CollateralInquiry_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CollateralInquiry_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CollateralInquiry_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CollateralInquiry_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CollateralInquiry_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CollateralInquiry_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CollateralInquiry_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CollateralInquiry_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiry_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CollateralInquiry_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpCollInquiryQualifier in message CollateralInquiryAck
decode_CollateralInquiryAck_grpCollInquiryQualifier(L, R) -> decode_CollateralInquiryAck_grpCollInquiryQualifier(L, undefined, R).
decode_CollateralInquiryAck_grpCollInquiryQualifier([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpCollInquiryQualifier([{'CollInquiryQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpCollInquiryQualifier(T, def(Delim,H), R#group{fields = F#{'CollInquiryQualifier' => V}});
decode_CollateralInquiryAck_grpCollInquiryQualifier(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CollateralInquiryAck
decode_CollateralInquiryAck_grpEvents(L, R) -> decode_CollateralInquiryAck_grpEvents(L, undefined, R).
decode_CollateralInquiryAck_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CollateralInquiryAck_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CollateralInquiryAck_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CollateralInquiryAck_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CollateralInquiryAck_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message CollateralInquiryAck
decode_CollateralInquiryAck_grpExecs(L, R) -> decode_CollateralInquiryAck_grpExecs(L, undefined, R).
decode_CollateralInquiryAck_grpExecs([{Delim     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpExecs([{'ExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID' => V}});
decode_CollateralInquiryAck_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CollateralInquiryAck
decode_CollateralInquiryAck_grpLegSecurityAltID(L, R) -> decode_CollateralInquiryAck_grpLegSecurityAltID(L, undefined, R).
decode_CollateralInquiryAck_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CollateralInquiryAck_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CollateralInquiryAck_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CollateralInquiryAck
decode_CollateralInquiryAck_grpLegs(L, R) -> decode_CollateralInquiryAck_grpLegs(L, undefined, R).
decode_CollateralInquiryAck_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CollateralInquiryAck_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CollateralInquiryAck_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CollateralInquiryAck_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CollateralInquiryAck_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CollateralInquiryAck_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CollateralInquiryAck_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CollateralInquiryAck_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CollateralInquiryAck_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CollateralInquiryAck_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CollateralInquiryAck_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CollateralInquiryAck_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CollateralInquiryAck_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CollateralInquiryAck_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CollateralInquiryAck_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CollateralInquiryAck_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CollateralInquiryAck_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CollateralInquiryAck_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CollateralInquiryAck_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CollateralInquiryAck_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CollateralInquiryAck_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CollateralInquiryAck_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CollateralInquiryAck_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CollateralInquiryAck_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CollateralInquiryAck_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CollateralInquiryAck_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CollateralInquiryAck_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CollateralInquiryAck_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CollateralInquiryAck_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CollateralInquiryAck_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CollateralInquiryAck_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CollateralInquiryAck_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CollateralInquiryAck_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CollateralInquiryAck_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CollateralInquiryAck_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CollateralInquiryAck_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CollateralInquiryAck
decode_CollateralInquiryAck_grpPartyIDs(L, R) -> decode_CollateralInquiryAck_grpPartyIDs(L, undefined, R).
decode_CollateralInquiryAck_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CollateralInquiryAck_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CollateralInquiryAck_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CollateralInquiryAck_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CollateralInquiryAck_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CollateralInquiryAck
decode_CollateralInquiryAck_grpPartySubIDs(L, R) -> decode_CollateralInquiryAck_grpPartySubIDs(L, undefined, R).
decode_CollateralInquiryAck_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CollateralInquiryAck_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CollateralInquiryAck_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CollateralInquiryAck
decode_CollateralInquiryAck_grpSecurityAltID(L, R) -> decode_CollateralInquiryAck_grpSecurityAltID(L, undefined, R).
decode_CollateralInquiryAck_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CollateralInquiryAck_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CollateralInquiryAck_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrades in message CollateralInquiryAck
decode_CollateralInquiryAck_grpTrades(L, R) -> decode_CollateralInquiryAck_grpTrades(L, undefined, R).
decode_CollateralInquiryAck_grpTrades([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpTrades([{'TradeReportID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpTrades(T, def(Delim,H), R#group{fields = F#{'TradeReportID'          => V}});
decode_CollateralInquiryAck_grpTrades([{'SecondaryTradeReportID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpTrades(T, def(Delim,H), R#group{fields = F#{'SecondaryTradeReportID' => V}});
decode_CollateralInquiryAck_grpTrades(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CollateralInquiryAck
decode_CollateralInquiryAck_grpUnderlyingSecurityAltID(L, R) -> decode_CollateralInquiryAck_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CollateralInquiryAck_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CollateralInquiryAck_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CollateralInquiryAck_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CollateralInquiryAck
decode_CollateralInquiryAck_grpUnderlyingStips(L, R) -> decode_CollateralInquiryAck_grpUnderlyingStips(L, undefined, R).
decode_CollateralInquiryAck_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CollateralInquiryAck_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CollateralInquiryAck_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CollateralInquiryAck
decode_CollateralInquiryAck_grpUnderlyings(L, R) -> decode_CollateralInquiryAck_grpUnderlyings(L, undefined, R).
decode_CollateralInquiryAck_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CollateralInquiryAck_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralInquiryAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CollateralInquiryAck_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message CollateralReport
decode_CollateralReport_grpDlvyInst(L, R) -> decode_CollateralReport_grpDlvyInst(L, undefined, R).
decode_CollateralReport_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_CollateralReport_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_CollateralReport_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_CollateralReport_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CollateralReport
decode_CollateralReport_grpEvents(L, R) -> decode_CollateralReport_grpEvents(L, undefined, R).
decode_CollateralReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CollateralReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CollateralReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CollateralReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CollateralReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message CollateralReport
decode_CollateralReport_grpExecs(L, R) -> decode_CollateralReport_grpExecs(L, undefined, R).
decode_CollateralReport_grpExecs([{Delim     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpExecs([{'ExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID' => V}});
decode_CollateralReport_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CollateralReport
decode_CollateralReport_grpLegSecurityAltID(L, R) -> decode_CollateralReport_grpLegSecurityAltID(L, undefined, R).
decode_CollateralReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CollateralReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CollateralReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CollateralReport
decode_CollateralReport_grpLegs(L, R) -> decode_CollateralReport_grpLegs(L, undefined, R).
decode_CollateralReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CollateralReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CollateralReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CollateralReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CollateralReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CollateralReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CollateralReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CollateralReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CollateralReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CollateralReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CollateralReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CollateralReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CollateralReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CollateralReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CollateralReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CollateralReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CollateralReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CollateralReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CollateralReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CollateralReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CollateralReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CollateralReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CollateralReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CollateralReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CollateralReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CollateralReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CollateralReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CollateralReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CollateralReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CollateralReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CollateralReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CollateralReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CollateralReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CollateralReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CollateralReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CollateralReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CollateralReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CollateralReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CollateralReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CollateralReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CollateralReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CollateralReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CollateralReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message CollateralReport
decode_CollateralReport_grpMiscFees(L, R) -> decode_CollateralReport_grpMiscFees(L, undefined, R).
decode_CollateralReport_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_CollateralReport_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_CollateralReport_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_CollateralReport_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_CollateralReport_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CollateralReport
decode_CollateralReport_grpPartyIDs(L, R) -> decode_CollateralReport_grpPartyIDs(L, undefined, R).
decode_CollateralReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CollateralReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CollateralReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CollateralReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CollateralReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CollateralReport
decode_CollateralReport_grpPartySubIDs(L, R) -> decode_CollateralReport_grpPartySubIDs(L, undefined, R).
decode_CollateralReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CollateralReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CollateralReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CollateralReport
decode_CollateralReport_grpSecurityAltID(L, R) -> decode_CollateralReport_grpSecurityAltID(L, undefined, R).
decode_CollateralReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CollateralReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CollateralReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message CollateralReport
decode_CollateralReport_grpSettlPartyIDs(L, R) -> decode_CollateralReport_grpSettlPartyIDs(L, undefined, R).
decode_CollateralReport_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_CollateralReport_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_CollateralReport_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_CollateralReport_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_CollateralReport_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message CollateralReport
decode_CollateralReport_grpSettlPartySubIDs(L, R) -> decode_CollateralReport_grpSettlPartySubIDs(L, undefined, R).
decode_CollateralReport_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_CollateralReport_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_CollateralReport_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message CollateralReport
decode_CollateralReport_grpStipulations(L, R) -> decode_CollateralReport_grpStipulations(L, undefined, R).
decode_CollateralReport_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_CollateralReport_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_CollateralReport_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrades in message CollateralReport
decode_CollateralReport_grpTrades(L, R) -> decode_CollateralReport_grpTrades(L, undefined, R).
decode_CollateralReport_grpTrades([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpTrades([{'TradeReportID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpTrades(T, def(Delim,H), R#group{fields = F#{'TradeReportID'          => V}});
decode_CollateralReport_grpTrades([{'SecondaryTradeReportID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpTrades(T, def(Delim,H), R#group{fields = F#{'SecondaryTradeReportID' => V}});
decode_CollateralReport_grpTrades(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message CollateralReport
decode_CollateralReport_grpTrdRegTimestamps(L, R) -> decode_CollateralReport_grpTrdRegTimestamps(L, undefined, R).
decode_CollateralReport_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_CollateralReport_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_CollateralReport_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_CollateralReport_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CollateralReport
decode_CollateralReport_grpUnderlyingSecurityAltID(L, R) -> decode_CollateralReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CollateralReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CollateralReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CollateralReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CollateralReport
decode_CollateralReport_grpUnderlyingStips(L, R) -> decode_CollateralReport_grpUnderlyingStips(L, undefined, R).
decode_CollateralReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CollateralReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CollateralReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CollateralReport
decode_CollateralReport_grpUnderlyings(L, R) -> decode_CollateralReport_grpUnderlyings(L, undefined, R).
decode_CollateralReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CollateralReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CollateralReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CollateralReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CollateralReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CollateralReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CollateralReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CollateralReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CollateralReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CollateralRequest
decode_CollateralRequest_grpEvents(L, R) -> decode_CollateralRequest_grpEvents(L, undefined, R).
decode_CollateralRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CollateralRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CollateralRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CollateralRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CollateralRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message CollateralRequest
decode_CollateralRequest_grpExecs(L, R) -> decode_CollateralRequest_grpExecs(L, undefined, R).
decode_CollateralRequest_grpExecs([{Delim     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpExecs([{'ExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID' => V}});
decode_CollateralRequest_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CollateralRequest
decode_CollateralRequest_grpLegSecurityAltID(L, R) -> decode_CollateralRequest_grpLegSecurityAltID(L, undefined, R).
decode_CollateralRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CollateralRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CollateralRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CollateralRequest
decode_CollateralRequest_grpLegs(L, R) -> decode_CollateralRequest_grpLegs(L, undefined, R).
decode_CollateralRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CollateralRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CollateralRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CollateralRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CollateralRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CollateralRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CollateralRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CollateralRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CollateralRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CollateralRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CollateralRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CollateralRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CollateralRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CollateralRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CollateralRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CollateralRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CollateralRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CollateralRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CollateralRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CollateralRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CollateralRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CollateralRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CollateralRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CollateralRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CollateralRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CollateralRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CollateralRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CollateralRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CollateralRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CollateralRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CollateralRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CollateralRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CollateralRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CollateralRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CollateralRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CollateralRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CollateralRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CollateralRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CollateralRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CollateralRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CollateralRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CollateralRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CollateralRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message CollateralRequest
decode_CollateralRequest_grpMiscFees(L, R) -> decode_CollateralRequest_grpMiscFees(L, undefined, R).
decode_CollateralRequest_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_CollateralRequest_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_CollateralRequest_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_CollateralRequest_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_CollateralRequest_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CollateralRequest
decode_CollateralRequest_grpPartyIDs(L, R) -> decode_CollateralRequest_grpPartyIDs(L, undefined, R).
decode_CollateralRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CollateralRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CollateralRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CollateralRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CollateralRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CollateralRequest
decode_CollateralRequest_grpPartySubIDs(L, R) -> decode_CollateralRequest_grpPartySubIDs(L, undefined, R).
decode_CollateralRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CollateralRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CollateralRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CollateralRequest
decode_CollateralRequest_grpSecurityAltID(L, R) -> decode_CollateralRequest_grpSecurityAltID(L, undefined, R).
decode_CollateralRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CollateralRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CollateralRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message CollateralRequest
decode_CollateralRequest_grpStipulations(L, R) -> decode_CollateralRequest_grpStipulations(L, undefined, R).
decode_CollateralRequest_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_CollateralRequest_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_CollateralRequest_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrades in message CollateralRequest
decode_CollateralRequest_grpTrades(L, R) -> decode_CollateralRequest_grpTrades(L, undefined, R).
decode_CollateralRequest_grpTrades([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpTrades([{'TradeReportID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpTrades(T, def(Delim,H), R#group{fields = F#{'TradeReportID'          => V}});
decode_CollateralRequest_grpTrades([{'SecondaryTradeReportID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpTrades(T, def(Delim,H), R#group{fields = F#{'SecondaryTradeReportID' => V}});
decode_CollateralRequest_grpTrades(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message CollateralRequest
decode_CollateralRequest_grpTrdRegTimestamps(L, R) -> decode_CollateralRequest_grpTrdRegTimestamps(L, undefined, R).
decode_CollateralRequest_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_CollateralRequest_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_CollateralRequest_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_CollateralRequest_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CollateralRequest
decode_CollateralRequest_grpUnderlyingSecurityAltID(L, R) -> decode_CollateralRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CollateralRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CollateralRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CollateralRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CollateralRequest
decode_CollateralRequest_grpUnderlyingStips(L, R) -> decode_CollateralRequest_grpUnderlyingStips(L, undefined, R).
decode_CollateralRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CollateralRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CollateralRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CollateralRequest
decode_CollateralRequest_grpUnderlyings(L, R) -> decode_CollateralRequest_grpUnderlyings(L, undefined, R).
decode_CollateralRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CollateralRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CollateralRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CollateralRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CollateralRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CollateralRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CollateralRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CollateralRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CollateralRequest_grpUnderlyings([{'CollAction'=H                          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'CollAction'                           => V}});
decode_CollateralRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CollateralResponse
decode_CollateralResponse_grpEvents(L, R) -> decode_CollateralResponse_grpEvents(L, undefined, R).
decode_CollateralResponse_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CollateralResponse_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CollateralResponse_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CollateralResponse_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CollateralResponse_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpExecs in message CollateralResponse
decode_CollateralResponse_grpExecs(L, R) -> decode_CollateralResponse_grpExecs(L, undefined, R).
decode_CollateralResponse_grpExecs([{Delim     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpExecs([{'ExecID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpExecs(T, def(Delim,H), R#group{fields = F#{'ExecID' => V}});
decode_CollateralResponse_grpExecs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CollateralResponse
decode_CollateralResponse_grpLegSecurityAltID(L, R) -> decode_CollateralResponse_grpLegSecurityAltID(L, undefined, R).
decode_CollateralResponse_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CollateralResponse_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CollateralResponse_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CollateralResponse
decode_CollateralResponse_grpLegs(L, R) -> decode_CollateralResponse_grpLegs(L, undefined, R).
decode_CollateralResponse_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CollateralResponse_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CollateralResponse_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CollateralResponse_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CollateralResponse_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CollateralResponse_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CollateralResponse_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CollateralResponse_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CollateralResponse_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CollateralResponse_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CollateralResponse_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CollateralResponse_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CollateralResponse_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CollateralResponse_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CollateralResponse_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CollateralResponse_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CollateralResponse_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CollateralResponse_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CollateralResponse_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CollateralResponse_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CollateralResponse_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CollateralResponse_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CollateralResponse_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CollateralResponse_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CollateralResponse_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CollateralResponse_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CollateralResponse_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CollateralResponse_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CollateralResponse_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CollateralResponse_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CollateralResponse_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CollateralResponse_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CollateralResponse_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CollateralResponse_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CollateralResponse_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CollateralResponse_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CollateralResponse_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CollateralResponse_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CollateralResponse_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CollateralResponse_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CollateralResponse_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CollateralResponse_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CollateralResponse_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message CollateralResponse
decode_CollateralResponse_grpMiscFees(L, R) -> decode_CollateralResponse_grpMiscFees(L, undefined, R).
decode_CollateralResponse_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_CollateralResponse_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_CollateralResponse_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_CollateralResponse_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_CollateralResponse_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CollateralResponse
decode_CollateralResponse_grpPartyIDs(L, R) -> decode_CollateralResponse_grpPartyIDs(L, undefined, R).
decode_CollateralResponse_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CollateralResponse_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CollateralResponse_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CollateralResponse_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CollateralResponse_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CollateralResponse
decode_CollateralResponse_grpPartySubIDs(L, R) -> decode_CollateralResponse_grpPartySubIDs(L, undefined, R).
decode_CollateralResponse_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CollateralResponse_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CollateralResponse_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CollateralResponse
decode_CollateralResponse_grpSecurityAltID(L, R) -> decode_CollateralResponse_grpSecurityAltID(L, undefined, R).
decode_CollateralResponse_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CollateralResponse_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CollateralResponse_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message CollateralResponse
decode_CollateralResponse_grpStipulations(L, R) -> decode_CollateralResponse_grpStipulations(L, undefined, R).
decode_CollateralResponse_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_CollateralResponse_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_CollateralResponse_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrades in message CollateralResponse
decode_CollateralResponse_grpTrades(L, R) -> decode_CollateralResponse_grpTrades(L, undefined, R).
decode_CollateralResponse_grpTrades([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpTrades([{'TradeReportID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpTrades(T, def(Delim,H), R#group{fields = F#{'TradeReportID'          => V}});
decode_CollateralResponse_grpTrades([{'SecondaryTradeReportID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpTrades(T, def(Delim,H), R#group{fields = F#{'SecondaryTradeReportID' => V}});
decode_CollateralResponse_grpTrades(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message CollateralResponse
decode_CollateralResponse_grpTrdRegTimestamps(L, R) -> decode_CollateralResponse_grpTrdRegTimestamps(L, undefined, R).
decode_CollateralResponse_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_CollateralResponse_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_CollateralResponse_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_CollateralResponse_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CollateralResponse
decode_CollateralResponse_grpUnderlyingSecurityAltID(L, R) -> decode_CollateralResponse_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CollateralResponse_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CollateralResponse_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CollateralResponse_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CollateralResponse
decode_CollateralResponse_grpUnderlyingStips(L, R) -> decode_CollateralResponse_grpUnderlyingStips(L, undefined, R).
decode_CollateralResponse_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CollateralResponse_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CollateralResponse_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CollateralResponse
decode_CollateralResponse_grpUnderlyings(L, R) -> decode_CollateralResponse_grpUnderlyings(L, undefined, R).
decode_CollateralResponse_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CollateralResponse_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CollateralResponse_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CollateralResponse_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CollateralResponse_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CollateralResponse_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CollateralResponse_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CollateralResponse_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CollateralResponse_grpUnderlyings([{'CollAction'=H                          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CollateralResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'CollAction'                           => V}});
decode_CollateralResponse_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpCapacities in message Confirmation
decode_Confirmation_grpCapacities(L, R) -> decode_Confirmation_grpCapacities(L, undefined, R).
decode_Confirmation_grpCapacities([{Delim                ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpCapacities([{'OrderCapacity'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpCapacities(T, def(Delim,H), R#group{fields = F#{'OrderCapacity'     => V}});
decode_Confirmation_grpCapacities([{'OrderRestrictions'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpCapacities(T, def(Delim,H), R#group{fields = F#{'OrderRestrictions' => V}});
decode_Confirmation_grpCapacities([{'OrderCapacityQty'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpCapacities(T, def(Delim,H), R#group{fields = F#{'OrderCapacityQty'  => V}});
decode_Confirmation_grpCapacities(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message Confirmation
decode_Confirmation_grpDlvyInst(L, R) -> decode_Confirmation_grpDlvyInst(L, undefined, R).
decode_Confirmation_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_Confirmation_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_Confirmation_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_Confirmation_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message Confirmation
decode_Confirmation_grpEvents(L, R) -> decode_Confirmation_grpEvents(L, undefined, R).
decode_Confirmation_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_Confirmation_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_Confirmation_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_Confirmation_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_Confirmation_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message Confirmation
decode_Confirmation_grpInstrAttrib(L, R) -> decode_Confirmation_grpInstrAttrib(L, undefined, R).
decode_Confirmation_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_Confirmation_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_Confirmation_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message Confirmation
decode_Confirmation_grpLegSecurityAltID(L, R) -> decode_Confirmation_grpLegSecurityAltID(L, undefined, R).
decode_Confirmation_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_Confirmation_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_Confirmation_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message Confirmation
decode_Confirmation_grpLegs(L, R) -> decode_Confirmation_grpLegs(L, undefined, R).
decode_Confirmation_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_Confirmation_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_Confirmation_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_Confirmation_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_Confirmation_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_Confirmation_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_Confirmation_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_Confirmation_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_Confirmation_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_Confirmation_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_Confirmation_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_Confirmation_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_Confirmation_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_Confirmation_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_Confirmation_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_Confirmation_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_Confirmation_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_Confirmation_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_Confirmation_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_Confirmation_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_Confirmation_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_Confirmation_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_Confirmation_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_Confirmation_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_Confirmation_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_Confirmation_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_Confirmation_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_Confirmation_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_Confirmation_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_Confirmation_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_Confirmation_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_Confirmation_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_Confirmation_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_Confirmation_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_Confirmation_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_Confirmation_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_Confirmation_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_Confirmation_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_Confirmation_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_Confirmation_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_Confirmation_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_Confirmation_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_Confirmation_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message Confirmation
decode_Confirmation_grpMiscFees(L, R) -> decode_Confirmation_grpMiscFees(L, undefined, R).
decode_Confirmation_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_Confirmation_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_Confirmation_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_Confirmation_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_Confirmation_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message Confirmation
decode_Confirmation_grpNested2PartyIDs(L, R) -> decode_Confirmation_grpNested2PartyIDs(L, undefined, R).
decode_Confirmation_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_Confirmation_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_Confirmation_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_Confirmation_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_Confirmation_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message Confirmation
decode_Confirmation_grpNested2PartySubIDs(L, R) -> decode_Confirmation_grpNested2PartySubIDs(L, undefined, R).
decode_Confirmation_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_Confirmation_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_Confirmation_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpOrders in message Confirmation
decode_Confirmation_grpOrders(L, R) -> decode_Confirmation_grpOrders(L, undefined, R).
decode_Confirmation_grpOrders([{Delim                ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpOrders([{'ClOrdID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdID'           => V}});
decode_Confirmation_grpOrders([{'OrderID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderID'           => V}});
decode_Confirmation_grpOrders([{'SecondaryOrderID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryOrderID'  => V}});
decode_Confirmation_grpOrders([{'SecondaryClOrdID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'  => V}});
decode_Confirmation_grpOrders([{'ListID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'ListID'            => V}});
decode_Confirmation_grpOrders([{'NoNested2PartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs' => V}});
decode_Confirmation_grpOrders([{'OrderQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderQty'          => V}});
decode_Confirmation_grpOrders([{'OrderAvgPx'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderAvgPx'        => V}});
decode_Confirmation_grpOrders([{'OrderBookingQty'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderBookingQty'   => V}});
decode_Confirmation_grpOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message Confirmation
decode_Confirmation_grpPartyIDs(L, R) -> decode_Confirmation_grpPartyIDs(L, undefined, R).
decode_Confirmation_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_Confirmation_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_Confirmation_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_Confirmation_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_Confirmation_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message Confirmation
decode_Confirmation_grpPartySubIDs(L, R) -> decode_Confirmation_grpPartySubIDs(L, undefined, R).
decode_Confirmation_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_Confirmation_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_Confirmation_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message Confirmation
decode_Confirmation_grpSecurityAltID(L, R) -> decode_Confirmation_grpSecurityAltID(L, undefined, R).
decode_Confirmation_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_Confirmation_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_Confirmation_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message Confirmation
decode_Confirmation_grpSettlPartyIDs(L, R) -> decode_Confirmation_grpSettlPartyIDs(L, undefined, R).
decode_Confirmation_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_Confirmation_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_Confirmation_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_Confirmation_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_Confirmation_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message Confirmation
decode_Confirmation_grpSettlPartySubIDs(L, R) -> decode_Confirmation_grpSettlPartySubIDs(L, undefined, R).
decode_Confirmation_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_Confirmation_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_Confirmation_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message Confirmation
decode_Confirmation_grpStipulations(L, R) -> decode_Confirmation_grpStipulations(L, undefined, R).
decode_Confirmation_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_Confirmation_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_Confirmation_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message Confirmation
decode_Confirmation_grpTrdRegTimestamps(L, R) -> decode_Confirmation_grpTrdRegTimestamps(L, undefined, R).
decode_Confirmation_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_Confirmation_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_Confirmation_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_Confirmation_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message Confirmation
decode_Confirmation_grpUnderlyingSecurityAltID(L, R) -> decode_Confirmation_grpUnderlyingSecurityAltID(L, undefined, R).
decode_Confirmation_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_Confirmation_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_Confirmation_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message Confirmation
decode_Confirmation_grpUnderlyingStips(L, R) -> decode_Confirmation_grpUnderlyingStips(L, undefined, R).
decode_Confirmation_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_Confirmation_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_Confirmation_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message Confirmation
decode_Confirmation_grpUnderlyings(L, R) -> decode_Confirmation_grpUnderlyings(L, undefined, R).
decode_Confirmation_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Confirmation_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_Confirmation_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_Confirmation_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_Confirmation_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_Confirmation_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_Confirmation_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_Confirmation_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_Confirmation_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Confirmation_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_Confirmation_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message ConfirmationRequest
decode_ConfirmationRequest_grpNested2PartyIDs(L, R) -> decode_ConfirmationRequest_grpNested2PartyIDs(L, undefined, R).
decode_ConfirmationRequest_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ConfirmationRequest_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_ConfirmationRequest_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_ConfirmationRequest_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_ConfirmationRequest_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_ConfirmationRequest_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message ConfirmationRequest
decode_ConfirmationRequest_grpNested2PartySubIDs(L, R) -> decode_ConfirmationRequest_grpNested2PartySubIDs(L, undefined, R).
decode_ConfirmationRequest_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ConfirmationRequest_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_ConfirmationRequest_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_ConfirmationRequest_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpOrders in message ConfirmationRequest
decode_ConfirmationRequest_grpOrders(L, R) -> decode_ConfirmationRequest_grpOrders(L, undefined, R).
decode_ConfirmationRequest_grpOrders([{Delim                ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ConfirmationRequest_grpOrders([{'ClOrdID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdID'           => V}});
decode_ConfirmationRequest_grpOrders([{'OrderID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderID'           => V}});
decode_ConfirmationRequest_grpOrders([{'SecondaryOrderID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryOrderID'  => V}});
decode_ConfirmationRequest_grpOrders([{'SecondaryClOrdID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'  => V}});
decode_ConfirmationRequest_grpOrders([{'ListID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'ListID'            => V}});
decode_ConfirmationRequest_grpOrders([{'NoNested2PartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs' => V}});
decode_ConfirmationRequest_grpOrders([{'OrderQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderQty'          => V}});
decode_ConfirmationRequest_grpOrders([{'OrderAvgPx'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderAvgPx'        => V}});
decode_ConfirmationRequest_grpOrders([{'OrderBookingQty'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ConfirmationRequest_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderBookingQty'   => V}});
decode_ConfirmationRequest_grpOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpAllocs(L, R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_CrossOrderCancelReplaceRequest_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_CrossOrderCancelReplaceRequest_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_CrossOrderCancelReplaceRequest_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_CrossOrderCancelReplaceRequest_grpAllocs([{'NoNestedPartyIDs'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'   => V}});
decode_CrossOrderCancelReplaceRequest_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_CrossOrderCancelReplaceRequest_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpEvents(L, R) -> decode_CrossOrderCancelReplaceRequest_grpEvents(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CrossOrderCancelReplaceRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CrossOrderCancelReplaceRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CrossOrderCancelReplaceRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CrossOrderCancelReplaceRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID(L, R) -> decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CrossOrderCancelReplaceRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpLegs(L, R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CrossOrderCancelReplaceRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(L, R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_CrossOrderCancelReplaceRequest_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs(L, R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_CrossOrderCancelReplaceRequest_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpPartyIDs(L, R) -> decode_CrossOrderCancelReplaceRequest_grpPartyIDs(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CrossOrderCancelReplaceRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CrossOrderCancelReplaceRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CrossOrderCancelReplaceRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CrossOrderCancelReplaceRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpPartySubIDs(L, R) -> decode_CrossOrderCancelReplaceRequest_grpPartySubIDs(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CrossOrderCancelReplaceRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CrossOrderCancelReplaceRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpSecurityAltID(L, R) -> decode_CrossOrderCancelReplaceRequest_grpSecurityAltID(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CrossOrderCancelReplaceRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CrossOrderCancelReplaceRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSides in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpSides(L, R) -> decode_CrossOrderCancelReplaceRequest_grpSides(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpSides([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpSides([{'Side'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'Side'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'ClOrdID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdID'              => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'SecondaryClOrdID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'     => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'ClOrdLinkID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdLinkID'          => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'NoPartyIDs'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'           => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'TradeOriginationDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeOriginationDate' => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'TradeDate'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeDate'            => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'Account'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'Account'              => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'AcctIDSource'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'         => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'AccountType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'AccountType'          => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'DayBookingInst'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'DayBookingInst'       => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'BookingUnit'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'BookingUnit'          => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'PreallocMethod'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'PreallocMethod'       => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'AllocID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'AllocID'              => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'NoAllocs'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'NoAllocs'             => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'QtyType'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'QtyType'              => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'OrderQty'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderQty'             => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'CashOrderQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CashOrderQty'         => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'OrderPercent'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderPercent'         => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'RoundingDirection'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'RoundingDirection'    => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'RoundingModulus'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'RoundingModulus'      => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'Commission'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'Commission'           => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'CommType'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CommType'             => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'CommCurrency'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CommCurrency'         => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'FundRenewWaiv'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'        => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'OrderCapacity'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderCapacity'        => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'OrderRestrictions'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderRestrictions'    => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'CustOrderCapacity'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CustOrderCapacity'    => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'ForexReq'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ForexReq'             => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'SettlCurrency'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'SettlCurrency'        => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'BookingType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'BookingType'          => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'Text'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'Text'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'EncodedTextLen'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'       => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'EncodedText'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedText'          => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'PositionEffect'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'PositionEffect'       => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'CoveredOrUncovered'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CoveredOrUncovered'   => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'CashMargin'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CashMargin'           => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'ClearingFeeIndicator'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ClearingFeeIndicator' => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'SolicitedFlag'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'SolicitedFlag'        => V}});
decode_CrossOrderCancelReplaceRequest_grpSides([{'SideComplianceID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'SideComplianceID'     => V}});
decode_CrossOrderCancelReplaceRequest_grpSides(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpStipulations(L, R) -> decode_CrossOrderCancelReplaceRequest_grpStipulations(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_CrossOrderCancelReplaceRequest_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_CrossOrderCancelReplaceRequest_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpTradingSessions(L, R) -> decode_CrossOrderCancelReplaceRequest_grpTradingSessions(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_CrossOrderCancelReplaceRequest_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_CrossOrderCancelReplaceRequest_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips(L, R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CrossOrderCancelReplaceRequest
decode_CrossOrderCancelReplaceRequest_grpUnderlyings(L, R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(L, undefined, R).
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CrossOrderCancelReplaceRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpEvents(L, R) -> decode_CrossOrderCancelRequest_grpEvents(L, undefined, R).
decode_CrossOrderCancelRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_CrossOrderCancelRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_CrossOrderCancelRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_CrossOrderCancelRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_CrossOrderCancelRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpLegSecurityAltID(L, R) -> decode_CrossOrderCancelRequest_grpLegSecurityAltID(L, undefined, R).
decode_CrossOrderCancelRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_CrossOrderCancelRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_CrossOrderCancelRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpLegs(L, R) -> decode_CrossOrderCancelRequest_grpLegs(L, undefined, R).
decode_CrossOrderCancelRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_CrossOrderCancelRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_CrossOrderCancelRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_CrossOrderCancelRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_CrossOrderCancelRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_CrossOrderCancelRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_CrossOrderCancelRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_CrossOrderCancelRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpPartyIDs(L, R) -> decode_CrossOrderCancelRequest_grpPartyIDs(L, undefined, R).
decode_CrossOrderCancelRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_CrossOrderCancelRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_CrossOrderCancelRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_CrossOrderCancelRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_CrossOrderCancelRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpPartySubIDs(L, R) -> decode_CrossOrderCancelRequest_grpPartySubIDs(L, undefined, R).
decode_CrossOrderCancelRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_CrossOrderCancelRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_CrossOrderCancelRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpSecurityAltID(L, R) -> decode_CrossOrderCancelRequest_grpSecurityAltID(L, undefined, R).
decode_CrossOrderCancelRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_CrossOrderCancelRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_CrossOrderCancelRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSides in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpSides(L, R) -> decode_CrossOrderCancelRequest_grpSides(L, undefined, R).
decode_CrossOrderCancelRequest_grpSides([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpSides([{'Side'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'Side'                 => V}});
decode_CrossOrderCancelRequest_grpSides([{'OrigClOrdID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrigClOrdID'          => V}});
decode_CrossOrderCancelRequest_grpSides([{'ClOrdID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdID'              => V}});
decode_CrossOrderCancelRequest_grpSides([{'SecondaryClOrdID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'     => V}});
decode_CrossOrderCancelRequest_grpSides([{'ClOrdLinkID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdLinkID'          => V}});
decode_CrossOrderCancelRequest_grpSides([{'OrigOrdModTime'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrigOrdModTime'       => V}});
decode_CrossOrderCancelRequest_grpSides([{'NoPartyIDs'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'           => V}});
decode_CrossOrderCancelRequest_grpSides([{'TradeOriginationDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeOriginationDate' => V}});
decode_CrossOrderCancelRequest_grpSides([{'TradeDate'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeDate'            => V}});
decode_CrossOrderCancelRequest_grpSides([{'OrderQty'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderQty'             => V}});
decode_CrossOrderCancelRequest_grpSides([{'CashOrderQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'CashOrderQty'         => V}});
decode_CrossOrderCancelRequest_grpSides([{'OrderPercent'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderPercent'         => V}});
decode_CrossOrderCancelRequest_grpSides([{'RoundingDirection'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'RoundingDirection'    => V}});
decode_CrossOrderCancelRequest_grpSides([{'RoundingModulus'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'RoundingModulus'      => V}});
decode_CrossOrderCancelRequest_grpSides([{'ComplianceID'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'ComplianceID'         => V}});
decode_CrossOrderCancelRequest_grpSides([{'Text'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'Text'                 => V}});
decode_CrossOrderCancelRequest_grpSides([{'EncodedTextLen'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'       => V}});
decode_CrossOrderCancelRequest_grpSides([{'EncodedText'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedText'          => V}});
decode_CrossOrderCancelRequest_grpSides(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID(L, R) -> decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_CrossOrderCancelRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpUnderlyingStips(L, R) -> decode_CrossOrderCancelRequest_grpUnderlyingStips(L, undefined, R).
decode_CrossOrderCancelRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_CrossOrderCancelRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_CrossOrderCancelRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message CrossOrderCancelRequest
decode_CrossOrderCancelRequest_grpUnderlyings(L, R) -> decode_CrossOrderCancelRequest_grpUnderlyings(L, undefined, R).
decode_CrossOrderCancelRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_CrossOrderCancelRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_CrossOrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_CrossOrderCancelRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message DerivativeSecurityList
decode_DerivativeSecurityList_grpEvents(L, R) -> decode_DerivativeSecurityList_grpEvents(L, undefined, R).
decode_DerivativeSecurityList_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_DerivativeSecurityList_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_DerivativeSecurityList_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_DerivativeSecurityList_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_DerivativeSecurityList_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message DerivativeSecurityList
decode_DerivativeSecurityList_grpInstrAttrib(L, R) -> decode_DerivativeSecurityList_grpInstrAttrib(L, undefined, R).
decode_DerivativeSecurityList_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_DerivativeSecurityList_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_DerivativeSecurityList_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message DerivativeSecurityList
decode_DerivativeSecurityList_grpLegSecurityAltID(L, R) -> decode_DerivativeSecurityList_grpLegSecurityAltID(L, undefined, R).
decode_DerivativeSecurityList_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_DerivativeSecurityList_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_DerivativeSecurityList_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message DerivativeSecurityList
decode_DerivativeSecurityList_grpLegs(L, R) -> decode_DerivativeSecurityList_grpLegs(L, undefined, R).
decode_DerivativeSecurityList_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_DerivativeSecurityList_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_DerivativeSecurityList_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_DerivativeSecurityList_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_DerivativeSecurityList_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_DerivativeSecurityList_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_DerivativeSecurityList_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_DerivativeSecurityList_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_DerivativeSecurityList_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_DerivativeSecurityList_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_DerivativeSecurityList_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_DerivativeSecurityList_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_DerivativeSecurityList_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_DerivativeSecurityList_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_DerivativeSecurityList_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_DerivativeSecurityList_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_DerivativeSecurityList_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_DerivativeSecurityList_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_DerivativeSecurityList_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_DerivativeSecurityList_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_DerivativeSecurityList_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_DerivativeSecurityList_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_DerivativeSecurityList_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_DerivativeSecurityList_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_DerivativeSecurityList_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_DerivativeSecurityList_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_DerivativeSecurityList_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_DerivativeSecurityList_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_DerivativeSecurityList_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_DerivativeSecurityList_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_DerivativeSecurityList_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_DerivativeSecurityList_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_DerivativeSecurityList_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_DerivativeSecurityList_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_DerivativeSecurityList_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_DerivativeSecurityList_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message DerivativeSecurityList
decode_DerivativeSecurityList_grpRelatedSym(L, R) -> decode_DerivativeSecurityList_grpRelatedSym(L, undefined, R).
decode_DerivativeSecurityList_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'ExpirationCycle'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ExpirationCycle'            => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'DeliveryForm'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DeliveryForm'               => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'PctAtRisk'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PctAtRisk'                  => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'NoInstrAttrib'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoInstrAttrib'              => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'Text'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Text'                       => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'EncodedTextLen'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'             => V}});
decode_DerivativeSecurityList_grpRelatedSym([{'EncodedText'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedText'                => V}});
decode_DerivativeSecurityList_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message DerivativeSecurityList
decode_DerivativeSecurityList_grpSecurityAltID(L, R) -> decode_DerivativeSecurityList_grpSecurityAltID(L, undefined, R).
decode_DerivativeSecurityList_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_DerivativeSecurityList_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_DerivativeSecurityList_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message DerivativeSecurityList
decode_DerivativeSecurityList_grpUnderlyingSecurityAltID(L, R) -> decode_DerivativeSecurityList_grpUnderlyingSecurityAltID(L, undefined, R).
decode_DerivativeSecurityList_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_DerivativeSecurityList_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_DerivativeSecurityList_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message DerivativeSecurityList
decode_DerivativeSecurityList_grpUnderlyingStips(L, R) -> decode_DerivativeSecurityList_grpUnderlyingStips(L, undefined, R).
decode_DerivativeSecurityList_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityList_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_DerivativeSecurityList_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityList_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_DerivativeSecurityList_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message DerivativeSecurityListRequest
decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID(L, R) -> decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_DerivativeSecurityListRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message DerivativeSecurityListRequest
decode_DerivativeSecurityListRequest_grpUnderlyingStips(L, R) -> decode_DerivativeSecurityListRequest_grpUnderlyingStips(L, undefined, R).
decode_DerivativeSecurityListRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DerivativeSecurityListRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityListRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_DerivativeSecurityListRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DerivativeSecurityListRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_DerivativeSecurityListRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message DontKnowTrade
decode_DontKnowTrade_grpEvents(L, R) -> decode_DontKnowTrade_grpEvents(L, undefined, R).
decode_DontKnowTrade_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_DontKnowTrade_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_DontKnowTrade_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_DontKnowTrade_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_DontKnowTrade_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message DontKnowTrade
decode_DontKnowTrade_grpLegSecurityAltID(L, R) -> decode_DontKnowTrade_grpLegSecurityAltID(L, undefined, R).
decode_DontKnowTrade_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_DontKnowTrade_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_DontKnowTrade_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message DontKnowTrade
decode_DontKnowTrade_grpLegs(L, R) -> decode_DontKnowTrade_grpLegs(L, undefined, R).
decode_DontKnowTrade_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_DontKnowTrade_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_DontKnowTrade_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_DontKnowTrade_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_DontKnowTrade_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_DontKnowTrade_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_DontKnowTrade_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_DontKnowTrade_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_DontKnowTrade_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_DontKnowTrade_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_DontKnowTrade_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_DontKnowTrade_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_DontKnowTrade_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_DontKnowTrade_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_DontKnowTrade_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_DontKnowTrade_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_DontKnowTrade_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_DontKnowTrade_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_DontKnowTrade_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_DontKnowTrade_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_DontKnowTrade_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_DontKnowTrade_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_DontKnowTrade_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_DontKnowTrade_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_DontKnowTrade_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_DontKnowTrade_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_DontKnowTrade_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_DontKnowTrade_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_DontKnowTrade_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_DontKnowTrade_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_DontKnowTrade_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_DontKnowTrade_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_DontKnowTrade_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_DontKnowTrade_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_DontKnowTrade_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_DontKnowTrade_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_DontKnowTrade_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_DontKnowTrade_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_DontKnowTrade_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_DontKnowTrade_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_DontKnowTrade_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_DontKnowTrade_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_DontKnowTrade_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message DontKnowTrade
decode_DontKnowTrade_grpSecurityAltID(L, R) -> decode_DontKnowTrade_grpSecurityAltID(L, undefined, R).
decode_DontKnowTrade_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_DontKnowTrade_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_DontKnowTrade_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message DontKnowTrade
decode_DontKnowTrade_grpUnderlyingSecurityAltID(L, R) -> decode_DontKnowTrade_grpUnderlyingSecurityAltID(L, undefined, R).
decode_DontKnowTrade_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_DontKnowTrade_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_DontKnowTrade_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message DontKnowTrade
decode_DontKnowTrade_grpUnderlyingStips(L, R) -> decode_DontKnowTrade_grpUnderlyingStips(L, undefined, R).
decode_DontKnowTrade_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_DontKnowTrade_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_DontKnowTrade_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message DontKnowTrade
decode_DontKnowTrade_grpUnderlyings(L, R) -> decode_DontKnowTrade_grpUnderlyings(L, undefined, R).
decode_DontKnowTrade_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_DontKnowTrade_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_DontKnowTrade_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_DontKnowTrade_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_DontKnowTrade_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_DontKnowTrade_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_DontKnowTrade_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_DontKnowTrade_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_DontKnowTrade_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_DontKnowTrade_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message Email
decode_Email_grpEvents(L, R) -> decode_Email_grpEvents(L, undefined, R).
decode_Email_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_Email_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_Email_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_Email_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_Email_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message Email
decode_Email_grpLegSecurityAltID(L, R) -> decode_Email_grpLegSecurityAltID(L, undefined, R).
decode_Email_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_Email_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_Email_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message Email
decode_Email_grpLegs(L, R) -> decode_Email_grpLegs(L, undefined, R).
decode_Email_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_Email_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_Email_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_Email_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_Email_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_Email_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_Email_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_Email_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_Email_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_Email_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_Email_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_Email_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_Email_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_Email_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_Email_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_Email_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_Email_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_Email_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_Email_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_Email_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_Email_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_Email_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_Email_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_Email_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_Email_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_Email_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_Email_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_Email_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_Email_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_Email_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_Email_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_Email_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_Email_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_Email_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_Email_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_Email_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_Email_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_Email_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_Email_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_Email_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_Email_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_Email_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_Email_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLinesOfText in message Email
decode_Email_grpLinesOfText(L, R) -> decode_Email_grpLinesOfText(L, undefined, R).
decode_Email_grpLinesOfText([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpLinesOfText([{'Text'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLinesOfText(T, def(Delim,H), R#group{fields = F#{'Text'           => V}});
decode_Email_grpLinesOfText([{'EncodedTextLen'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLinesOfText(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen' => V}});
decode_Email_grpLinesOfText([{'EncodedText'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpLinesOfText(T, def(Delim,H), R#group{fields = F#{'EncodedText'    => V}});
decode_Email_grpLinesOfText(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message Email
decode_Email_grpRelatedSym(L, R) -> decode_Email_grpRelatedSym(L, undefined, R).
decode_Email_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_Email_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_Email_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_Email_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_Email_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_Email_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_Email_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_Email_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_Email_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_Email_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_Email_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_Email_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_Email_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_Email_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_Email_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_Email_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_Email_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_Email_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_Email_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_Email_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_Email_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_Email_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_Email_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_Email_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_Email_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_Email_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_Email_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_Email_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_Email_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_Email_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_Email_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_Email_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_Email_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_Email_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_Email_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_Email_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_Email_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_Email_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_Email_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_Email_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_Email_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_Email_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_Email_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_Email_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRoutingIDs in message Email
decode_Email_grpRoutingIDs(L, R) -> decode_Email_grpRoutingIDs(L, undefined, R).
decode_Email_grpRoutingIDs([{Delim          ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpRoutingIDs([{'RoutingType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRoutingIDs(T, def(Delim,H), R#group{fields = F#{'RoutingType' => V}});
decode_Email_grpRoutingIDs([{'RoutingID'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpRoutingIDs(T, def(Delim,H), R#group{fields = F#{'RoutingID'   => V}});
decode_Email_grpRoutingIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message Email
decode_Email_grpSecurityAltID(L, R) -> decode_Email_grpSecurityAltID(L, undefined, R).
decode_Email_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_Email_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_Email_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message Email
decode_Email_grpUnderlyingSecurityAltID(L, R) -> decode_Email_grpUnderlyingSecurityAltID(L, undefined, R).
decode_Email_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_Email_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_Email_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message Email
decode_Email_grpUnderlyingStips(L, R) -> decode_Email_grpUnderlyingStips(L, undefined, R).
decode_Email_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_Email_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_Email_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message Email
decode_Email_grpUnderlyings(L, R) -> decode_Email_grpUnderlyings(L, undefined, R).
decode_Email_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Email_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_Email_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_Email_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_Email_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_Email_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_Email_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_Email_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_Email_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_Email_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_Email_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_Email_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_Email_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_Email_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_Email_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_Email_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_Email_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_Email_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_Email_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_Email_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_Email_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_Email_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_Email_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_Email_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_Email_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_Email_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_Email_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_Email_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_Email_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_Email_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_Email_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_Email_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_Email_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_Email_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_Email_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_Email_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_Email_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_Email_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_Email_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_Email_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_Email_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_Email_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_Email_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_Email_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_Email_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_Email_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_Email_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_Email_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Email_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_Email_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpContAmts in message ExecutionReport
decode_ExecutionReport_grpContAmts(L, R) -> decode_ExecutionReport_grpContAmts(L, undefined, R).
decode_ExecutionReport_grpContAmts([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpContAmts([{'ContAmtType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContAmts(T, def(Delim,H), R#group{fields = F#{'ContAmtType'  => V}});
decode_ExecutionReport_grpContAmts([{'ContAmtValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContAmts(T, def(Delim,H), R#group{fields = F#{'ContAmtValue' => V}});
decode_ExecutionReport_grpContAmts([{'ContAmtCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContAmts(T, def(Delim,H), R#group{fields = F#{'ContAmtCurr'  => V}});
decode_ExecutionReport_grpContAmts(L, _Delim, R) -> {L, R}.

%% Parse Group: grpContraBrokers in message ExecutionReport
decode_ExecutionReport_grpContraBrokers(L, R) -> decode_ExecutionReport_grpContraBrokers(L, undefined, R).
decode_ExecutionReport_grpContraBrokers([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpContraBrokers([{'ContraBroker'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContraBrokers(T, def(Delim,H), R#group{fields = F#{'ContraBroker'    => V}});
decode_ExecutionReport_grpContraBrokers([{'ContraTrader'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContraBrokers(T, def(Delim,H), R#group{fields = F#{'ContraTrader'    => V}});
decode_ExecutionReport_grpContraBrokers([{'ContraTradeQty'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContraBrokers(T, def(Delim,H), R#group{fields = F#{'ContraTradeQty'  => V}});
decode_ExecutionReport_grpContraBrokers([{'ContraTradeTime'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContraBrokers(T, def(Delim,H), R#group{fields = F#{'ContraTradeTime' => V}});
decode_ExecutionReport_grpContraBrokers([{'ContraLegRefID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpContraBrokers(T, def(Delim,H), R#group{fields = F#{'ContraLegRefID'  => V}});
decode_ExecutionReport_grpContraBrokers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message ExecutionReport
decode_ExecutionReport_grpEvents(L, R) -> decode_ExecutionReport_grpEvents(L, undefined, R).
decode_ExecutionReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_ExecutionReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_ExecutionReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_ExecutionReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_ExecutionReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message ExecutionReport
decode_ExecutionReport_grpLegSecurityAltID(L, R) -> decode_ExecutionReport_grpLegSecurityAltID(L, undefined, R).
decode_ExecutionReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_ExecutionReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_ExecutionReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message ExecutionReport
decode_ExecutionReport_grpLegStipulations(L, R) -> decode_ExecutionReport_grpLegStipulations(L, undefined, R).
decode_ExecutionReport_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_ExecutionReport_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_ExecutionReport_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message ExecutionReport
decode_ExecutionReport_grpLegs(L, R) -> decode_ExecutionReport_grpLegs(L, undefined, R).
decode_ExecutionReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_ExecutionReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_ExecutionReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_ExecutionReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_ExecutionReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_ExecutionReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_ExecutionReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_ExecutionReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_ExecutionReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_ExecutionReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_ExecutionReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_ExecutionReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_ExecutionReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_ExecutionReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_ExecutionReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_ExecutionReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_ExecutionReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_ExecutionReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_ExecutionReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_ExecutionReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_ExecutionReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_ExecutionReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_ExecutionReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_ExecutionReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_ExecutionReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_ExecutionReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_ExecutionReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_ExecutionReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_ExecutionReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_ExecutionReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_ExecutionReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_ExecutionReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_ExecutionReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_ExecutionReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_ExecutionReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_ExecutionReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_ExecutionReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_ExecutionReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_ExecutionReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_ExecutionReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_ExecutionReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_ExecutionReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_ExecutionReport_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_ExecutionReport_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_ExecutionReport_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_ExecutionReport_grpLegs([{'LegPositionEffect'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPositionEffect'             => V}});
decode_ExecutionReport_grpLegs([{'LegCoveredOrUncovered'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCoveredOrUncovered'         => V}});
decode_ExecutionReport_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_ExecutionReport_grpLegs([{'LegRefID'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRefID'                      => V}});
decode_ExecutionReport_grpLegs([{'LegPrice'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPrice'                      => V}});
decode_ExecutionReport_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_ExecutionReport_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_ExecutionReport_grpLegs([{'LegLastPx'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLastPx'                     => V}});
decode_ExecutionReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message ExecutionReport
decode_ExecutionReport_grpMiscFees(L, R) -> decode_ExecutionReport_grpMiscFees(L, undefined, R).
decode_ExecutionReport_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_ExecutionReport_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_ExecutionReport_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_ExecutionReport_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_ExecutionReport_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message ExecutionReport
decode_ExecutionReport_grpNestedPartyIDs(L, R) -> decode_ExecutionReport_grpNestedPartyIDs(L, undefined, R).
decode_ExecutionReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_ExecutionReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_ExecutionReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_ExecutionReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_ExecutionReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message ExecutionReport
decode_ExecutionReport_grpNestedPartySubIDs(L, R) -> decode_ExecutionReport_grpNestedPartySubIDs(L, undefined, R).
decode_ExecutionReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_ExecutionReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_ExecutionReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message ExecutionReport
decode_ExecutionReport_grpPartyIDs(L, R) -> decode_ExecutionReport_grpPartyIDs(L, undefined, R).
decode_ExecutionReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_ExecutionReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_ExecutionReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_ExecutionReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_ExecutionReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message ExecutionReport
decode_ExecutionReport_grpPartySubIDs(L, R) -> decode_ExecutionReport_grpPartySubIDs(L, undefined, R).
decode_ExecutionReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_ExecutionReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_ExecutionReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message ExecutionReport
decode_ExecutionReport_grpSecurityAltID(L, R) -> decode_ExecutionReport_grpSecurityAltID(L, undefined, R).
decode_ExecutionReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_ExecutionReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_ExecutionReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message ExecutionReport
decode_ExecutionReport_grpStipulations(L, R) -> decode_ExecutionReport_grpStipulations(L, undefined, R).
decode_ExecutionReport_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_ExecutionReport_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_ExecutionReport_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message ExecutionReport
decode_ExecutionReport_grpUnderlyingSecurityAltID(L, R) -> decode_ExecutionReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_ExecutionReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_ExecutionReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_ExecutionReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message ExecutionReport
decode_ExecutionReport_grpUnderlyingStips(L, R) -> decode_ExecutionReport_grpUnderlyingStips(L, undefined, R).
decode_ExecutionReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_ExecutionReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_ExecutionReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message ExecutionReport
decode_ExecutionReport_grpUnderlyings(L, R) -> decode_ExecutionReport_grpUnderlyings(L, undefined, R).
decode_ExecutionReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_ExecutionReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_ExecutionReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_ExecutionReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_ExecutionReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_ExecutionReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_ExecutionReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_ExecutionReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ExecutionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_ExecutionReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message IOI
decode_IOI_grpEvents(L, R) -> decode_IOI_grpEvents(L, undefined, R).
decode_IOI_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_IOI_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_IOI_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_IOI_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_IOI_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpIOIQualifiers in message IOI
decode_IOI_grpIOIQualifiers(L, R) -> decode_IOI_grpIOIQualifiers(L, undefined, R).
decode_IOI_grpIOIQualifiers([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpIOIQualifiers([{'IOIQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpIOIQualifiers(T, def(Delim,H), R#group{fields = F#{'IOIQualifier' => V}});
decode_IOI_grpIOIQualifiers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message IOI
decode_IOI_grpLegSecurityAltID(L, R) -> decode_IOI_grpLegSecurityAltID(L, undefined, R).
decode_IOI_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_IOI_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_IOI_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message IOI
decode_IOI_grpLegStipulations(L, R) -> decode_IOI_grpLegStipulations(L, undefined, R).
decode_IOI_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_IOI_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_IOI_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message IOI
decode_IOI_grpLegs(L, R) -> decode_IOI_grpLegs(L, undefined, R).
decode_IOI_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_IOI_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_IOI_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_IOI_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_IOI_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_IOI_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_IOI_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_IOI_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_IOI_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_IOI_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_IOI_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_IOI_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_IOI_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_IOI_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_IOI_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_IOI_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_IOI_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_IOI_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_IOI_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_IOI_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_IOI_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_IOI_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_IOI_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_IOI_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_IOI_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_IOI_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_IOI_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_IOI_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_IOI_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_IOI_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_IOI_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_IOI_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_IOI_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_IOI_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_IOI_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_IOI_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_IOI_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_IOI_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_IOI_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_IOI_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_IOI_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_IOI_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_IOI_grpLegs([{'LegIOIQty'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIOIQty'                     => V}});
decode_IOI_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_IOI_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRoutingIDs in message IOI
decode_IOI_grpRoutingIDs(L, R) -> decode_IOI_grpRoutingIDs(L, undefined, R).
decode_IOI_grpRoutingIDs([{Delim          ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpRoutingIDs([{'RoutingType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpRoutingIDs(T, def(Delim,H), R#group{fields = F#{'RoutingType' => V}});
decode_IOI_grpRoutingIDs([{'RoutingID'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpRoutingIDs(T, def(Delim,H), R#group{fields = F#{'RoutingID'   => V}});
decode_IOI_grpRoutingIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message IOI
decode_IOI_grpSecurityAltID(L, R) -> decode_IOI_grpSecurityAltID(L, undefined, R).
decode_IOI_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_IOI_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_IOI_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message IOI
decode_IOI_grpStipulations(L, R) -> decode_IOI_grpStipulations(L, undefined, R).
decode_IOI_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_IOI_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_IOI_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message IOI
decode_IOI_grpUnderlyingSecurityAltID(L, R) -> decode_IOI_grpUnderlyingSecurityAltID(L, undefined, R).
decode_IOI_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_IOI_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_IOI_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message IOI
decode_IOI_grpUnderlyingStips(L, R) -> decode_IOI_grpUnderlyingStips(L, undefined, R).
decode_IOI_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_IOI_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_IOI_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message IOI
decode_IOI_grpUnderlyings(L, R) -> decode_IOI_grpUnderlyings(L, undefined, R).
decode_IOI_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_IOI_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_IOI_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_IOI_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_IOI_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_IOI_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_IOI_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_IOI_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_IOI_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_IOI_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_IOI_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_IOI_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_IOI_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_IOI_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_IOI_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_IOI_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_IOI_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_IOI_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_IOI_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_IOI_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_IOI_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_IOI_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_IOI_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_IOI_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_IOI_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_IOI_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_IOI_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_IOI_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_IOI_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_IOI_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_IOI_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_IOI_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_IOI_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_IOI_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_IOI_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_IOI_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpOrders in message ListStatus
decode_ListStatus_grpOrders(L, R) -> decode_ListStatus_grpOrders(L, undefined, R).
decode_ListStatus_grpOrders([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStatus_grpOrders([{'ClOrdID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdID'          => V}});
decode_ListStatus_grpOrders([{'SecondaryClOrdID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID' => V}});
decode_ListStatus_grpOrders([{'CumQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'CumQty'           => V}});
decode_ListStatus_grpOrders([{'OrdStatus'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrdStatus'        => V}});
decode_ListStatus_grpOrders([{'WorkingIndicator'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'WorkingIndicator' => V}});
decode_ListStatus_grpOrders([{'LeavesQty'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'LeavesQty'        => V}});
decode_ListStatus_grpOrders([{'CxlQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'CxlQty'           => V}});
decode_ListStatus_grpOrders([{'AvgPx'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'AvgPx'            => V}});
decode_ListStatus_grpOrders([{'OrdRejReason'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrdRejReason'     => V}});
decode_ListStatus_grpOrders([{'Text'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'Text'             => V}});
decode_ListStatus_grpOrders([{'EncodedTextLen'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'   => V}});
decode_ListStatus_grpOrders([{'EncodedText'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStatus_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedText'      => V}});
decode_ListStatus_grpOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message ListStrikePrice
decode_ListStrikePrice_grpEvents(L, R) -> decode_ListStrikePrice_grpEvents(L, undefined, R).
decode_ListStrikePrice_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStrikePrice_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_ListStrikePrice_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_ListStrikePrice_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_ListStrikePrice_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_ListStrikePrice_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message ListStrikePrice
decode_ListStrikePrice_grpSecurityAltID(L, R) -> decode_ListStrikePrice_grpSecurityAltID(L, undefined, R).
decode_ListStrikePrice_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStrikePrice_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_ListStrikePrice_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_ListStrikePrice_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStrikes in message ListStrikePrice
decode_ListStrikePrice_grpStrikes(L, R) -> decode_ListStrikePrice_grpStrikes(L, undefined, R).
decode_ListStrikePrice_grpStrikes([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStrikePrice_grpStrikes([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_ListStrikePrice_grpStrikes([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_ListStrikePrice_grpStrikes([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_ListStrikePrice_grpStrikes([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_ListStrikePrice_grpStrikes([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_ListStrikePrice_grpStrikes([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_ListStrikePrice_grpStrikes([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_ListStrikePrice_grpStrikes([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_ListStrikePrice_grpStrikes([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_ListStrikePrice_grpStrikes([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_ListStrikePrice_grpStrikes([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_ListStrikePrice_grpStrikes([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_ListStrikePrice_grpStrikes([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_ListStrikePrice_grpStrikes([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_ListStrikePrice_grpStrikes([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_ListStrikePrice_grpStrikes([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_ListStrikePrice_grpStrikes([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_ListStrikePrice_grpStrikes([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_ListStrikePrice_grpStrikes([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_ListStrikePrice_grpStrikes([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_ListStrikePrice_grpStrikes([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_ListStrikePrice_grpStrikes([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_ListStrikePrice_grpStrikes([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_ListStrikePrice_grpStrikes([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_ListStrikePrice_grpStrikes([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_ListStrikePrice_grpStrikes([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_ListStrikePrice_grpStrikes([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_ListStrikePrice_grpStrikes([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_ListStrikePrice_grpStrikes([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_ListStrikePrice_grpStrikes([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_ListStrikePrice_grpStrikes([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_ListStrikePrice_grpStrikes([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_ListStrikePrice_grpStrikes([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_ListStrikePrice_grpStrikes([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_ListStrikePrice_grpStrikes([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_ListStrikePrice_grpStrikes([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_ListStrikePrice_grpStrikes([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_ListStrikePrice_grpStrikes([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_ListStrikePrice_grpStrikes([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_ListStrikePrice_grpStrikes([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_ListStrikePrice_grpStrikes([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_ListStrikePrice_grpStrikes([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_ListStrikePrice_grpStrikes([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpStrikes(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_ListStrikePrice_grpStrikes(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message ListStrikePrice
decode_ListStrikePrice_grpUnderlyingSecurityAltID(L, R) -> decode_ListStrikePrice_grpUnderlyingSecurityAltID(L, undefined, R).
decode_ListStrikePrice_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStrikePrice_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_ListStrikePrice_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_ListStrikePrice_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message ListStrikePrice
decode_ListStrikePrice_grpUnderlyingStips(L, R) -> decode_ListStrikePrice_grpUnderlyingStips(L, undefined, R).
decode_ListStrikePrice_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStrikePrice_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_ListStrikePrice_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_ListStrikePrice_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message ListStrikePrice
decode_ListStrikePrice_grpUnderlyings(L, R) -> decode_ListStrikePrice_grpUnderlyings(L, undefined, R).
decode_ListStrikePrice_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_ListStrikePrice_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_ListStrikePrice_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_ListStrikePrice_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_ListStrikePrice_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_ListStrikePrice_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_ListStrikePrice_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_ListStrikePrice_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_ListStrikePrice_grpUnderlyings([{'PrevClosePx'=H                         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'PrevClosePx'                          => V}});
decode_ListStrikePrice_grpUnderlyings([{'ClOrdID'=H                             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'ClOrdID'                              => V}});
decode_ListStrikePrice_grpUnderlyings([{'SecondaryClOrdID'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'                     => V}});
decode_ListStrikePrice_grpUnderlyings([{'Side'=H                                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'Side'                                 => V}});
decode_ListStrikePrice_grpUnderlyings([{'Price'=H                               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'Price'                                => V}});
decode_ListStrikePrice_grpUnderlyings([{'Currency'=H                            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'Currency'                             => V}});
decode_ListStrikePrice_grpUnderlyings([{'Text'=H                                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'Text'                                 => V}});
decode_ListStrikePrice_grpUnderlyings([{'EncodedTextLen'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'                       => V}});
decode_ListStrikePrice_grpUnderlyings([{'EncodedText'=H                         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_ListStrikePrice_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedText'                          => V}});
decode_ListStrikePrice_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMsgTypes in message Logon
decode_Logon_grpMsgTypes(L, R) -> decode_Logon_grpMsgTypes(L, undefined, R).
decode_Logon_grpMsgTypes([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Logon_grpMsgTypes([{'RefMsgType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Logon_grpMsgTypes(T, def(Delim,H), R#group{fields = F#{'RefMsgType'   => V}});
decode_Logon_grpMsgTypes([{'MsgDirection'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Logon_grpMsgTypes(T, def(Delim,H), R#group{fields = F#{'MsgDirection' => V}});
decode_Logon_grpMsgTypes(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpEvents(L, R) -> decode_MarketDataIncrementalRefresh_grpEvents(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_MarketDataIncrementalRefresh_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_MarketDataIncrementalRefresh_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_MarketDataIncrementalRefresh_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_MarketDataIncrementalRefresh_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpLegSecurityAltID(L, R) -> decode_MarketDataIncrementalRefresh_grpLegSecurityAltID(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_MarketDataIncrementalRefresh_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_MarketDataIncrementalRefresh_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpLegs(L, R) -> decode_MarketDataIncrementalRefresh_grpLegs(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_MarketDataIncrementalRefresh_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_MarketDataIncrementalRefresh_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMDEntries in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpMDEntries(L, R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpMDEntries([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDUpdateAction'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDUpdateAction'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'DeleteReason'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'DeleteReason'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryType'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryID'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryID'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryRefID'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryRefID'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'FinancialStatus'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'FinancialStatus'            => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'CorporateAction'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'CorporateAction'            => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryPx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryPx'                  => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntrySize'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntrySize'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryDate'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryDate'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryTime'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryTime'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'TickDirection'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TickDirection'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDMkt'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDMkt'                      => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'QuoteCondition'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'QuoteCondition'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'TradeCondition'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TradeCondition'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryOriginator'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryOriginator'          => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'LocationID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'LocationID'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'DeskID'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'DeskID'                     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'OpenCloseSettlFlag'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'OpenCloseSettlFlag'         => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'TimeInForce'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TimeInForce'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'ExpireDate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ExpireDate'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'ExpireTime'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ExpireTime'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MinQty'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MinQty'                     => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'ExecInst'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ExecInst'                   => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'SellerDays'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SellerDays'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'OrderID'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'OrderID'                    => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'QuoteEntryID'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'QuoteEntryID'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryBuyer'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryBuyer'               => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntrySeller'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntrySeller'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'NumberOfOrders'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NumberOfOrders'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'MDEntryPositionNo'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryPositionNo'          => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Scope'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Scope'                      => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'PriceDelta'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'PriceDelta'                 => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'NetChgPrevDay'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NetChgPrevDay'              => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'Text'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Text'                       => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'EncodedTextLen'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'             => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries([{'EncodedText'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedText'                => V}});
decode_MarketDataIncrementalRefresh_grpMDEntries(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpSecurityAltID(L, R) -> decode_MarketDataIncrementalRefresh_grpSecurityAltID(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_MarketDataIncrementalRefresh_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_MarketDataIncrementalRefresh_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID(L, R) -> decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpUnderlyingStips(L, R) -> decode_MarketDataIncrementalRefresh_grpUnderlyingStips(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message MarketDataIncrementalRefresh
decode_MarketDataIncrementalRefresh_grpUnderlyings(L, R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(L, undefined, R).
decode_MarketDataIncrementalRefresh_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataIncrementalRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_MarketDataIncrementalRefresh_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message MarketDataRequest
decode_MarketDataRequest_grpEvents(L, R) -> decode_MarketDataRequest_grpEvents(L, undefined, R).
decode_MarketDataRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_MarketDataRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_MarketDataRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_MarketDataRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_MarketDataRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message MarketDataRequest
decode_MarketDataRequest_grpLegSecurityAltID(L, R) -> decode_MarketDataRequest_grpLegSecurityAltID(L, undefined, R).
decode_MarketDataRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_MarketDataRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_MarketDataRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message MarketDataRequest
decode_MarketDataRequest_grpLegs(L, R) -> decode_MarketDataRequest_grpLegs(L, undefined, R).
decode_MarketDataRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_MarketDataRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_MarketDataRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_MarketDataRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_MarketDataRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_MarketDataRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_MarketDataRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_MarketDataRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_MarketDataRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_MarketDataRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_MarketDataRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_MarketDataRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_MarketDataRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_MarketDataRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_MarketDataRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_MarketDataRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_MarketDataRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_MarketDataRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_MarketDataRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_MarketDataRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_MarketDataRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_MarketDataRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_MarketDataRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_MarketDataRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_MarketDataRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_MarketDataRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_MarketDataRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_MarketDataRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_MarketDataRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_MarketDataRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_MarketDataRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_MarketDataRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_MarketDataRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_MarketDataRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_MarketDataRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_MarketDataRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_MarketDataRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_MarketDataRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_MarketDataRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_MarketDataRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_MarketDataRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_MarketDataRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_MarketDataRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMDEntryTypes in message MarketDataRequest
decode_MarketDataRequest_grpMDEntryTypes(L, R) -> decode_MarketDataRequest_grpMDEntryTypes(L, undefined, R).
decode_MarketDataRequest_grpMDEntryTypes([{Delim          ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpMDEntryTypes([{'MDEntryType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpMDEntryTypes(T, def(Delim,H), R#group{fields = F#{'MDEntryType' => V}});
decode_MarketDataRequest_grpMDEntryTypes(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message MarketDataRequest
decode_MarketDataRequest_grpRelatedSym(L, R) -> decode_MarketDataRequest_grpRelatedSym(L, undefined, R).
decode_MarketDataRequest_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_MarketDataRequest_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_MarketDataRequest_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_MarketDataRequest_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_MarketDataRequest_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_MarketDataRequest_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_MarketDataRequest_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_MarketDataRequest_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_MarketDataRequest_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_MarketDataRequest_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_MarketDataRequest_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_MarketDataRequest_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_MarketDataRequest_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_MarketDataRequest_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_MarketDataRequest_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_MarketDataRequest_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_MarketDataRequest_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_MarketDataRequest_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_MarketDataRequest_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_MarketDataRequest_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_MarketDataRequest_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_MarketDataRequest_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_MarketDataRequest_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_MarketDataRequest_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_MarketDataRequest_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_MarketDataRequest_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_MarketDataRequest_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_MarketDataRequest_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_MarketDataRequest_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_MarketDataRequest_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_MarketDataRequest_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_MarketDataRequest_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_MarketDataRequest_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_MarketDataRequest_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_MarketDataRequest_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_MarketDataRequest_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_MarketDataRequest_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_MarketDataRequest_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_MarketDataRequest_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_MarketDataRequest_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_MarketDataRequest_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_MarketDataRequest_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_MarketDataRequest_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_MarketDataRequest_grpRelatedSym([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_MarketDataRequest_grpRelatedSym([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_MarketDataRequest_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message MarketDataRequest
decode_MarketDataRequest_grpSecurityAltID(L, R) -> decode_MarketDataRequest_grpSecurityAltID(L, undefined, R).
decode_MarketDataRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_MarketDataRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_MarketDataRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message MarketDataRequest
decode_MarketDataRequest_grpTradingSessions(L, R) -> decode_MarketDataRequest_grpTradingSessions(L, undefined, R).
decode_MarketDataRequest_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_MarketDataRequest_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_MarketDataRequest_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message MarketDataRequest
decode_MarketDataRequest_grpUnderlyingSecurityAltID(L, R) -> decode_MarketDataRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_MarketDataRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_MarketDataRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_MarketDataRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message MarketDataRequest
decode_MarketDataRequest_grpUnderlyingStips(L, R) -> decode_MarketDataRequest_grpUnderlyingStips(L, undefined, R).
decode_MarketDataRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_MarketDataRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_MarketDataRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message MarketDataRequest
decode_MarketDataRequest_grpUnderlyings(L, R) -> decode_MarketDataRequest_grpUnderlyings(L, undefined, R).
decode_MarketDataRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_MarketDataRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_MarketDataRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_MarketDataRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_MarketDataRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_MarketDataRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_MarketDataRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_MarketDataRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_MarketDataRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAltMDSource in message MarketDataRequestReject
decode_MarketDataRequestReject_grpAltMDSource(L, R) -> decode_MarketDataRequestReject_grpAltMDSource(L, undefined, R).
decode_MarketDataRequestReject_grpAltMDSource([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataRequestReject_grpAltMDSource([{'AltMDSourceID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataRequestReject_grpAltMDSource(T, def(Delim,H), R#group{fields = F#{'AltMDSourceID' => V}});
decode_MarketDataRequestReject_grpAltMDSource(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpEvents(L, R) -> decode_MarketDataSnapshotFullRefresh_grpEvents(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_MarketDataSnapshotFullRefresh_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_MarketDataSnapshotFullRefresh_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_MarketDataSnapshotFullRefresh_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_MarketDataSnapshotFullRefresh_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID(L, R) -> decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_MarketDataSnapshotFullRefresh_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpLegs(L, R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_MarketDataSnapshotFullRefresh_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMDEntries in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpMDEntries(L, R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryType'         => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryPx'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryPx'           => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'Currency'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Currency'            => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntrySize'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntrySize'         => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryDate'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryDate'         => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryTime'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryTime'         => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'TickDirection'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TickDirection'       => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDMkt'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDMkt'               => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'QuoteCondition'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'QuoteCondition'      => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'TradeCondition'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TradeCondition'      => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryOriginator'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryOriginator'   => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'LocationID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'LocationID'          => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'DeskID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'DeskID'              => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'OpenCloseSettlFlag'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'OpenCloseSettlFlag'  => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'TimeInForce'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'TimeInForce'         => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'ExpireDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ExpireDate'          => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'ExpireTime'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ExpireTime'          => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MinQty'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MinQty'              => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'ExecInst'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'ExecInst'            => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'SellerDays'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'SellerDays'          => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'OrderID'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'OrderID'             => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'QuoteEntryID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'QuoteEntryID'        => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryBuyer'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryBuyer'        => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntrySeller'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntrySeller'       => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'NumberOfOrders'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'NumberOfOrders'      => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'MDEntryPositionNo'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'MDEntryPositionNo'   => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'Scope'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Scope'               => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'PriceDelta'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'PriceDelta'          => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'Text'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'Text'                => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'EncodedTextLen'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'      => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries([{'EncodedText'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpMDEntries(T, def(Delim,H), R#group{fields = F#{'EncodedText'         => V}});
decode_MarketDataSnapshotFullRefresh_grpMDEntries(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpSecurityAltID(L, R) -> decode_MarketDataSnapshotFullRefresh_grpSecurityAltID(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_MarketDataSnapshotFullRefresh_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_MarketDataSnapshotFullRefresh_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID(L, R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips(L, R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message MarketDataSnapshotFullRefresh
decode_MarketDataSnapshotFullRefresh_grpUnderlyings(L, R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(L, undefined, R).
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MarketDataSnapshotFullRefresh_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_MarketDataSnapshotFullRefresh_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message MassQuote
decode_MassQuote_grpEvents(L, R) -> decode_MassQuote_grpEvents(L, undefined, R).
decode_MassQuote_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_MassQuote_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_MassQuote_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_MassQuote_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_MassQuote_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message MassQuote
decode_MassQuote_grpLegSecurityAltID(L, R) -> decode_MassQuote_grpLegSecurityAltID(L, undefined, R).
decode_MassQuote_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_MassQuote_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_MassQuote_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message MassQuote
decode_MassQuote_grpLegs(L, R) -> decode_MassQuote_grpLegs(L, undefined, R).
decode_MassQuote_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_MassQuote_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_MassQuote_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_MassQuote_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_MassQuote_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_MassQuote_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_MassQuote_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_MassQuote_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_MassQuote_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_MassQuote_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_MassQuote_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_MassQuote_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_MassQuote_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_MassQuote_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_MassQuote_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_MassQuote_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_MassQuote_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_MassQuote_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_MassQuote_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_MassQuote_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_MassQuote_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_MassQuote_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_MassQuote_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_MassQuote_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_MassQuote_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_MassQuote_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_MassQuote_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_MassQuote_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_MassQuote_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_MassQuote_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_MassQuote_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_MassQuote_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_MassQuote_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_MassQuote_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_MassQuote_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_MassQuote_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_MassQuote_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_MassQuote_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_MassQuote_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_MassQuote_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_MassQuote_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_MassQuote_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_MassQuote_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message MassQuote
decode_MassQuote_grpPartyIDs(L, R) -> decode_MassQuote_grpPartyIDs(L, undefined, R).
decode_MassQuote_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_MassQuote_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_MassQuote_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_MassQuote_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_MassQuote_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message MassQuote
decode_MassQuote_grpPartySubIDs(L, R) -> decode_MassQuote_grpPartySubIDs(L, undefined, R).
decode_MassQuote_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_MassQuote_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_MassQuote_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteEntries in message MassQuote
decode_MassQuote_grpQuoteEntries(L, R) -> decode_MassQuote_grpQuoteEntries(L, undefined, R).
decode_MassQuote_grpQuoteEntries([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpQuoteEntries([{'QuoteEntryID'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'QuoteEntryID'               => V}});
decode_MassQuote_grpQuoteEntries([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_MassQuote_grpQuoteEntries([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_MassQuote_grpQuoteEntries([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_MassQuote_grpQuoteEntries([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_MassQuote_grpQuoteEntries([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_MassQuote_grpQuoteEntries([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_MassQuote_grpQuoteEntries([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_MassQuote_grpQuoteEntries([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_MassQuote_grpQuoteEntries([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_MassQuote_grpQuoteEntries([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_MassQuote_grpQuoteEntries([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_MassQuote_grpQuoteEntries([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_MassQuote_grpQuoteEntries([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_MassQuote_grpQuoteEntries([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_MassQuote_grpQuoteEntries([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_MassQuote_grpQuoteEntries([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_MassQuote_grpQuoteEntries([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_MassQuote_grpQuoteEntries([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_MassQuote_grpQuoteEntries([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_MassQuote_grpQuoteEntries([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_MassQuote_grpQuoteEntries([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_MassQuote_grpQuoteEntries([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_MassQuote_grpQuoteEntries([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_MassQuote_grpQuoteEntries([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_MassQuote_grpQuoteEntries([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_MassQuote_grpQuoteEntries([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_MassQuote_grpQuoteEntries([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_MassQuote_grpQuoteEntries([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_MassQuote_grpQuoteEntries([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_MassQuote_grpQuoteEntries([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_MassQuote_grpQuoteEntries([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_MassQuote_grpQuoteEntries([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_MassQuote_grpQuoteEntries([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_MassQuote_grpQuoteEntries([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_MassQuote_grpQuoteEntries([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_MassQuote_grpQuoteEntries([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_MassQuote_grpQuoteEntries([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_MassQuote_grpQuoteEntries([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_MassQuote_grpQuoteEntries([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_MassQuote_grpQuoteEntries([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_MassQuote_grpQuoteEntries([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_MassQuote_grpQuoteEntries([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_MassQuote_grpQuoteEntries([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_MassQuote_grpQuoteEntries([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_MassQuote_grpQuoteEntries([{'BidPx'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidPx'                      => V}});
decode_MassQuote_grpQuoteEntries([{'OfferPx'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferPx'                    => V}});
decode_MassQuote_grpQuoteEntries([{'BidSize'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidSize'                    => V}});
decode_MassQuote_grpQuoteEntries([{'OfferSize'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferSize'                  => V}});
decode_MassQuote_grpQuoteEntries([{'ValidUntilTime'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ValidUntilTime'             => V}});
decode_MassQuote_grpQuoteEntries([{'BidSpotRate'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidSpotRate'                => V}});
decode_MassQuote_grpQuoteEntries([{'OfferSpotRate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferSpotRate'              => V}});
decode_MassQuote_grpQuoteEntries([{'BidForwardPoints'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidForwardPoints'           => V}});
decode_MassQuote_grpQuoteEntries([{'OfferForwardPoints'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferForwardPoints'         => V}});
decode_MassQuote_grpQuoteEntries([{'MidPx'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MidPx'                      => V}});
decode_MassQuote_grpQuoteEntries([{'BidYield'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidYield'                   => V}});
decode_MassQuote_grpQuoteEntries([{'MidYield'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MidYield'                   => V}});
decode_MassQuote_grpQuoteEntries([{'OfferYield'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferYield'                 => V}});
decode_MassQuote_grpQuoteEntries([{'TransactTime'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TransactTime'               => V}});
decode_MassQuote_grpQuoteEntries([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_MassQuote_grpQuoteEntries([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_MassQuote_grpQuoteEntries([{'SettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SettlDate'                  => V}});
decode_MassQuote_grpQuoteEntries([{'OrdType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OrdType'                    => V}});
decode_MassQuote_grpQuoteEntries([{'SettlDate2'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SettlDate2'                 => V}});
decode_MassQuote_grpQuoteEntries([{'OrderQty2'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OrderQty2'                  => V}});
decode_MassQuote_grpQuoteEntries([{'BidForwardPoints2'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidForwardPoints2'          => V}});
decode_MassQuote_grpQuoteEntries([{'OfferForwardPoints2'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferForwardPoints2'        => V}});
decode_MassQuote_grpQuoteEntries([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_MassQuote_grpQuoteEntries(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteSets in message MassQuote
decode_MassQuote_grpQuoteSets(L, R) -> decode_MassQuote_grpQuoteSets(L, undefined, R).
decode_MassQuote_grpQuoteSets([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpQuoteSets([{'QuoteSetID'=H                          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'QuoteSetID'                           => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_MassQuote_grpQuoteSets([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_MassQuote_grpQuoteSets([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_MassQuote_grpQuoteSets([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_MassQuote_grpQuoteSets([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_MassQuote_grpQuoteSets([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_MassQuote_grpQuoteSets([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_MassQuote_grpQuoteSets([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_MassQuote_grpQuoteSets([{'QuoteSetValidUntilTime'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'QuoteSetValidUntilTime'               => V}});
decode_MassQuote_grpQuoteSets([{'TotNoQuoteEntries'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'TotNoQuoteEntries'                    => V}});
decode_MassQuote_grpQuoteSets([{'LastFragment'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'LastFragment'                         => V}});
decode_MassQuote_grpQuoteSets([{'NoQuoteEntries'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'NoQuoteEntries'                       => V}});
decode_MassQuote_grpQuoteSets(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message MassQuote
decode_MassQuote_grpSecurityAltID(L, R) -> decode_MassQuote_grpSecurityAltID(L, undefined, R).
decode_MassQuote_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_MassQuote_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_MassQuote_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message MassQuote
decode_MassQuote_grpUnderlyingSecurityAltID(L, R) -> decode_MassQuote_grpUnderlyingSecurityAltID(L, undefined, R).
decode_MassQuote_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_MassQuote_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_MassQuote_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message MassQuote
decode_MassQuote_grpUnderlyingStips(L, R) -> decode_MassQuote_grpUnderlyingStips(L, undefined, R).
decode_MassQuote_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuote_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_MassQuote_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuote_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_MassQuote_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpEvents(L, R) -> decode_MassQuoteAcknowledgement_grpEvents(L, undefined, R).
decode_MassQuoteAcknowledgement_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_MassQuoteAcknowledgement_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_MassQuoteAcknowledgement_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_MassQuoteAcknowledgement_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_MassQuoteAcknowledgement_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpLegSecurityAltID(L, R) -> decode_MassQuoteAcknowledgement_grpLegSecurityAltID(L, undefined, R).
decode_MassQuoteAcknowledgement_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_MassQuoteAcknowledgement_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_MassQuoteAcknowledgement_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpLegs(L, R) -> decode_MassQuoteAcknowledgement_grpLegs(L, undefined, R).
decode_MassQuoteAcknowledgement_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_MassQuoteAcknowledgement_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_MassQuoteAcknowledgement_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpPartyIDs(L, R) -> decode_MassQuoteAcknowledgement_grpPartyIDs(L, undefined, R).
decode_MassQuoteAcknowledgement_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_MassQuoteAcknowledgement_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_MassQuoteAcknowledgement_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_MassQuoteAcknowledgement_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_MassQuoteAcknowledgement_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpPartySubIDs(L, R) -> decode_MassQuoteAcknowledgement_grpPartySubIDs(L, undefined, R).
decode_MassQuoteAcknowledgement_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_MassQuoteAcknowledgement_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_MassQuoteAcknowledgement_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteEntries in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpQuoteEntries(L, R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(L, undefined, R).
decode_MassQuoteAcknowledgement_grpQuoteEntries([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'QuoteEntryID'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'QuoteEntryID'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'BidPx'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidPx'                      => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OfferPx'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferPx'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'BidSize'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidSize'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OfferSize'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferSize'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'ValidUntilTime'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ValidUntilTime'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'BidSpotRate'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidSpotRate'                => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OfferSpotRate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferSpotRate'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'BidForwardPoints'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidForwardPoints'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OfferForwardPoints'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferForwardPoints'         => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'MidPx'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MidPx'                      => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'BidYield'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidYield'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'MidYield'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MidYield'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OfferYield'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferYield'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'TransactTime'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TransactTime'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SettlDate'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OrdType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OrdType'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'SettlDate2'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SettlDate2'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OrderQty2'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OrderQty2'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'BidForwardPoints2'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'BidForwardPoints2'          => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'OfferForwardPoints2'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OfferForwardPoints2'        => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries([{'QuoteEntryRejectReason'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'QuoteEntryRejectReason'     => V}});
decode_MassQuoteAcknowledgement_grpQuoteEntries(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteSets in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpQuoteSets(L, R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(L, undefined, R).
decode_MassQuoteAcknowledgement_grpQuoteSets([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpQuoteSets([{'QuoteSetID'=H                          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'QuoteSetID'                           => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'TotNoQuoteEntries'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'TotNoQuoteEntries'                    => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'LastFragment'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'LastFragment'                         => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets([{'NoQuoteEntries'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpQuoteSets(T, def(Delim,H), R#group{fields = F#{'NoQuoteEntries'                       => V}});
decode_MassQuoteAcknowledgement_grpQuoteSets(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpSecurityAltID(L, R) -> decode_MassQuoteAcknowledgement_grpSecurityAltID(L, undefined, R).
decode_MassQuoteAcknowledgement_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_MassQuoteAcknowledgement_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_MassQuoteAcknowledgement_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID(L, R) -> decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID(L, undefined, R).
decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_MassQuoteAcknowledgement_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message MassQuoteAcknowledgement
decode_MassQuoteAcknowledgement_grpUnderlyingStips(L, R) -> decode_MassQuoteAcknowledgement_grpUnderlyingStips(L, undefined, R).
decode_MassQuoteAcknowledgement_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MassQuoteAcknowledgement_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_MassQuoteAcknowledgement_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MassQuoteAcknowledgement_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_MassQuoteAcknowledgement_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpAllocs(L, R) -> decode_MultilegOrderCancelReplace_grpAllocs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_MultilegOrderCancelReplace_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_MultilegOrderCancelReplace_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_MultilegOrderCancelReplace_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_MultilegOrderCancelReplace_grpAllocs([{'NoNested3PartyIDs'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNested3PartyIDs'  => V}});
decode_MultilegOrderCancelReplace_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_MultilegOrderCancelReplace_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpEvents(L, R) -> decode_MultilegOrderCancelReplace_grpEvents(L, undefined, R).
decode_MultilegOrderCancelReplace_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_MultilegOrderCancelReplace_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_MultilegOrderCancelReplace_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_MultilegOrderCancelReplace_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_MultilegOrderCancelReplace_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegAllocs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpLegAllocs(L, R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpLegAllocs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpLegAllocs([{'LegAllocAccount'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegAllocAccount'      => V}});
decode_MultilegOrderCancelReplace_grpLegAllocs([{'LegIndividualAllocID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegIndividualAllocID' => V}});
decode_MultilegOrderCancelReplace_grpLegAllocs([{'NoNested2PartyIDs'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs'    => V}});
decode_MultilegOrderCancelReplace_grpLegAllocs([{'LegAllocQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegAllocQty'          => V}});
decode_MultilegOrderCancelReplace_grpLegAllocs([{'LegAllocAcctIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegAllocAcctIDSource' => V}});
decode_MultilegOrderCancelReplace_grpLegAllocs([{'LegSettlCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegSettlCurrency'     => V}});
decode_MultilegOrderCancelReplace_grpLegAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpLegSecurityAltID(L, R) -> decode_MultilegOrderCancelReplace_grpLegSecurityAltID(L, undefined, R).
decode_MultilegOrderCancelReplace_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_MultilegOrderCancelReplace_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_MultilegOrderCancelReplace_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpLegStipulations(L, R) -> decode_MultilegOrderCancelReplace_grpLegStipulations(L, undefined, R).
decode_MultilegOrderCancelReplace_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_MultilegOrderCancelReplace_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_MultilegOrderCancelReplace_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpLegs(L, R) -> decode_MultilegOrderCancelReplace_grpLegs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'NoLegAllocs'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegAllocs'                   => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegPositionEffect'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPositionEffect'             => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegCoveredOrUncovered'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCoveredOrUncovered'         => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegRefID'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRefID'                      => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegPrice'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPrice'                      => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_MultilegOrderCancelReplace_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_MultilegOrderCancelReplace_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpNested2PartyIDs(L, R) -> decode_MultilegOrderCancelReplace_grpNested2PartyIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_MultilegOrderCancelReplace_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_MultilegOrderCancelReplace_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_MultilegOrderCancelReplace_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_MultilegOrderCancelReplace_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpNested2PartySubIDs(L, R) -> decode_MultilegOrderCancelReplace_grpNested2PartySubIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_MultilegOrderCancelReplace_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_MultilegOrderCancelReplace_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested3PartyIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpNested3PartyIDs(L, R) -> decode_MultilegOrderCancelReplace_grpNested3PartyIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpNested3PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpNested3PartyIDs([{'Nested3PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartyID'       => V}});
decode_MultilegOrderCancelReplace_grpNested3PartyIDs([{'Nested3PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartyIDSource' => V}});
decode_MultilegOrderCancelReplace_grpNested3PartyIDs([{'Nested3PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartyRole'     => V}});
decode_MultilegOrderCancelReplace_grpNested3PartyIDs([{'NoNested3PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested3PartySubIDs' => V}});
decode_MultilegOrderCancelReplace_grpNested3PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested3PartySubIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpNested3PartySubIDs(L, R) -> decode_MultilegOrderCancelReplace_grpNested3PartySubIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpNested3PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpNested3PartySubIDs([{'Nested3PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested3PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartySubID'     => V}});
decode_MultilegOrderCancelReplace_grpNested3PartySubIDs([{'Nested3PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNested3PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartySubIDType' => V}});
decode_MultilegOrderCancelReplace_grpNested3PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpNestedPartyIDs(L, R) -> decode_MultilegOrderCancelReplace_grpNestedPartyIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_MultilegOrderCancelReplace_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_MultilegOrderCancelReplace_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_MultilegOrderCancelReplace_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_MultilegOrderCancelReplace_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpNestedPartySubIDs(L, R) -> decode_MultilegOrderCancelReplace_grpNestedPartySubIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_MultilegOrderCancelReplace_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_MultilegOrderCancelReplace_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpPartyIDs(L, R) -> decode_MultilegOrderCancelReplace_grpPartyIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_MultilegOrderCancelReplace_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_MultilegOrderCancelReplace_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_MultilegOrderCancelReplace_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_MultilegOrderCancelReplace_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpPartySubIDs(L, R) -> decode_MultilegOrderCancelReplace_grpPartySubIDs(L, undefined, R).
decode_MultilegOrderCancelReplace_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_MultilegOrderCancelReplace_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_MultilegOrderCancelReplace_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpSecurityAltID(L, R) -> decode_MultilegOrderCancelReplace_grpSecurityAltID(L, undefined, R).
decode_MultilegOrderCancelReplace_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_MultilegOrderCancelReplace_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_MultilegOrderCancelReplace_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpTradingSessions(L, R) -> decode_MultilegOrderCancelReplace_grpTradingSessions(L, undefined, R).
decode_MultilegOrderCancelReplace_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_MultilegOrderCancelReplace_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_MultilegOrderCancelReplace_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID(L, R) -> decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID(L, undefined, R).
decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_MultilegOrderCancelReplace_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpUnderlyingStips(L, R) -> decode_MultilegOrderCancelReplace_grpUnderlyingStips(L, undefined, R).
decode_MultilegOrderCancelReplace_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_MultilegOrderCancelReplace_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_MultilegOrderCancelReplace_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message MultilegOrderCancelReplace
decode_MultilegOrderCancelReplace_grpUnderlyings(L, R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(L, undefined, R).
decode_MultilegOrderCancelReplace_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_MultilegOrderCancelReplace_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_MultilegOrderCancelReplace_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpCompIDs in message NetworkCounterpartySystemStatusRequest
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(L, R) -> decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(L, undefined, R).
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs([{Delim         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs([{'RefCompID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'RefCompID'  => V}});
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs([{'RefSubID'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'RefSubID'   => V}});
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs([{'LocationID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'LocationID' => V}});
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs([{'DeskID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'DeskID'     => V}});
decode_NetworkCounterpartySystemStatusRequest_grpCompIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpCompIDs in message NetworkCounterpartySystemStatusResponse
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(L, R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(L, undefined, R).
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{Delim          ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{'RefCompID'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'RefCompID'   => V}});
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{'RefSubID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'RefSubID'    => V}});
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{'LocationID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'LocationID'  => V}});
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{'DeskID'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'DeskID'      => V}});
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{'StatusValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'StatusValue' => V}});
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs([{'StatusText'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(T, def(Delim,H), R#group{fields = F#{'StatusText'  => V}});
decode_NetworkCounterpartySystemStatusResponse_grpCompIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message NewOrderCross
decode_NewOrderCross_grpAllocs(L, R) -> decode_NewOrderCross_grpAllocs(L, undefined, R).
decode_NewOrderCross_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_NewOrderCross_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_NewOrderCross_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_NewOrderCross_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_NewOrderCross_grpAllocs([{'NoNestedPartyIDs'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'   => V}});
decode_NewOrderCross_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_NewOrderCross_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message NewOrderCross
decode_NewOrderCross_grpEvents(L, R) -> decode_NewOrderCross_grpEvents(L, undefined, R).
decode_NewOrderCross_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_NewOrderCross_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_NewOrderCross_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_NewOrderCross_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_NewOrderCross_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message NewOrderCross
decode_NewOrderCross_grpLegSecurityAltID(L, R) -> decode_NewOrderCross_grpLegSecurityAltID(L, undefined, R).
decode_NewOrderCross_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_NewOrderCross_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_NewOrderCross_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message NewOrderCross
decode_NewOrderCross_grpLegs(L, R) -> decode_NewOrderCross_grpLegs(L, undefined, R).
decode_NewOrderCross_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_NewOrderCross_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_NewOrderCross_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_NewOrderCross_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_NewOrderCross_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_NewOrderCross_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_NewOrderCross_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_NewOrderCross_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_NewOrderCross_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_NewOrderCross_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_NewOrderCross_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_NewOrderCross_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_NewOrderCross_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_NewOrderCross_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_NewOrderCross_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_NewOrderCross_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_NewOrderCross_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_NewOrderCross_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_NewOrderCross_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_NewOrderCross_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_NewOrderCross_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_NewOrderCross_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_NewOrderCross_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_NewOrderCross_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_NewOrderCross_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_NewOrderCross_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_NewOrderCross_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_NewOrderCross_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_NewOrderCross_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_NewOrderCross_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_NewOrderCross_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_NewOrderCross_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_NewOrderCross_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_NewOrderCross_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_NewOrderCross_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_NewOrderCross_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_NewOrderCross_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_NewOrderCross_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_NewOrderCross_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_NewOrderCross_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_NewOrderCross_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_NewOrderCross_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_NewOrderCross_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message NewOrderCross
decode_NewOrderCross_grpNestedPartyIDs(L, R) -> decode_NewOrderCross_grpNestedPartyIDs(L, undefined, R).
decode_NewOrderCross_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_NewOrderCross_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_NewOrderCross_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_NewOrderCross_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_NewOrderCross_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message NewOrderCross
decode_NewOrderCross_grpNestedPartySubIDs(L, R) -> decode_NewOrderCross_grpNestedPartySubIDs(L, undefined, R).
decode_NewOrderCross_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_NewOrderCross_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_NewOrderCross_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message NewOrderCross
decode_NewOrderCross_grpPartyIDs(L, R) -> decode_NewOrderCross_grpPartyIDs(L, undefined, R).
decode_NewOrderCross_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_NewOrderCross_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_NewOrderCross_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_NewOrderCross_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_NewOrderCross_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message NewOrderCross
decode_NewOrderCross_grpPartySubIDs(L, R) -> decode_NewOrderCross_grpPartySubIDs(L, undefined, R).
decode_NewOrderCross_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_NewOrderCross_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_NewOrderCross_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message NewOrderCross
decode_NewOrderCross_grpSecurityAltID(L, R) -> decode_NewOrderCross_grpSecurityAltID(L, undefined, R).
decode_NewOrderCross_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_NewOrderCross_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_NewOrderCross_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSides in message NewOrderCross
decode_NewOrderCross_grpSides(L, R) -> decode_NewOrderCross_grpSides(L, undefined, R).
decode_NewOrderCross_grpSides([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpSides([{'Side'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'Side'                 => V}});
decode_NewOrderCross_grpSides([{'ClOrdID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdID'              => V}});
decode_NewOrderCross_grpSides([{'SecondaryClOrdID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'     => V}});
decode_NewOrderCross_grpSides([{'ClOrdLinkID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdLinkID'          => V}});
decode_NewOrderCross_grpSides([{'NoPartyIDs'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'           => V}});
decode_NewOrderCross_grpSides([{'TradeOriginationDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeOriginationDate' => V}});
decode_NewOrderCross_grpSides([{'TradeDate'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeDate'            => V}});
decode_NewOrderCross_grpSides([{'Account'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'Account'              => V}});
decode_NewOrderCross_grpSides([{'AcctIDSource'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'         => V}});
decode_NewOrderCross_grpSides([{'AccountType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'AccountType'          => V}});
decode_NewOrderCross_grpSides([{'DayBookingInst'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'DayBookingInst'       => V}});
decode_NewOrderCross_grpSides([{'BookingUnit'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'BookingUnit'          => V}});
decode_NewOrderCross_grpSides([{'PreallocMethod'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'PreallocMethod'       => V}});
decode_NewOrderCross_grpSides([{'AllocID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'AllocID'              => V}});
decode_NewOrderCross_grpSides([{'NoAllocs'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'NoAllocs'             => V}});
decode_NewOrderCross_grpSides([{'QtyType'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'QtyType'              => V}});
decode_NewOrderCross_grpSides([{'OrderQty'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderQty'             => V}});
decode_NewOrderCross_grpSides([{'CashOrderQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'CashOrderQty'         => V}});
decode_NewOrderCross_grpSides([{'OrderPercent'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderPercent'         => V}});
decode_NewOrderCross_grpSides([{'RoundingDirection'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'RoundingDirection'    => V}});
decode_NewOrderCross_grpSides([{'RoundingModulus'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'RoundingModulus'      => V}});
decode_NewOrderCross_grpSides([{'Commission'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'Commission'           => V}});
decode_NewOrderCross_grpSides([{'CommType'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'CommType'             => V}});
decode_NewOrderCross_grpSides([{'CommCurrency'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'CommCurrency'         => V}});
decode_NewOrderCross_grpSides([{'FundRenewWaiv'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'        => V}});
decode_NewOrderCross_grpSides([{'OrderCapacity'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderCapacity'        => V}});
decode_NewOrderCross_grpSides([{'OrderRestrictions'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderRestrictions'    => V}});
decode_NewOrderCross_grpSides([{'CustOrderCapacity'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'CustOrderCapacity'    => V}});
decode_NewOrderCross_grpSides([{'ForexReq'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'ForexReq'             => V}});
decode_NewOrderCross_grpSides([{'SettlCurrency'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'SettlCurrency'        => V}});
decode_NewOrderCross_grpSides([{'BookingType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'BookingType'          => V}});
decode_NewOrderCross_grpSides([{'Text'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'Text'                 => V}});
decode_NewOrderCross_grpSides([{'EncodedTextLen'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'       => V}});
decode_NewOrderCross_grpSides([{'EncodedText'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedText'          => V}});
decode_NewOrderCross_grpSides([{'PositionEffect'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'PositionEffect'       => V}});
decode_NewOrderCross_grpSides([{'CoveredOrUncovered'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'CoveredOrUncovered'   => V}});
decode_NewOrderCross_grpSides([{'CashMargin'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'CashMargin'           => V}});
decode_NewOrderCross_grpSides([{'ClearingFeeIndicator'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'ClearingFeeIndicator' => V}});
decode_NewOrderCross_grpSides([{'SolicitedFlag'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'SolicitedFlag'        => V}});
decode_NewOrderCross_grpSides([{'SideComplianceID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpSides(T, def(Delim,H), R#group{fields = F#{'SideComplianceID'     => V}});
decode_NewOrderCross_grpSides(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message NewOrderCross
decode_NewOrderCross_grpStipulations(L, R) -> decode_NewOrderCross_grpStipulations(L, undefined, R).
decode_NewOrderCross_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_NewOrderCross_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_NewOrderCross_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message NewOrderCross
decode_NewOrderCross_grpTradingSessions(L, R) -> decode_NewOrderCross_grpTradingSessions(L, undefined, R).
decode_NewOrderCross_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_NewOrderCross_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_NewOrderCross_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message NewOrderCross
decode_NewOrderCross_grpUnderlyingSecurityAltID(L, R) -> decode_NewOrderCross_grpUnderlyingSecurityAltID(L, undefined, R).
decode_NewOrderCross_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_NewOrderCross_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_NewOrderCross_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message NewOrderCross
decode_NewOrderCross_grpUnderlyingStips(L, R) -> decode_NewOrderCross_grpUnderlyingStips(L, undefined, R).
decode_NewOrderCross_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_NewOrderCross_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_NewOrderCross_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message NewOrderCross
decode_NewOrderCross_grpUnderlyings(L, R) -> decode_NewOrderCross_grpUnderlyings(L, undefined, R).
decode_NewOrderCross_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_NewOrderCross_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_NewOrderCross_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_NewOrderCross_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_NewOrderCross_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_NewOrderCross_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_NewOrderCross_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_NewOrderCross_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderCross_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_NewOrderCross_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message NewOrderList
decode_NewOrderList_grpAllocs(L, R) -> decode_NewOrderList_grpAllocs(L, undefined, R).
decode_NewOrderList_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_NewOrderList_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_NewOrderList_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_NewOrderList_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_NewOrderList_grpAllocs([{'NoNestedPartyIDs'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'   => V}});
decode_NewOrderList_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_NewOrderList_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message NewOrderList
decode_NewOrderList_grpEvents(L, R) -> decode_NewOrderList_grpEvents(L, undefined, R).
decode_NewOrderList_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_NewOrderList_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_NewOrderList_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_NewOrderList_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_NewOrderList_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message NewOrderList
decode_NewOrderList_grpNestedPartyIDs(L, R) -> decode_NewOrderList_grpNestedPartyIDs(L, undefined, R).
decode_NewOrderList_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_NewOrderList_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_NewOrderList_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_NewOrderList_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_NewOrderList_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message NewOrderList
decode_NewOrderList_grpNestedPartySubIDs(L, R) -> decode_NewOrderList_grpNestedPartySubIDs(L, undefined, R).
decode_NewOrderList_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_NewOrderList_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_NewOrderList_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpOrders in message NewOrderList
decode_NewOrderList_grpOrders(L, R) -> decode_NewOrderList_grpOrders(L, undefined, R).
decode_NewOrderList_grpOrders([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpOrders([{'ClOrdID'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdID'                    => V}});
decode_NewOrderList_grpOrders([{'SecondaryClOrdID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'           => V}});
decode_NewOrderList_grpOrders([{'ListSeqNo'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ListSeqNo'                  => V}});
decode_NewOrderList_grpOrders([{'ClOrdLinkID'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClOrdLinkID'                => V}});
decode_NewOrderList_grpOrders([{'SettlInstMode'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SettlInstMode'              => V}});
decode_NewOrderList_grpOrders([{'NoPartyIDs'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'                 => V}});
decode_NewOrderList_grpOrders([{'TradeOriginationDate'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'TradeOriginationDate'       => V}});
decode_NewOrderList_grpOrders([{'TradeDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'TradeDate'                  => V}});
decode_NewOrderList_grpOrders([{'Account'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Account'                    => V}});
decode_NewOrderList_grpOrders([{'AcctIDSource'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'               => V}});
decode_NewOrderList_grpOrders([{'AccountType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'AccountType'                => V}});
decode_NewOrderList_grpOrders([{'DayBookingInst'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DayBookingInst'             => V}});
decode_NewOrderList_grpOrders([{'BookingUnit'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BookingUnit'                => V}});
decode_NewOrderList_grpOrders([{'AllocID'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'AllocID'                    => V}});
decode_NewOrderList_grpOrders([{'PreallocMethod'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PreallocMethod'             => V}});
decode_NewOrderList_grpOrders([{'NoAllocs'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoAllocs'                   => V}});
decode_NewOrderList_grpOrders([{'SettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SettlType'                  => V}});
decode_NewOrderList_grpOrders([{'SettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SettlDate'                  => V}});
decode_NewOrderList_grpOrders([{'CashMargin'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CashMargin'                 => V}});
decode_NewOrderList_grpOrders([{'ClearingFeeIndicator'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ClearingFeeIndicator'       => V}});
decode_NewOrderList_grpOrders([{'HandlInst'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'HandlInst'                  => V}});
decode_NewOrderList_grpOrders([{'ExecInst'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ExecInst'                   => V}});
decode_NewOrderList_grpOrders([{'MinQty'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'MinQty'                     => V}});
decode_NewOrderList_grpOrders([{'MaxFloor'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'MaxFloor'                   => V}});
decode_NewOrderList_grpOrders([{'ExDestination'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ExDestination'              => V}});
decode_NewOrderList_grpOrders([{'NoTradingSessions'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoTradingSessions'          => V}});
decode_NewOrderList_grpOrders([{'ProcessCode'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ProcessCode'                => V}});
decode_NewOrderList_grpOrders([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_NewOrderList_grpOrders([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_NewOrderList_grpOrders([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_NewOrderList_grpOrders([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_NewOrderList_grpOrders([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_NewOrderList_grpOrders([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_NewOrderList_grpOrders([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_NewOrderList_grpOrders([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_NewOrderList_grpOrders([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_NewOrderList_grpOrders([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_NewOrderList_grpOrders([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_NewOrderList_grpOrders([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_NewOrderList_grpOrders([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_NewOrderList_grpOrders([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_NewOrderList_grpOrders([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_NewOrderList_grpOrders([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_NewOrderList_grpOrders([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_NewOrderList_grpOrders([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_NewOrderList_grpOrders([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_NewOrderList_grpOrders([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_NewOrderList_grpOrders([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_NewOrderList_grpOrders([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_NewOrderList_grpOrders([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_NewOrderList_grpOrders([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_NewOrderList_grpOrders([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_NewOrderList_grpOrders([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_NewOrderList_grpOrders([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_NewOrderList_grpOrders([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_NewOrderList_grpOrders([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_NewOrderList_grpOrders([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_NewOrderList_grpOrders([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_NewOrderList_grpOrders([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_NewOrderList_grpOrders([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_NewOrderList_grpOrders([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_NewOrderList_grpOrders([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_NewOrderList_grpOrders([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_NewOrderList_grpOrders([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_NewOrderList_grpOrders([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_NewOrderList_grpOrders([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_NewOrderList_grpOrders([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_NewOrderList_grpOrders([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_NewOrderList_grpOrders([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_NewOrderList_grpOrders([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_NewOrderList_grpOrders([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_NewOrderList_grpOrders([{'PrevClosePx'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PrevClosePx'                => V}});
decode_NewOrderList_grpOrders([{'Side'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Side'                       => V}});
decode_NewOrderList_grpOrders([{'SideValueInd'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SideValueInd'               => V}});
decode_NewOrderList_grpOrders([{'LocateReqd'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'LocateReqd'                 => V}});
decode_NewOrderList_grpOrders([{'TransactTime'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'TransactTime'               => V}});
decode_NewOrderList_grpOrders([{'NoStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'NoStipulations'             => V}});
decode_NewOrderList_grpOrders([{'QtyType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'QtyType'                    => V}});
decode_NewOrderList_grpOrders([{'OrderQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderQty'                   => V}});
decode_NewOrderList_grpOrders([{'CashOrderQty'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CashOrderQty'               => V}});
decode_NewOrderList_grpOrders([{'OrderPercent'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderPercent'               => V}});
decode_NewOrderList_grpOrders([{'RoundingDirection'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'RoundingDirection'          => V}});
decode_NewOrderList_grpOrders([{'RoundingModulus'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'RoundingModulus'            => V}});
decode_NewOrderList_grpOrders([{'OrdType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrdType'                    => V}});
decode_NewOrderList_grpOrders([{'PriceType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PriceType'                  => V}});
decode_NewOrderList_grpOrders([{'Price'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Price'                      => V}});
decode_NewOrderList_grpOrders([{'StopPx'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'StopPx'                     => V}});
decode_NewOrderList_grpOrders([{'Spread'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Spread'                     => V}});
decode_NewOrderList_grpOrders([{'BenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveCurrency'     => V}});
decode_NewOrderList_grpOrders([{'BenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveName'         => V}});
decode_NewOrderList_grpOrders([{'BenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurvePoint'        => V}});
decode_NewOrderList_grpOrders([{'BenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkPrice'             => V}});
decode_NewOrderList_grpOrders([{'BenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkPriceType'         => V}});
decode_NewOrderList_grpOrders([{'BenchmarkSecurityID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityID'        => V}});
decode_NewOrderList_grpOrders([{'BenchmarkSecurityIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityIDSource'  => V}});
decode_NewOrderList_grpOrders([{'YieldType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'YieldType'                  => V}});
decode_NewOrderList_grpOrders([{'Yield'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Yield'                      => V}});
decode_NewOrderList_grpOrders([{'YieldCalcDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'YieldCalcDate'              => V}});
decode_NewOrderList_grpOrders([{'YieldRedemptionDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionDate'        => V}});
decode_NewOrderList_grpOrders([{'YieldRedemptionPrice'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPrice'       => V}});
decode_NewOrderList_grpOrders([{'YieldRedemptionPriceType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPriceType'   => V}});
decode_NewOrderList_grpOrders([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_NewOrderList_grpOrders([{'ComplianceID'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ComplianceID'               => V}});
decode_NewOrderList_grpOrders([{'SolicitedFlag'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SolicitedFlag'              => V}});
decode_NewOrderList_grpOrders([{'IOIID'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'IOIID'                      => V}});
decode_NewOrderList_grpOrders([{'QuoteID'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'QuoteID'                    => V}});
decode_NewOrderList_grpOrders([{'TimeInForce'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'TimeInForce'                => V}});
decode_NewOrderList_grpOrders([{'EffectiveTime'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EffectiveTime'              => V}});
decode_NewOrderList_grpOrders([{'ExpireDate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ExpireDate'                 => V}});
decode_NewOrderList_grpOrders([{'ExpireTime'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ExpireTime'                 => V}});
decode_NewOrderList_grpOrders([{'GTBookingInst'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'GTBookingInst'              => V}});
decode_NewOrderList_grpOrders([{'Commission'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Commission'                 => V}});
decode_NewOrderList_grpOrders([{'CommType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CommType'                   => V}});
decode_NewOrderList_grpOrders([{'CommCurrency'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CommCurrency'               => V}});
decode_NewOrderList_grpOrders([{'FundRenewWaiv'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'              => V}});
decode_NewOrderList_grpOrders([{'OrderCapacity'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderCapacity'              => V}});
decode_NewOrderList_grpOrders([{'OrderRestrictions'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderRestrictions'          => V}});
decode_NewOrderList_grpOrders([{'CustOrderCapacity'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CustOrderCapacity'          => V}});
decode_NewOrderList_grpOrders([{'ForexReq'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ForexReq'                   => V}});
decode_NewOrderList_grpOrders([{'SettlCurrency'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SettlCurrency'              => V}});
decode_NewOrderList_grpOrders([{'BookingType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'BookingType'                => V}});
decode_NewOrderList_grpOrders([{'Text'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Text'                       => V}});
decode_NewOrderList_grpOrders([{'EncodedTextLen'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'             => V}});
decode_NewOrderList_grpOrders([{'EncodedText'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'EncodedText'                => V}});
decode_NewOrderList_grpOrders([{'SettlDate2'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'SettlDate2'                 => V}});
decode_NewOrderList_grpOrders([{'OrderQty2'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'OrderQty2'                  => V}});
decode_NewOrderList_grpOrders([{'Price2'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Price2'                     => V}});
decode_NewOrderList_grpOrders([{'PositionEffect'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PositionEffect'             => V}});
decode_NewOrderList_grpOrders([{'CoveredOrUncovered'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'CoveredOrUncovered'         => V}});
decode_NewOrderList_grpOrders([{'MaxShow'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'MaxShow'                    => V}});
decode_NewOrderList_grpOrders([{'PegOffsetValue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PegOffsetValue'             => V}});
decode_NewOrderList_grpOrders([{'PegMoveType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PegMoveType'                => V}});
decode_NewOrderList_grpOrders([{'PegOffsetType'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PegOffsetType'              => V}});
decode_NewOrderList_grpOrders([{'PegLimitType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PegLimitType'               => V}});
decode_NewOrderList_grpOrders([{'PegRoundDirection'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PegRoundDirection'          => V}});
decode_NewOrderList_grpOrders([{'PegScope'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'PegScope'                   => V}});
decode_NewOrderList_grpOrders([{'DiscretionInst'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionInst'             => V}});
decode_NewOrderList_grpOrders([{'DiscretionOffsetValue'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionOffsetValue'      => V}});
decode_NewOrderList_grpOrders([{'DiscretionMoveType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionMoveType'         => V}});
decode_NewOrderList_grpOrders([{'DiscretionOffsetType'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionOffsetType'       => V}});
decode_NewOrderList_grpOrders([{'DiscretionLimitType'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionLimitType'        => V}});
decode_NewOrderList_grpOrders([{'DiscretionRoundDirection'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionRoundDirection'   => V}});
decode_NewOrderList_grpOrders([{'DiscretionScope'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'DiscretionScope'            => V}});
decode_NewOrderList_grpOrders([{'TargetStrategy'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'TargetStrategy'             => V}});
decode_NewOrderList_grpOrders([{'TargetStrategyParameters'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'TargetStrategyParameters'   => V}});
decode_NewOrderList_grpOrders([{'ParticipationRate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'ParticipationRate'          => V}});
decode_NewOrderList_grpOrders([{'Designation'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpOrders(T, def(Delim,H), R#group{fields = F#{'Designation'                => V}});
decode_NewOrderList_grpOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message NewOrderList
decode_NewOrderList_grpPartyIDs(L, R) -> decode_NewOrderList_grpPartyIDs(L, undefined, R).
decode_NewOrderList_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_NewOrderList_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_NewOrderList_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_NewOrderList_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_NewOrderList_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message NewOrderList
decode_NewOrderList_grpPartySubIDs(L, R) -> decode_NewOrderList_grpPartySubIDs(L, undefined, R).
decode_NewOrderList_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_NewOrderList_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_NewOrderList_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message NewOrderList
decode_NewOrderList_grpSecurityAltID(L, R) -> decode_NewOrderList_grpSecurityAltID(L, undefined, R).
decode_NewOrderList_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_NewOrderList_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_NewOrderList_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message NewOrderList
decode_NewOrderList_grpStipulations(L, R) -> decode_NewOrderList_grpStipulations(L, undefined, R).
decode_NewOrderList_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_NewOrderList_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_NewOrderList_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message NewOrderList
decode_NewOrderList_grpTradingSessions(L, R) -> decode_NewOrderList_grpTradingSessions(L, undefined, R).
decode_NewOrderList_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_NewOrderList_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_NewOrderList_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message NewOrderList
decode_NewOrderList_grpUnderlyingSecurityAltID(L, R) -> decode_NewOrderList_grpUnderlyingSecurityAltID(L, undefined, R).
decode_NewOrderList_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_NewOrderList_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_NewOrderList_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message NewOrderList
decode_NewOrderList_grpUnderlyingStips(L, R) -> decode_NewOrderList_grpUnderlyingStips(L, undefined, R).
decode_NewOrderList_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_NewOrderList_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_NewOrderList_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message NewOrderList
decode_NewOrderList_grpUnderlyings(L, R) -> decode_NewOrderList_grpUnderlyings(L, undefined, R).
decode_NewOrderList_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderList_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_NewOrderList_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_NewOrderList_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_NewOrderList_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_NewOrderList_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_NewOrderList_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_NewOrderList_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_NewOrderList_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_NewOrderList_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message NewOrderMultileg
decode_NewOrderMultileg_grpAllocs(L, R) -> decode_NewOrderMultileg_grpAllocs(L, undefined, R).
decode_NewOrderMultileg_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_NewOrderMultileg_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_NewOrderMultileg_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_NewOrderMultileg_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_NewOrderMultileg_grpAllocs([{'NoNested3PartyIDs'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNested3PartyIDs'  => V}});
decode_NewOrderMultileg_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_NewOrderMultileg_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message NewOrderMultileg
decode_NewOrderMultileg_grpEvents(L, R) -> decode_NewOrderMultileg_grpEvents(L, undefined, R).
decode_NewOrderMultileg_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_NewOrderMultileg_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_NewOrderMultileg_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_NewOrderMultileg_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_NewOrderMultileg_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegAllocs in message NewOrderMultileg
decode_NewOrderMultileg_grpLegAllocs(L, R) -> decode_NewOrderMultileg_grpLegAllocs(L, undefined, R).
decode_NewOrderMultileg_grpLegAllocs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpLegAllocs([{'LegAllocAccount'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegAllocAccount'      => V}});
decode_NewOrderMultileg_grpLegAllocs([{'LegIndividualAllocID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegIndividualAllocID' => V}});
decode_NewOrderMultileg_grpLegAllocs([{'NoNested2PartyIDs'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs'    => V}});
decode_NewOrderMultileg_grpLegAllocs([{'LegAllocQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegAllocQty'          => V}});
decode_NewOrderMultileg_grpLegAllocs([{'LegAllocAcctIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegAllocAcctIDSource' => V}});
decode_NewOrderMultileg_grpLegAllocs([{'LegSettlCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegAllocs(T, def(Delim,H), R#group{fields = F#{'LegSettlCurrency'     => V}});
decode_NewOrderMultileg_grpLegAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message NewOrderMultileg
decode_NewOrderMultileg_grpLegSecurityAltID(L, R) -> decode_NewOrderMultileg_grpLegSecurityAltID(L, undefined, R).
decode_NewOrderMultileg_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_NewOrderMultileg_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_NewOrderMultileg_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message NewOrderMultileg
decode_NewOrderMultileg_grpLegStipulations(L, R) -> decode_NewOrderMultileg_grpLegStipulations(L, undefined, R).
decode_NewOrderMultileg_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_NewOrderMultileg_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_NewOrderMultileg_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message NewOrderMultileg
decode_NewOrderMultileg_grpLegs(L, R) -> decode_NewOrderMultileg_grpLegs(L, undefined, R).
decode_NewOrderMultileg_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_NewOrderMultileg_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_NewOrderMultileg_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_NewOrderMultileg_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_NewOrderMultileg_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_NewOrderMultileg_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_NewOrderMultileg_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_NewOrderMultileg_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_NewOrderMultileg_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_NewOrderMultileg_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_NewOrderMultileg_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_NewOrderMultileg_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_NewOrderMultileg_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_NewOrderMultileg_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_NewOrderMultileg_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_NewOrderMultileg_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_NewOrderMultileg_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_NewOrderMultileg_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_NewOrderMultileg_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_NewOrderMultileg_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_NewOrderMultileg_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_NewOrderMultileg_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_NewOrderMultileg_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_NewOrderMultileg_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_NewOrderMultileg_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_NewOrderMultileg_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_NewOrderMultileg_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_NewOrderMultileg_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_NewOrderMultileg_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_NewOrderMultileg_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_NewOrderMultileg_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_NewOrderMultileg_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_NewOrderMultileg_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_NewOrderMultileg_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_NewOrderMultileg_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_NewOrderMultileg_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_NewOrderMultileg_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_NewOrderMultileg_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_NewOrderMultileg_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_NewOrderMultileg_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_NewOrderMultileg_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_NewOrderMultileg_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_NewOrderMultileg_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_NewOrderMultileg_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_NewOrderMultileg_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_NewOrderMultileg_grpLegs([{'NoLegAllocs'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegAllocs'                   => V}});
decode_NewOrderMultileg_grpLegs([{'LegPositionEffect'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPositionEffect'             => V}});
decode_NewOrderMultileg_grpLegs([{'LegCoveredOrUncovered'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCoveredOrUncovered'         => V}});
decode_NewOrderMultileg_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_NewOrderMultileg_grpLegs([{'LegRefID'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRefID'                      => V}});
decode_NewOrderMultileg_grpLegs([{'LegPrice'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPrice'                      => V}});
decode_NewOrderMultileg_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_NewOrderMultileg_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_NewOrderMultileg_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpNested2PartyIDs(L, R) -> decode_NewOrderMultileg_grpNested2PartyIDs(L, undefined, R).
decode_NewOrderMultileg_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_NewOrderMultileg_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_NewOrderMultileg_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_NewOrderMultileg_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_NewOrderMultileg_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpNested2PartySubIDs(L, R) -> decode_NewOrderMultileg_grpNested2PartySubIDs(L, undefined, R).
decode_NewOrderMultileg_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_NewOrderMultileg_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_NewOrderMultileg_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested3PartyIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpNested3PartyIDs(L, R) -> decode_NewOrderMultileg_grpNested3PartyIDs(L, undefined, R).
decode_NewOrderMultileg_grpNested3PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpNested3PartyIDs([{'Nested3PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartyID'       => V}});
decode_NewOrderMultileg_grpNested3PartyIDs([{'Nested3PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartyIDSource' => V}});
decode_NewOrderMultileg_grpNested3PartyIDs([{'Nested3PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartyRole'     => V}});
decode_NewOrderMultileg_grpNested3PartyIDs([{'NoNested3PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested3PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested3PartySubIDs' => V}});
decode_NewOrderMultileg_grpNested3PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested3PartySubIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpNested3PartySubIDs(L, R) -> decode_NewOrderMultileg_grpNested3PartySubIDs(L, undefined, R).
decode_NewOrderMultileg_grpNested3PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpNested3PartySubIDs([{'Nested3PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested3PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartySubID'     => V}});
decode_NewOrderMultileg_grpNested3PartySubIDs([{'Nested3PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNested3PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested3PartySubIDType' => V}});
decode_NewOrderMultileg_grpNested3PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpNestedPartyIDs(L, R) -> decode_NewOrderMultileg_grpNestedPartyIDs(L, undefined, R).
decode_NewOrderMultileg_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_NewOrderMultileg_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_NewOrderMultileg_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_NewOrderMultileg_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_NewOrderMultileg_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpNestedPartySubIDs(L, R) -> decode_NewOrderMultileg_grpNestedPartySubIDs(L, undefined, R).
decode_NewOrderMultileg_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_NewOrderMultileg_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_NewOrderMultileg_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpPartyIDs(L, R) -> decode_NewOrderMultileg_grpPartyIDs(L, undefined, R).
decode_NewOrderMultileg_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_NewOrderMultileg_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_NewOrderMultileg_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_NewOrderMultileg_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_NewOrderMultileg_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message NewOrderMultileg
decode_NewOrderMultileg_grpPartySubIDs(L, R) -> decode_NewOrderMultileg_grpPartySubIDs(L, undefined, R).
decode_NewOrderMultileg_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_NewOrderMultileg_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_NewOrderMultileg_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message NewOrderMultileg
decode_NewOrderMultileg_grpSecurityAltID(L, R) -> decode_NewOrderMultileg_grpSecurityAltID(L, undefined, R).
decode_NewOrderMultileg_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_NewOrderMultileg_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_NewOrderMultileg_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message NewOrderMultileg
decode_NewOrderMultileg_grpTradingSessions(L, R) -> decode_NewOrderMultileg_grpTradingSessions(L, undefined, R).
decode_NewOrderMultileg_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_NewOrderMultileg_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_NewOrderMultileg_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message NewOrderMultileg
decode_NewOrderMultileg_grpUnderlyingSecurityAltID(L, R) -> decode_NewOrderMultileg_grpUnderlyingSecurityAltID(L, undefined, R).
decode_NewOrderMultileg_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_NewOrderMultileg_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_NewOrderMultileg_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message NewOrderMultileg
decode_NewOrderMultileg_grpUnderlyingStips(L, R) -> decode_NewOrderMultileg_grpUnderlyingStips(L, undefined, R).
decode_NewOrderMultileg_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_NewOrderMultileg_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_NewOrderMultileg_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message NewOrderMultileg
decode_NewOrderMultileg_grpUnderlyings(L, R) -> decode_NewOrderMultileg_grpUnderlyings(L, undefined, R).
decode_NewOrderMultileg_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_NewOrderMultileg_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_NewOrderMultileg_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_NewOrderMultileg_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_NewOrderMultileg_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_NewOrderMultileg_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_NewOrderMultileg_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_NewOrderMultileg_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderMultileg_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_NewOrderMultileg_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message NewOrderSingle
decode_NewOrderSingle_grpAllocs(L, R) -> decode_NewOrderSingle_grpAllocs(L, undefined, R).
decode_NewOrderSingle_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_NewOrderSingle_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_NewOrderSingle_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_NewOrderSingle_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_NewOrderSingle_grpAllocs([{'NoNestedPartyIDs'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'   => V}});
decode_NewOrderSingle_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_NewOrderSingle_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message NewOrderSingle
decode_NewOrderSingle_grpEvents(L, R) -> decode_NewOrderSingle_grpEvents(L, undefined, R).
decode_NewOrderSingle_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_NewOrderSingle_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_NewOrderSingle_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_NewOrderSingle_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_NewOrderSingle_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message NewOrderSingle
decode_NewOrderSingle_grpNestedPartyIDs(L, R) -> decode_NewOrderSingle_grpNestedPartyIDs(L, undefined, R).
decode_NewOrderSingle_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_NewOrderSingle_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_NewOrderSingle_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_NewOrderSingle_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_NewOrderSingle_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message NewOrderSingle
decode_NewOrderSingle_grpNestedPartySubIDs(L, R) -> decode_NewOrderSingle_grpNestedPartySubIDs(L, undefined, R).
decode_NewOrderSingle_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_NewOrderSingle_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_NewOrderSingle_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message NewOrderSingle
decode_NewOrderSingle_grpPartyIDs(L, R) -> decode_NewOrderSingle_grpPartyIDs(L, undefined, R).
decode_NewOrderSingle_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_NewOrderSingle_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_NewOrderSingle_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_NewOrderSingle_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_NewOrderSingle_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message NewOrderSingle
decode_NewOrderSingle_grpPartySubIDs(L, R) -> decode_NewOrderSingle_grpPartySubIDs(L, undefined, R).
decode_NewOrderSingle_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_NewOrderSingle_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_NewOrderSingle_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message NewOrderSingle
decode_NewOrderSingle_grpSecurityAltID(L, R) -> decode_NewOrderSingle_grpSecurityAltID(L, undefined, R).
decode_NewOrderSingle_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_NewOrderSingle_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_NewOrderSingle_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message NewOrderSingle
decode_NewOrderSingle_grpStipulations(L, R) -> decode_NewOrderSingle_grpStipulations(L, undefined, R).
decode_NewOrderSingle_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_NewOrderSingle_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_NewOrderSingle_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message NewOrderSingle
decode_NewOrderSingle_grpTradingSessions(L, R) -> decode_NewOrderSingle_grpTradingSessions(L, undefined, R).
decode_NewOrderSingle_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_NewOrderSingle_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_NewOrderSingle_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message NewOrderSingle
decode_NewOrderSingle_grpUnderlyingSecurityAltID(L, R) -> decode_NewOrderSingle_grpUnderlyingSecurityAltID(L, undefined, R).
decode_NewOrderSingle_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_NewOrderSingle_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_NewOrderSingle_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message NewOrderSingle
decode_NewOrderSingle_grpUnderlyingStips(L, R) -> decode_NewOrderSingle_grpUnderlyingStips(L, undefined, R).
decode_NewOrderSingle_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_NewOrderSingle_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_NewOrderSingle_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message NewOrderSingle
decode_NewOrderSingle_grpUnderlyings(L, R) -> decode_NewOrderSingle_grpUnderlyings(L, undefined, R).
decode_NewOrderSingle_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_NewOrderSingle_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_NewOrderSingle_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_NewOrderSingle_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_NewOrderSingle_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_NewOrderSingle_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_NewOrderSingle_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_NewOrderSingle_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_NewOrderSingle_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_NewOrderSingle_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message News
decode_News_grpEvents(L, R) -> decode_News_grpEvents(L, undefined, R).
decode_News_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_News_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_News_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_News_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_News_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message News
decode_News_grpLegSecurityAltID(L, R) -> decode_News_grpLegSecurityAltID(L, undefined, R).
decode_News_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_News_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_News_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message News
decode_News_grpLegs(L, R) -> decode_News_grpLegs(L, undefined, R).
decode_News_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_News_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_News_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_News_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_News_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_News_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_News_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_News_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_News_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_News_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_News_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_News_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_News_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_News_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_News_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_News_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_News_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_News_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_News_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_News_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_News_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_News_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_News_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_News_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_News_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_News_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_News_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_News_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_News_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_News_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_News_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_News_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_News_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_News_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_News_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_News_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_News_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_News_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_News_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_News_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_News_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_News_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_News_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLinesOfText in message News
decode_News_grpLinesOfText(L, R) -> decode_News_grpLinesOfText(L, undefined, R).
decode_News_grpLinesOfText([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpLinesOfText([{'Text'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLinesOfText(T, def(Delim,H), R#group{fields = F#{'Text'           => V}});
decode_News_grpLinesOfText([{'EncodedTextLen'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLinesOfText(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen' => V}});
decode_News_grpLinesOfText([{'EncodedText'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpLinesOfText(T, def(Delim,H), R#group{fields = F#{'EncodedText'    => V}});
decode_News_grpLinesOfText(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message News
decode_News_grpRelatedSym(L, R) -> decode_News_grpRelatedSym(L, undefined, R).
decode_News_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_News_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_News_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_News_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_News_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_News_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_News_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_News_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_News_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_News_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_News_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_News_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_News_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_News_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_News_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_News_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_News_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_News_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_News_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_News_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_News_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_News_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_News_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_News_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_News_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_News_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_News_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_News_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_News_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_News_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_News_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_News_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_News_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_News_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_News_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_News_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_News_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_News_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_News_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_News_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_News_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_News_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_News_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_News_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRoutingIDs in message News
decode_News_grpRoutingIDs(L, R) -> decode_News_grpRoutingIDs(L, undefined, R).
decode_News_grpRoutingIDs([{Delim          ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpRoutingIDs([{'RoutingType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRoutingIDs(T, def(Delim,H), R#group{fields = F#{'RoutingType' => V}});
decode_News_grpRoutingIDs([{'RoutingID'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpRoutingIDs(T, def(Delim,H), R#group{fields = F#{'RoutingID'   => V}});
decode_News_grpRoutingIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message News
decode_News_grpSecurityAltID(L, R) -> decode_News_grpSecurityAltID(L, undefined, R).
decode_News_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_News_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_News_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message News
decode_News_grpUnderlyingSecurityAltID(L, R) -> decode_News_grpUnderlyingSecurityAltID(L, undefined, R).
decode_News_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_News_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_News_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message News
decode_News_grpUnderlyingStips(L, R) -> decode_News_grpUnderlyingStips(L, undefined, R).
decode_News_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_News_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_News_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message News
decode_News_grpUnderlyings(L, R) -> decode_News_grpUnderlyings(L, undefined, R).
decode_News_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_News_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_News_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_News_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_News_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_News_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_News_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_News_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_News_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_News_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_News_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_News_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_News_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_News_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_News_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_News_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_News_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_News_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_News_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_News_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_News_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_News_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_News_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_News_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_News_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_News_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_News_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_News_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_News_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_News_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_News_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_News_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_News_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_News_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_News_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_News_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_News_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_News_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_News_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_News_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_News_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_News_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_News_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_News_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_News_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_News_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_News_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_News_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_News_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_News_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpAllocs(L, R) -> decode_OrderCancelReplaceRequest_grpAllocs(L, undefined, R).
decode_OrderCancelReplaceRequest_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_OrderCancelReplaceRequest_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_OrderCancelReplaceRequest_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_OrderCancelReplaceRequest_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_OrderCancelReplaceRequest_grpAllocs([{'NoNestedPartyIDs'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'   => V}});
decode_OrderCancelReplaceRequest_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_OrderCancelReplaceRequest_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpEvents(L, R) -> decode_OrderCancelReplaceRequest_grpEvents(L, undefined, R).
decode_OrderCancelReplaceRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_OrderCancelReplaceRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_OrderCancelReplaceRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_OrderCancelReplaceRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_OrderCancelReplaceRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpNestedPartyIDs(L, R) -> decode_OrderCancelReplaceRequest_grpNestedPartyIDs(L, undefined, R).
decode_OrderCancelReplaceRequest_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_OrderCancelReplaceRequest_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_OrderCancelReplaceRequest_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_OrderCancelReplaceRequest_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_OrderCancelReplaceRequest_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpNestedPartySubIDs(L, R) -> decode_OrderCancelReplaceRequest_grpNestedPartySubIDs(L, undefined, R).
decode_OrderCancelReplaceRequest_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_OrderCancelReplaceRequest_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_OrderCancelReplaceRequest_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpPartyIDs(L, R) -> decode_OrderCancelReplaceRequest_grpPartyIDs(L, undefined, R).
decode_OrderCancelReplaceRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_OrderCancelReplaceRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_OrderCancelReplaceRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_OrderCancelReplaceRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_OrderCancelReplaceRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpPartySubIDs(L, R) -> decode_OrderCancelReplaceRequest_grpPartySubIDs(L, undefined, R).
decode_OrderCancelReplaceRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_OrderCancelReplaceRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_OrderCancelReplaceRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpSecurityAltID(L, R) -> decode_OrderCancelReplaceRequest_grpSecurityAltID(L, undefined, R).
decode_OrderCancelReplaceRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_OrderCancelReplaceRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_OrderCancelReplaceRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpTradingSessions(L, R) -> decode_OrderCancelReplaceRequest_grpTradingSessions(L, undefined, R).
decode_OrderCancelReplaceRequest_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_OrderCancelReplaceRequest_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_OrderCancelReplaceRequest_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, R) -> decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_OrderCancelReplaceRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpUnderlyingStips(L, R) -> decode_OrderCancelReplaceRequest_grpUnderlyingStips(L, undefined, R).
decode_OrderCancelReplaceRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_OrderCancelReplaceRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_OrderCancelReplaceRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message OrderCancelReplaceRequest
decode_OrderCancelReplaceRequest_grpUnderlyings(L, R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(L, undefined, R).
decode_OrderCancelReplaceRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelReplaceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_OrderCancelReplaceRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message OrderCancelRequest
decode_OrderCancelRequest_grpEvents(L, R) -> decode_OrderCancelRequest_grpEvents(L, undefined, R).
decode_OrderCancelRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_OrderCancelRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_OrderCancelRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_OrderCancelRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_OrderCancelRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message OrderCancelRequest
decode_OrderCancelRequest_grpPartyIDs(L, R) -> decode_OrderCancelRequest_grpPartyIDs(L, undefined, R).
decode_OrderCancelRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_OrderCancelRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_OrderCancelRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_OrderCancelRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_OrderCancelRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message OrderCancelRequest
decode_OrderCancelRequest_grpPartySubIDs(L, R) -> decode_OrderCancelRequest_grpPartySubIDs(L, undefined, R).
decode_OrderCancelRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_OrderCancelRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_OrderCancelRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message OrderCancelRequest
decode_OrderCancelRequest_grpSecurityAltID(L, R) -> decode_OrderCancelRequest_grpSecurityAltID(L, undefined, R).
decode_OrderCancelRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_OrderCancelRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_OrderCancelRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message OrderCancelRequest
decode_OrderCancelRequest_grpUnderlyingSecurityAltID(L, R) -> decode_OrderCancelRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_OrderCancelRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_OrderCancelRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_OrderCancelRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message OrderCancelRequest
decode_OrderCancelRequest_grpUnderlyingStips(L, R) -> decode_OrderCancelRequest_grpUnderlyingStips(L, undefined, R).
decode_OrderCancelRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_OrderCancelRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_OrderCancelRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message OrderCancelRequest
decode_OrderCancelRequest_grpUnderlyings(L, R) -> decode_OrderCancelRequest_grpUnderlyings(L, undefined, R).
decode_OrderCancelRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_OrderCancelRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_OrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_OrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_OrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_OrderCancelRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_OrderCancelRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_OrderCancelRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderCancelRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_OrderCancelRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAffectedOrders in message OrderMassCancelReport
decode_OrderMassCancelReport_grpAffectedOrders(L, R) -> decode_OrderMassCancelReport_grpAffectedOrders(L, undefined, R).
decode_OrderMassCancelReport_grpAffectedOrders([{Delim                       ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelReport_grpAffectedOrders([{'OrigClOrdID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpAffectedOrders(T, def(Delim,H), R#group{fields = F#{'OrigClOrdID'              => V}});
decode_OrderMassCancelReport_grpAffectedOrders([{'AffectedOrderID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpAffectedOrders(T, def(Delim,H), R#group{fields = F#{'AffectedOrderID'          => V}});
decode_OrderMassCancelReport_grpAffectedOrders([{'AffectedSecondaryOrderID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpAffectedOrders(T, def(Delim,H), R#group{fields = F#{'AffectedSecondaryOrderID' => V}});
decode_OrderMassCancelReport_grpAffectedOrders(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message OrderMassCancelReport
decode_OrderMassCancelReport_grpEvents(L, R) -> decode_OrderMassCancelReport_grpEvents(L, undefined, R).
decode_OrderMassCancelReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_OrderMassCancelReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_OrderMassCancelReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_OrderMassCancelReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_OrderMassCancelReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message OrderMassCancelReport
decode_OrderMassCancelReport_grpSecurityAltID(L, R) -> decode_OrderMassCancelReport_grpSecurityAltID(L, undefined, R).
decode_OrderMassCancelReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_OrderMassCancelReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_OrderMassCancelReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message OrderMassCancelReport
decode_OrderMassCancelReport_grpUnderlyingSecurityAltID(L, R) -> decode_OrderMassCancelReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_OrderMassCancelReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_OrderMassCancelReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_OrderMassCancelReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message OrderMassCancelReport
decode_OrderMassCancelReport_grpUnderlyingStips(L, R) -> decode_OrderMassCancelReport_grpUnderlyingStips(L, undefined, R).
decode_OrderMassCancelReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_OrderMassCancelReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_OrderMassCancelReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message OrderMassCancelRequest
decode_OrderMassCancelRequest_grpEvents(L, R) -> decode_OrderMassCancelRequest_grpEvents(L, undefined, R).
decode_OrderMassCancelRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_OrderMassCancelRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_OrderMassCancelRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_OrderMassCancelRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_OrderMassCancelRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message OrderMassCancelRequest
decode_OrderMassCancelRequest_grpSecurityAltID(L, R) -> decode_OrderMassCancelRequest_grpSecurityAltID(L, undefined, R).
decode_OrderMassCancelRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_OrderMassCancelRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_OrderMassCancelRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message OrderMassCancelRequest
decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID(L, R) -> decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_OrderMassCancelRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message OrderMassCancelRequest
decode_OrderMassCancelRequest_grpUnderlyingStips(L, R) -> decode_OrderMassCancelRequest_grpUnderlyingStips(L, undefined, R).
decode_OrderMassCancelRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassCancelRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_OrderMassCancelRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassCancelRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_OrderMassCancelRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message OrderMassStatusRequest
decode_OrderMassStatusRequest_grpEvents(L, R) -> decode_OrderMassStatusRequest_grpEvents(L, undefined, R).
decode_OrderMassStatusRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassStatusRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_OrderMassStatusRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_OrderMassStatusRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_OrderMassStatusRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_OrderMassStatusRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message OrderMassStatusRequest
decode_OrderMassStatusRequest_grpPartyIDs(L, R) -> decode_OrderMassStatusRequest_grpPartyIDs(L, undefined, R).
decode_OrderMassStatusRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassStatusRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_OrderMassStatusRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_OrderMassStatusRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_OrderMassStatusRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_OrderMassStatusRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message OrderMassStatusRequest
decode_OrderMassStatusRequest_grpPartySubIDs(L, R) -> decode_OrderMassStatusRequest_grpPartySubIDs(L, undefined, R).
decode_OrderMassStatusRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassStatusRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_OrderMassStatusRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_OrderMassStatusRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message OrderMassStatusRequest
decode_OrderMassStatusRequest_grpSecurityAltID(L, R) -> decode_OrderMassStatusRequest_grpSecurityAltID(L, undefined, R).
decode_OrderMassStatusRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassStatusRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_OrderMassStatusRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_OrderMassStatusRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message OrderMassStatusRequest
decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID(L, R) -> decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_OrderMassStatusRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message OrderMassStatusRequest
decode_OrderMassStatusRequest_grpUnderlyingStips(L, R) -> decode_OrderMassStatusRequest_grpUnderlyingStips(L, undefined, R).
decode_OrderMassStatusRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderMassStatusRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_OrderMassStatusRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderMassStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_OrderMassStatusRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message OrderStatusRequest
decode_OrderStatusRequest_grpEvents(L, R) -> decode_OrderStatusRequest_grpEvents(L, undefined, R).
decode_OrderStatusRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_OrderStatusRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_OrderStatusRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_OrderStatusRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_OrderStatusRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message OrderStatusRequest
decode_OrderStatusRequest_grpPartyIDs(L, R) -> decode_OrderStatusRequest_grpPartyIDs(L, undefined, R).
decode_OrderStatusRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_OrderStatusRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_OrderStatusRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_OrderStatusRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_OrderStatusRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message OrderStatusRequest
decode_OrderStatusRequest_grpPartySubIDs(L, R) -> decode_OrderStatusRequest_grpPartySubIDs(L, undefined, R).
decode_OrderStatusRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_OrderStatusRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_OrderStatusRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message OrderStatusRequest
decode_OrderStatusRequest_grpSecurityAltID(L, R) -> decode_OrderStatusRequest_grpSecurityAltID(L, undefined, R).
decode_OrderStatusRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_OrderStatusRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_OrderStatusRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message OrderStatusRequest
decode_OrderStatusRequest_grpUnderlyingSecurityAltID(L, R) -> decode_OrderStatusRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_OrderStatusRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_OrderStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_OrderStatusRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message OrderStatusRequest
decode_OrderStatusRequest_grpUnderlyingStips(L, R) -> decode_OrderStatusRequest_grpUnderlyingStips(L, undefined, R).
decode_OrderStatusRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_OrderStatusRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_OrderStatusRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message OrderStatusRequest
decode_OrderStatusRequest_grpUnderlyings(L, R) -> decode_OrderStatusRequest_grpUnderlyings(L, undefined, R).
decode_OrderStatusRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_OrderStatusRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_OrderStatusRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_OrderStatusRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_OrderStatusRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_OrderStatusRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_OrderStatusRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_OrderStatusRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_OrderStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_OrderStatusRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpEvents(L, R) -> decode_PositionMaintenanceReport_grpEvents(L, undefined, R).
decode_PositionMaintenanceReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_PositionMaintenanceReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_PositionMaintenanceReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_PositionMaintenanceReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_PositionMaintenanceReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpLegSecurityAltID(L, R) -> decode_PositionMaintenanceReport_grpLegSecurityAltID(L, undefined, R).
decode_PositionMaintenanceReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_PositionMaintenanceReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_PositionMaintenanceReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpLegs(L, R) -> decode_PositionMaintenanceReport_grpLegs(L, undefined, R).
decode_PositionMaintenanceReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_PositionMaintenanceReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_PositionMaintenanceReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_PositionMaintenanceReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_PositionMaintenanceReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_PositionMaintenanceReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_PositionMaintenanceReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_PositionMaintenanceReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpNestedPartyIDs(L, R) -> decode_PositionMaintenanceReport_grpNestedPartyIDs(L, undefined, R).
decode_PositionMaintenanceReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_PositionMaintenanceReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_PositionMaintenanceReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_PositionMaintenanceReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_PositionMaintenanceReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpNestedPartySubIDs(L, R) -> decode_PositionMaintenanceReport_grpNestedPartySubIDs(L, undefined, R).
decode_PositionMaintenanceReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_PositionMaintenanceReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_PositionMaintenanceReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpPartyIDs(L, R) -> decode_PositionMaintenanceReport_grpPartyIDs(L, undefined, R).
decode_PositionMaintenanceReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_PositionMaintenanceReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_PositionMaintenanceReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_PositionMaintenanceReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_PositionMaintenanceReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpPartySubIDs(L, R) -> decode_PositionMaintenanceReport_grpPartySubIDs(L, undefined, R).
decode_PositionMaintenanceReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_PositionMaintenanceReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_PositionMaintenanceReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPosAmt in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpPosAmt(L, R) -> decode_PositionMaintenanceReport_grpPosAmt(L, undefined, R).
decode_PositionMaintenanceReport_grpPosAmt([{Delim         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpPosAmt([{'PosAmtType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmtType' => V}});
decode_PositionMaintenanceReport_grpPosAmt([{'PosAmt'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmt'     => V}});
decode_PositionMaintenanceReport_grpPosAmt(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPositions in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpPositions(L, R) -> decode_PositionMaintenanceReport_grpPositions(L, undefined, R).
decode_PositionMaintenanceReport_grpPositions([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpPositions([{'PosType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosType'          => V}});
decode_PositionMaintenanceReport_grpPositions([{'LongQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'LongQty'          => V}});
decode_PositionMaintenanceReport_grpPositions([{'ShortQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'ShortQty'         => V}});
decode_PositionMaintenanceReport_grpPositions([{'PosQtyStatus'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosQtyStatus'     => V}});
decode_PositionMaintenanceReport_grpPositions([{'NoNestedPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs' => V}});
decode_PositionMaintenanceReport_grpPositions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpSecurityAltID(L, R) -> decode_PositionMaintenanceReport_grpSecurityAltID(L, undefined, R).
decode_PositionMaintenanceReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_PositionMaintenanceReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_PositionMaintenanceReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpTradingSessions(L, R) -> decode_PositionMaintenanceReport_grpTradingSessions(L, undefined, R).
decode_PositionMaintenanceReport_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_PositionMaintenanceReport_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_PositionMaintenanceReport_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID(L, R) -> decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_PositionMaintenanceReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpUnderlyingStips(L, R) -> decode_PositionMaintenanceReport_grpUnderlyingStips(L, undefined, R).
decode_PositionMaintenanceReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_PositionMaintenanceReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_PositionMaintenanceReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message PositionMaintenanceReport
decode_PositionMaintenanceReport_grpUnderlyings(L, R) -> decode_PositionMaintenanceReport_grpUnderlyings(L, undefined, R).
decode_PositionMaintenanceReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_PositionMaintenanceReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_PositionMaintenanceReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpEvents(L, R) -> decode_PositionMaintenanceRequest_grpEvents(L, undefined, R).
decode_PositionMaintenanceRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_PositionMaintenanceRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_PositionMaintenanceRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_PositionMaintenanceRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_PositionMaintenanceRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpLegSecurityAltID(L, R) -> decode_PositionMaintenanceRequest_grpLegSecurityAltID(L, undefined, R).
decode_PositionMaintenanceRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_PositionMaintenanceRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_PositionMaintenanceRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpLegs(L, R) -> decode_PositionMaintenanceRequest_grpLegs(L, undefined, R).
decode_PositionMaintenanceRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_PositionMaintenanceRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_PositionMaintenanceRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_PositionMaintenanceRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_PositionMaintenanceRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_PositionMaintenanceRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_PositionMaintenanceRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_PositionMaintenanceRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpNestedPartyIDs(L, R) -> decode_PositionMaintenanceRequest_grpNestedPartyIDs(L, undefined, R).
decode_PositionMaintenanceRequest_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_PositionMaintenanceRequest_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_PositionMaintenanceRequest_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_PositionMaintenanceRequest_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_PositionMaintenanceRequest_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpNestedPartySubIDs(L, R) -> decode_PositionMaintenanceRequest_grpNestedPartySubIDs(L, undefined, R).
decode_PositionMaintenanceRequest_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_PositionMaintenanceRequest_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_PositionMaintenanceRequest_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpPartyIDs(L, R) -> decode_PositionMaintenanceRequest_grpPartyIDs(L, undefined, R).
decode_PositionMaintenanceRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_PositionMaintenanceRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_PositionMaintenanceRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_PositionMaintenanceRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_PositionMaintenanceRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpPartySubIDs(L, R) -> decode_PositionMaintenanceRequest_grpPartySubIDs(L, undefined, R).
decode_PositionMaintenanceRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_PositionMaintenanceRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_PositionMaintenanceRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPositions in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpPositions(L, R) -> decode_PositionMaintenanceRequest_grpPositions(L, undefined, R).
decode_PositionMaintenanceRequest_grpPositions([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpPositions([{'PosType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosType'          => V}});
decode_PositionMaintenanceRequest_grpPositions([{'LongQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPositions(T, def(Delim,H), R#group{fields = F#{'LongQty'          => V}});
decode_PositionMaintenanceRequest_grpPositions([{'ShortQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPositions(T, def(Delim,H), R#group{fields = F#{'ShortQty'         => V}});
decode_PositionMaintenanceRequest_grpPositions([{'PosQtyStatus'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosQtyStatus'     => V}});
decode_PositionMaintenanceRequest_grpPositions([{'NoNestedPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpPositions(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs' => V}});
decode_PositionMaintenanceRequest_grpPositions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpSecurityAltID(L, R) -> decode_PositionMaintenanceRequest_grpSecurityAltID(L, undefined, R).
decode_PositionMaintenanceRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_PositionMaintenanceRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_PositionMaintenanceRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpTradingSessions(L, R) -> decode_PositionMaintenanceRequest_grpTradingSessions(L, undefined, R).
decode_PositionMaintenanceRequest_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_PositionMaintenanceRequest_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_PositionMaintenanceRequest_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID(L, R) -> decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_PositionMaintenanceRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpUnderlyingStips(L, R) -> decode_PositionMaintenanceRequest_grpUnderlyingStips(L, undefined, R).
decode_PositionMaintenanceRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_PositionMaintenanceRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_PositionMaintenanceRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message PositionMaintenanceRequest
decode_PositionMaintenanceRequest_grpUnderlyings(L, R) -> decode_PositionMaintenanceRequest_grpUnderlyings(L, undefined, R).
decode_PositionMaintenanceRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_PositionMaintenanceRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionMaintenanceRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_PositionMaintenanceRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message PositionReport
decode_PositionReport_grpEvents(L, R) -> decode_PositionReport_grpEvents(L, undefined, R).
decode_PositionReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_PositionReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_PositionReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_PositionReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_PositionReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message PositionReport
decode_PositionReport_grpLegSecurityAltID(L, R) -> decode_PositionReport_grpLegSecurityAltID(L, undefined, R).
decode_PositionReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_PositionReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_PositionReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message PositionReport
decode_PositionReport_grpLegs(L, R) -> decode_PositionReport_grpLegs(L, undefined, R).
decode_PositionReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_PositionReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_PositionReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_PositionReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_PositionReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_PositionReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_PositionReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_PositionReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_PositionReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_PositionReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_PositionReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_PositionReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_PositionReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_PositionReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_PositionReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_PositionReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_PositionReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_PositionReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_PositionReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_PositionReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_PositionReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_PositionReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_PositionReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_PositionReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_PositionReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_PositionReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_PositionReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_PositionReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_PositionReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_PositionReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_PositionReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_PositionReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_PositionReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_PositionReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_PositionReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_PositionReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_PositionReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_PositionReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_PositionReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_PositionReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_PositionReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_PositionReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_PositionReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message PositionReport
decode_PositionReport_grpNestedPartyIDs(L, R) -> decode_PositionReport_grpNestedPartyIDs(L, undefined, R).
decode_PositionReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_PositionReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_PositionReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_PositionReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_PositionReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message PositionReport
decode_PositionReport_grpNestedPartySubIDs(L, R) -> decode_PositionReport_grpNestedPartySubIDs(L, undefined, R).
decode_PositionReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_PositionReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_PositionReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message PositionReport
decode_PositionReport_grpPartyIDs(L, R) -> decode_PositionReport_grpPartyIDs(L, undefined, R).
decode_PositionReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_PositionReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_PositionReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_PositionReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_PositionReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message PositionReport
decode_PositionReport_grpPartySubIDs(L, R) -> decode_PositionReport_grpPartySubIDs(L, undefined, R).
decode_PositionReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_PositionReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_PositionReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPosAmt in message PositionReport
decode_PositionReport_grpPosAmt(L, R) -> decode_PositionReport_grpPosAmt(L, undefined, R).
decode_PositionReport_grpPosAmt([{Delim         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpPosAmt([{'PosAmtType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmtType' => V}});
decode_PositionReport_grpPosAmt([{'PosAmt'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmt'     => V}});
decode_PositionReport_grpPosAmt(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPositions in message PositionReport
decode_PositionReport_grpPositions(L, R) -> decode_PositionReport_grpPositions(L, undefined, R).
decode_PositionReport_grpPositions([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpPositions([{'PosType'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosType'          => V}});
decode_PositionReport_grpPositions([{'LongQty'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'LongQty'          => V}});
decode_PositionReport_grpPositions([{'ShortQty'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'ShortQty'         => V}});
decode_PositionReport_grpPositions([{'PosQtyStatus'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'PosQtyStatus'     => V}});
decode_PositionReport_grpPositions([{'NoNestedPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpPositions(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs' => V}});
decode_PositionReport_grpPositions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message PositionReport
decode_PositionReport_grpSecurityAltID(L, R) -> decode_PositionReport_grpSecurityAltID(L, undefined, R).
decode_PositionReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_PositionReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_PositionReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message PositionReport
decode_PositionReport_grpUnderlyingSecurityAltID(L, R) -> decode_PositionReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_PositionReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_PositionReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_PositionReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message PositionReport
decode_PositionReport_grpUnderlyingStips(L, R) -> decode_PositionReport_grpUnderlyingStips(L, undefined, R).
decode_PositionReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_PositionReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_PositionReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message PositionReport
decode_PositionReport_grpUnderlyings(L, R) -> decode_PositionReport_grpUnderlyings(L, undefined, R).
decode_PositionReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_PositionReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_PositionReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_PositionReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_PositionReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_PositionReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_PositionReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_PositionReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSettlPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSettlPrice'                 => V}});
decode_PositionReport_grpUnderlyings([{'UnderlyingSettlPriceType'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_PositionReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSettlPriceType'             => V}});
decode_PositionReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message Quote
decode_Quote_grpEvents(L, R) -> decode_Quote_grpEvents(L, undefined, R).
decode_Quote_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_Quote_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_Quote_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_Quote_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_Quote_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message Quote
decode_Quote_grpLegSecurityAltID(L, R) -> decode_Quote_grpLegSecurityAltID(L, undefined, R).
decode_Quote_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_Quote_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_Quote_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message Quote
decode_Quote_grpLegStipulations(L, R) -> decode_Quote_grpLegStipulations(L, undefined, R).
decode_Quote_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_Quote_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_Quote_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message Quote
decode_Quote_grpLegs(L, R) -> decode_Quote_grpLegs(L, undefined, R).
decode_Quote_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_Quote_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_Quote_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_Quote_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_Quote_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_Quote_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_Quote_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_Quote_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_Quote_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_Quote_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_Quote_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_Quote_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_Quote_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_Quote_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_Quote_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_Quote_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_Quote_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_Quote_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_Quote_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_Quote_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_Quote_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_Quote_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_Quote_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_Quote_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_Quote_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_Quote_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_Quote_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_Quote_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_Quote_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_Quote_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_Quote_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_Quote_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_Quote_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_Quote_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_Quote_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_Quote_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_Quote_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_Quote_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_Quote_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_Quote_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_Quote_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_Quote_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_Quote_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_Quote_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_Quote_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_Quote_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_Quote_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_Quote_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_Quote_grpLegs([{'LegPriceType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPriceType'                  => V}});
decode_Quote_grpLegs([{'LegBidPx'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBidPx'                      => V}});
decode_Quote_grpLegs([{'LegOfferPx'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOfferPx'                    => V}});
decode_Quote_grpLegs([{'LegBenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveCurrency'     => V}});
decode_Quote_grpLegs([{'LegBenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveName'         => V}});
decode_Quote_grpLegs([{'LegBenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurvePoint'        => V}});
decode_Quote_grpLegs([{'LegBenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPrice'             => V}});
decode_Quote_grpLegs([{'LegBenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPriceType'         => V}});
decode_Quote_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message Quote
decode_Quote_grpNestedPartyIDs(L, R) -> decode_Quote_grpNestedPartyIDs(L, undefined, R).
decode_Quote_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_Quote_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_Quote_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_Quote_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_Quote_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message Quote
decode_Quote_grpNestedPartySubIDs(L, R) -> decode_Quote_grpNestedPartySubIDs(L, undefined, R).
decode_Quote_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_Quote_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_Quote_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message Quote
decode_Quote_grpPartyIDs(L, R) -> decode_Quote_grpPartyIDs(L, undefined, R).
decode_Quote_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_Quote_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_Quote_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_Quote_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_Quote_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message Quote
decode_Quote_grpPartySubIDs(L, R) -> decode_Quote_grpPartySubIDs(L, undefined, R).
decode_Quote_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_Quote_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_Quote_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteQualifiers in message Quote
decode_Quote_grpQuoteQualifiers(L, R) -> decode_Quote_grpQuoteQualifiers(L, undefined, R).
decode_Quote_grpQuoteQualifiers([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpQuoteQualifiers([{'QuoteQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpQuoteQualifiers(T, def(Delim,H), R#group{fields = F#{'QuoteQualifier' => V}});
decode_Quote_grpQuoteQualifiers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message Quote
decode_Quote_grpSecurityAltID(L, R) -> decode_Quote_grpSecurityAltID(L, undefined, R).
decode_Quote_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_Quote_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_Quote_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message Quote
decode_Quote_grpStipulations(L, R) -> decode_Quote_grpStipulations(L, undefined, R).
decode_Quote_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_Quote_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_Quote_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message Quote
decode_Quote_grpUnderlyingSecurityAltID(L, R) -> decode_Quote_grpUnderlyingSecurityAltID(L, undefined, R).
decode_Quote_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_Quote_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_Quote_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message Quote
decode_Quote_grpUnderlyingStips(L, R) -> decode_Quote_grpUnderlyingStips(L, undefined, R).
decode_Quote_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_Quote_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_Quote_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message Quote
decode_Quote_grpUnderlyings(L, R) -> decode_Quote_grpUnderlyings(L, undefined, R).
decode_Quote_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_Quote_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_Quote_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_Quote_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_Quote_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_Quote_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_Quote_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_Quote_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_Quote_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_Quote_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_Quote_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_Quote_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_Quote_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_Quote_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_Quote_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_Quote_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_Quote_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_Quote_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_Quote_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_Quote_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_Quote_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_Quote_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_Quote_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_Quote_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_Quote_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_Quote_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_Quote_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_Quote_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_Quote_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_Quote_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_Quote_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_Quote_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_Quote_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_Quote_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_Quote_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_Quote_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message QuoteCancel
decode_QuoteCancel_grpEvents(L, R) -> decode_QuoteCancel_grpEvents(L, undefined, R).
decode_QuoteCancel_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_QuoteCancel_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_QuoteCancel_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_QuoteCancel_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_QuoteCancel_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message QuoteCancel
decode_QuoteCancel_grpLegSecurityAltID(L, R) -> decode_QuoteCancel_grpLegSecurityAltID(L, undefined, R).
decode_QuoteCancel_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_QuoteCancel_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_QuoteCancel_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message QuoteCancel
decode_QuoteCancel_grpLegs(L, R) -> decode_QuoteCancel_grpLegs(L, undefined, R).
decode_QuoteCancel_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_QuoteCancel_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_QuoteCancel_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_QuoteCancel_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_QuoteCancel_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_QuoteCancel_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_QuoteCancel_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_QuoteCancel_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_QuoteCancel_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_QuoteCancel_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_QuoteCancel_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_QuoteCancel_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_QuoteCancel_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_QuoteCancel_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_QuoteCancel_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_QuoteCancel_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_QuoteCancel_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_QuoteCancel_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_QuoteCancel_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_QuoteCancel_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_QuoteCancel_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_QuoteCancel_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_QuoteCancel_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_QuoteCancel_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_QuoteCancel_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_QuoteCancel_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_QuoteCancel_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_QuoteCancel_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_QuoteCancel_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_QuoteCancel_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_QuoteCancel_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_QuoteCancel_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_QuoteCancel_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_QuoteCancel_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_QuoteCancel_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_QuoteCancel_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_QuoteCancel_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_QuoteCancel_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_QuoteCancel_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_QuoteCancel_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_QuoteCancel_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_QuoteCancel_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_QuoteCancel_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message QuoteCancel
decode_QuoteCancel_grpPartyIDs(L, R) -> decode_QuoteCancel_grpPartyIDs(L, undefined, R).
decode_QuoteCancel_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_QuoteCancel_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_QuoteCancel_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_QuoteCancel_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_QuoteCancel_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message QuoteCancel
decode_QuoteCancel_grpPartySubIDs(L, R) -> decode_QuoteCancel_grpPartySubIDs(L, undefined, R).
decode_QuoteCancel_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_QuoteCancel_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_QuoteCancel_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteEntries in message QuoteCancel
decode_QuoteCancel_grpQuoteEntries(L, R) -> decode_QuoteCancel_grpQuoteEntries(L, undefined, R).
decode_QuoteCancel_grpQuoteEntries([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpQuoteEntries([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_QuoteCancel_grpQuoteEntries([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_QuoteCancel_grpQuoteEntries([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_QuoteCancel_grpQuoteEntries([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_QuoteCancel_grpQuoteEntries([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_QuoteCancel_grpQuoteEntries([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_QuoteCancel_grpQuoteEntries([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_QuoteCancel_grpQuoteEntries([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_QuoteCancel_grpQuoteEntries([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_QuoteCancel_grpQuoteEntries([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_QuoteCancel_grpQuoteEntries([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_QuoteCancel_grpQuoteEntries([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_QuoteCancel_grpQuoteEntries([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_QuoteCancel_grpQuoteEntries([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_QuoteCancel_grpQuoteEntries([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_QuoteCancel_grpQuoteEntries([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_QuoteCancel_grpQuoteEntries([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_QuoteCancel_grpQuoteEntries([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_QuoteCancel_grpQuoteEntries([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_QuoteCancel_grpQuoteEntries([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_QuoteCancel_grpQuoteEntries([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_QuoteCancel_grpQuoteEntries([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_QuoteCancel_grpQuoteEntries([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_QuoteCancel_grpQuoteEntries([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_QuoteCancel_grpQuoteEntries([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_QuoteCancel_grpQuoteEntries([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_QuoteCancel_grpQuoteEntries([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_QuoteCancel_grpQuoteEntries([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_QuoteCancel_grpQuoteEntries([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_QuoteCancel_grpQuoteEntries([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_QuoteCancel_grpQuoteEntries([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_QuoteCancel_grpQuoteEntries([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_QuoteCancel_grpQuoteEntries([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_QuoteCancel_grpQuoteEntries([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_QuoteCancel_grpQuoteEntries([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_QuoteCancel_grpQuoteEntries([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_QuoteCancel_grpQuoteEntries([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_QuoteCancel_grpQuoteEntries([{'AgreementDesc'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'AgreementDesc'              => V}});
decode_QuoteCancel_grpQuoteEntries([{'AgreementID'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'AgreementID'                => V}});
decode_QuoteCancel_grpQuoteEntries([{'AgreementDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'AgreementDate'              => V}});
decode_QuoteCancel_grpQuoteEntries([{'AgreementCurrency'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'AgreementCurrency'          => V}});
decode_QuoteCancel_grpQuoteEntries([{'TerminationType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'TerminationType'            => V}});
decode_QuoteCancel_grpQuoteEntries([{'StartDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'StartDate'                  => V}});
decode_QuoteCancel_grpQuoteEntries([{'EndDate'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'EndDate'                    => V}});
decode_QuoteCancel_grpQuoteEntries([{'DeliveryType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'DeliveryType'               => V}});
decode_QuoteCancel_grpQuoteEntries([{'MarginRatio'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'MarginRatio'                => V}});
decode_QuoteCancel_grpQuoteEntries([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_QuoteCancel_grpQuoteEntries([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpQuoteEntries(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_QuoteCancel_grpQuoteEntries(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message QuoteCancel
decode_QuoteCancel_grpSecurityAltID(L, R) -> decode_QuoteCancel_grpSecurityAltID(L, undefined, R).
decode_QuoteCancel_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_QuoteCancel_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_QuoteCancel_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message QuoteCancel
decode_QuoteCancel_grpUnderlyingSecurityAltID(L, R) -> decode_QuoteCancel_grpUnderlyingSecurityAltID(L, undefined, R).
decode_QuoteCancel_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_QuoteCancel_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_QuoteCancel_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message QuoteCancel
decode_QuoteCancel_grpUnderlyingStips(L, R) -> decode_QuoteCancel_grpUnderlyingStips(L, undefined, R).
decode_QuoteCancel_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_QuoteCancel_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_QuoteCancel_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message QuoteCancel
decode_QuoteCancel_grpUnderlyings(L, R) -> decode_QuoteCancel_grpUnderlyings(L, undefined, R).
decode_QuoteCancel_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_QuoteCancel_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_QuoteCancel_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_QuoteCancel_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_QuoteCancel_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_QuoteCancel_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_QuoteCancel_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_QuoteCancel_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteCancel_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_QuoteCancel_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message QuoteRequest
decode_QuoteRequest_grpEvents(L, R) -> decode_QuoteRequest_grpEvents(L, undefined, R).
decode_QuoteRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_QuoteRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_QuoteRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_QuoteRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_QuoteRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message QuoteRequest
decode_QuoteRequest_grpLegSecurityAltID(L, R) -> decode_QuoteRequest_grpLegSecurityAltID(L, undefined, R).
decode_QuoteRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_QuoteRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_QuoteRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message QuoteRequest
decode_QuoteRequest_grpLegStipulations(L, R) -> decode_QuoteRequest_grpLegStipulations(L, undefined, R).
decode_QuoteRequest_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_QuoteRequest_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_QuoteRequest_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message QuoteRequest
decode_QuoteRequest_grpLegs(L, R) -> decode_QuoteRequest_grpLegs(L, undefined, R).
decode_QuoteRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_QuoteRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_QuoteRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_QuoteRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_QuoteRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_QuoteRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_QuoteRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_QuoteRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_QuoteRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_QuoteRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_QuoteRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_QuoteRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_QuoteRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_QuoteRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_QuoteRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_QuoteRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_QuoteRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_QuoteRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_QuoteRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_QuoteRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_QuoteRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_QuoteRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_QuoteRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_QuoteRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_QuoteRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_QuoteRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_QuoteRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_QuoteRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_QuoteRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_QuoteRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_QuoteRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_QuoteRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_QuoteRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_QuoteRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_QuoteRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_QuoteRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_QuoteRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_QuoteRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_QuoteRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_QuoteRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_QuoteRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_QuoteRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_QuoteRequest_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_QuoteRequest_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_QuoteRequest_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_QuoteRequest_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_QuoteRequest_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_QuoteRequest_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_QuoteRequest_grpLegs([{'LegBenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveCurrency'     => V}});
decode_QuoteRequest_grpLegs([{'LegBenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveName'         => V}});
decode_QuoteRequest_grpLegs([{'LegBenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurvePoint'        => V}});
decode_QuoteRequest_grpLegs([{'LegBenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPrice'             => V}});
decode_QuoteRequest_grpLegs([{'LegBenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPriceType'         => V}});
decode_QuoteRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message QuoteRequest
decode_QuoteRequest_grpNestedPartyIDs(L, R) -> decode_QuoteRequest_grpNestedPartyIDs(L, undefined, R).
decode_QuoteRequest_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_QuoteRequest_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_QuoteRequest_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_QuoteRequest_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_QuoteRequest_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message QuoteRequest
decode_QuoteRequest_grpNestedPartySubIDs(L, R) -> decode_QuoteRequest_grpNestedPartySubIDs(L, undefined, R).
decode_QuoteRequest_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_QuoteRequest_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_QuoteRequest_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message QuoteRequest
decode_QuoteRequest_grpPartyIDs(L, R) -> decode_QuoteRequest_grpPartyIDs(L, undefined, R).
decode_QuoteRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_QuoteRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_QuoteRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_QuoteRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_QuoteRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message QuoteRequest
decode_QuoteRequest_grpPartySubIDs(L, R) -> decode_QuoteRequest_grpPartySubIDs(L, undefined, R).
decode_QuoteRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_QuoteRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_QuoteRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteQualifiers in message QuoteRequest
decode_QuoteRequest_grpQuoteQualifiers(L, R) -> decode_QuoteRequest_grpQuoteQualifiers(L, undefined, R).
decode_QuoteRequest_grpQuoteQualifiers([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpQuoteQualifiers([{'QuoteQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpQuoteQualifiers(T, def(Delim,H), R#group{fields = F#{'QuoteQualifier' => V}});
decode_QuoteRequest_grpQuoteQualifiers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message QuoteRequest
decode_QuoteRequest_grpRelatedSym(L, R) -> decode_QuoteRequest_grpRelatedSym(L, undefined, R).
decode_QuoteRequest_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_QuoteRequest_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_QuoteRequest_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_QuoteRequest_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_QuoteRequest_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_QuoteRequest_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_QuoteRequest_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_QuoteRequest_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_QuoteRequest_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_QuoteRequest_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_QuoteRequest_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_QuoteRequest_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_QuoteRequest_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_QuoteRequest_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_QuoteRequest_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_QuoteRequest_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_QuoteRequest_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_QuoteRequest_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_QuoteRequest_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_QuoteRequest_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_QuoteRequest_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_QuoteRequest_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_QuoteRequest_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_QuoteRequest_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_QuoteRequest_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_QuoteRequest_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_QuoteRequest_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_QuoteRequest_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_QuoteRequest_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_QuoteRequest_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_QuoteRequest_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_QuoteRequest_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_QuoteRequest_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_QuoteRequest_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_QuoteRequest_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_QuoteRequest_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_QuoteRequest_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_QuoteRequest_grpRelatedSym([{'AgreementDesc'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementDesc'              => V}});
decode_QuoteRequest_grpRelatedSym([{'AgreementID'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementID'                => V}});
decode_QuoteRequest_grpRelatedSym([{'AgreementDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementDate'              => V}});
decode_QuoteRequest_grpRelatedSym([{'AgreementCurrency'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementCurrency'          => V}});
decode_QuoteRequest_grpRelatedSym([{'TerminationType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TerminationType'            => V}});
decode_QuoteRequest_grpRelatedSym([{'StartDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StartDate'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'EndDate'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EndDate'                    => V}});
decode_QuoteRequest_grpRelatedSym([{'DeliveryType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DeliveryType'               => V}});
decode_QuoteRequest_grpRelatedSym([{'MarginRatio'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MarginRatio'                => V}});
decode_QuoteRequest_grpRelatedSym([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_QuoteRequest_grpRelatedSym([{'PrevClosePx'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PrevClosePx'                => V}});
decode_QuoteRequest_grpRelatedSym([{'QuoteRequestType'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuoteRequestType'           => V}});
decode_QuoteRequest_grpRelatedSym([{'QuoteType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuoteType'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_QuoteRequest_grpRelatedSym([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_QuoteRequest_grpRelatedSym([{'TradeOriginationDate'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradeOriginationDate'       => V}});
decode_QuoteRequest_grpRelatedSym([{'Side'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Side'                       => V}});
decode_QuoteRequest_grpRelatedSym([{'QtyType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QtyType'                    => V}});
decode_QuoteRequest_grpRelatedSym([{'OrderQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrderQty'                   => V}});
decode_QuoteRequest_grpRelatedSym([{'CashOrderQty'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CashOrderQty'               => V}});
decode_QuoteRequest_grpRelatedSym([{'OrderPercent'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrderPercent'               => V}});
decode_QuoteRequest_grpRelatedSym([{'RoundingDirection'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RoundingDirection'          => V}});
decode_QuoteRequest_grpRelatedSym([{'RoundingModulus'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RoundingModulus'            => V}});
decode_QuoteRequest_grpRelatedSym([{'SettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SettlType'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'SettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SettlDate'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'SettlDate2'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SettlDate2'                 => V}});
decode_QuoteRequest_grpRelatedSym([{'OrderQty2'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrderQty2'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_QuoteRequest_grpRelatedSym([{'NoStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoStipulations'             => V}});
decode_QuoteRequest_grpRelatedSym([{'Account'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Account'                    => V}});
decode_QuoteRequest_grpRelatedSym([{'AcctIDSource'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'               => V}});
decode_QuoteRequest_grpRelatedSym([{'AccountType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AccountType'                => V}});
decode_QuoteRequest_grpRelatedSym([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_QuoteRequest_grpRelatedSym([{'NoQuoteQualifiers'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoQuoteQualifiers'          => V}});
decode_QuoteRequest_grpRelatedSym([{'QuotePriceType'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuotePriceType'             => V}});
decode_QuoteRequest_grpRelatedSym([{'OrdType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrdType'                    => V}});
decode_QuoteRequest_grpRelatedSym([{'ValidUntilTime'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ValidUntilTime'             => V}});
decode_QuoteRequest_grpRelatedSym([{'ExpireTime'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ExpireTime'                 => V}});
decode_QuoteRequest_grpRelatedSym([{'TransactTime'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TransactTime'               => V}});
decode_QuoteRequest_grpRelatedSym([{'Spread'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Spread'                     => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveCurrency'     => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveName'         => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurvePoint'        => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkPrice'             => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkPriceType'         => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkSecurityID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityID'        => V}});
decode_QuoteRequest_grpRelatedSym([{'BenchmarkSecurityIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityIDSource'  => V}});
decode_QuoteRequest_grpRelatedSym([{'PriceType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PriceType'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'Price'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Price'                      => V}});
decode_QuoteRequest_grpRelatedSym([{'Price2'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Price2'                     => V}});
decode_QuoteRequest_grpRelatedSym([{'YieldType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldType'                  => V}});
decode_QuoteRequest_grpRelatedSym([{'Yield'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Yield'                      => V}});
decode_QuoteRequest_grpRelatedSym([{'YieldCalcDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldCalcDate'              => V}});
decode_QuoteRequest_grpRelatedSym([{'YieldRedemptionDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionDate'        => V}});
decode_QuoteRequest_grpRelatedSym([{'YieldRedemptionPrice'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPrice'       => V}});
decode_QuoteRequest_grpRelatedSym([{'YieldRedemptionPriceType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPriceType'   => V}});
decode_QuoteRequest_grpRelatedSym([{'NoPartyIDs'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'                 => V}});
decode_QuoteRequest_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message QuoteRequest
decode_QuoteRequest_grpSecurityAltID(L, R) -> decode_QuoteRequest_grpSecurityAltID(L, undefined, R).
decode_QuoteRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_QuoteRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_QuoteRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message QuoteRequest
decode_QuoteRequest_grpStipulations(L, R) -> decode_QuoteRequest_grpStipulations(L, undefined, R).
decode_QuoteRequest_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_QuoteRequest_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_QuoteRequest_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message QuoteRequest
decode_QuoteRequest_grpUnderlyingSecurityAltID(L, R) -> decode_QuoteRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_QuoteRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_QuoteRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_QuoteRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message QuoteRequest
decode_QuoteRequest_grpUnderlyingStips(L, R) -> decode_QuoteRequest_grpUnderlyingStips(L, undefined, R).
decode_QuoteRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_QuoteRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_QuoteRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message QuoteRequest
decode_QuoteRequest_grpUnderlyings(L, R) -> decode_QuoteRequest_grpUnderlyings(L, undefined, R).
decode_QuoteRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_QuoteRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_QuoteRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_QuoteRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_QuoteRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_QuoteRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_QuoteRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_QuoteRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_QuoteRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message QuoteRequestReject
decode_QuoteRequestReject_grpEvents(L, R) -> decode_QuoteRequestReject_grpEvents(L, undefined, R).
decode_QuoteRequestReject_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_QuoteRequestReject_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_QuoteRequestReject_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_QuoteRequestReject_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_QuoteRequestReject_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message QuoteRequestReject
decode_QuoteRequestReject_grpLegSecurityAltID(L, R) -> decode_QuoteRequestReject_grpLegSecurityAltID(L, undefined, R).
decode_QuoteRequestReject_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_QuoteRequestReject_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_QuoteRequestReject_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message QuoteRequestReject
decode_QuoteRequestReject_grpLegStipulations(L, R) -> decode_QuoteRequestReject_grpLegStipulations(L, undefined, R).
decode_QuoteRequestReject_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_QuoteRequestReject_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_QuoteRequestReject_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message QuoteRequestReject
decode_QuoteRequestReject_grpLegs(L, R) -> decode_QuoteRequestReject_grpLegs(L, undefined, R).
decode_QuoteRequestReject_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_QuoteRequestReject_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_QuoteRequestReject_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_QuoteRequestReject_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_QuoteRequestReject_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_QuoteRequestReject_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_QuoteRequestReject_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_QuoteRequestReject_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_QuoteRequestReject_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_QuoteRequestReject_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_QuoteRequestReject_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_QuoteRequestReject_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_QuoteRequestReject_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_QuoteRequestReject_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_QuoteRequestReject_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_QuoteRequestReject_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_QuoteRequestReject_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_QuoteRequestReject_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_QuoteRequestReject_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_QuoteRequestReject_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_QuoteRequestReject_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_QuoteRequestReject_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_QuoteRequestReject_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_QuoteRequestReject_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_QuoteRequestReject_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_QuoteRequestReject_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_QuoteRequestReject_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_QuoteRequestReject_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_QuoteRequestReject_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_QuoteRequestReject_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_QuoteRequestReject_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_QuoteRequestReject_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_QuoteRequestReject_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_QuoteRequestReject_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_QuoteRequestReject_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_QuoteRequestReject_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_QuoteRequestReject_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_QuoteRequestReject_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_QuoteRequestReject_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_QuoteRequestReject_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_QuoteRequestReject_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_QuoteRequestReject_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_QuoteRequestReject_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_QuoteRequestReject_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_QuoteRequestReject_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_QuoteRequestReject_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_QuoteRequestReject_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_QuoteRequestReject_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_QuoteRequestReject_grpLegs([{'LegBenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveCurrency'     => V}});
decode_QuoteRequestReject_grpLegs([{'LegBenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveName'         => V}});
decode_QuoteRequestReject_grpLegs([{'LegBenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurvePoint'        => V}});
decode_QuoteRequestReject_grpLegs([{'LegBenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPrice'             => V}});
decode_QuoteRequestReject_grpLegs([{'LegBenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPriceType'         => V}});
decode_QuoteRequestReject_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message QuoteRequestReject
decode_QuoteRequestReject_grpNestedPartyIDs(L, R) -> decode_QuoteRequestReject_grpNestedPartyIDs(L, undefined, R).
decode_QuoteRequestReject_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_QuoteRequestReject_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_QuoteRequestReject_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_QuoteRequestReject_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_QuoteRequestReject_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message QuoteRequestReject
decode_QuoteRequestReject_grpNestedPartySubIDs(L, R) -> decode_QuoteRequestReject_grpNestedPartySubIDs(L, undefined, R).
decode_QuoteRequestReject_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_QuoteRequestReject_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_QuoteRequestReject_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message QuoteRequestReject
decode_QuoteRequestReject_grpPartyIDs(L, R) -> decode_QuoteRequestReject_grpPartyIDs(L, undefined, R).
decode_QuoteRequestReject_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_QuoteRequestReject_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_QuoteRequestReject_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_QuoteRequestReject_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_QuoteRequestReject_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message QuoteRequestReject
decode_QuoteRequestReject_grpPartySubIDs(L, R) -> decode_QuoteRequestReject_grpPartySubIDs(L, undefined, R).
decode_QuoteRequestReject_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_QuoteRequestReject_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_QuoteRequestReject_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteQualifiers in message QuoteRequestReject
decode_QuoteRequestReject_grpQuoteQualifiers(L, R) -> decode_QuoteRequestReject_grpQuoteQualifiers(L, undefined, R).
decode_QuoteRequestReject_grpQuoteQualifiers([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpQuoteQualifiers([{'QuoteQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpQuoteQualifiers(T, def(Delim,H), R#group{fields = F#{'QuoteQualifier' => V}});
decode_QuoteRequestReject_grpQuoteQualifiers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message QuoteRequestReject
decode_QuoteRequestReject_grpRelatedSym(L, R) -> decode_QuoteRequestReject_grpRelatedSym(L, undefined, R).
decode_QuoteRequestReject_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_QuoteRequestReject_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_QuoteRequestReject_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_QuoteRequestReject_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_QuoteRequestReject_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_QuoteRequestReject_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_QuoteRequestReject_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_QuoteRequestReject_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_QuoteRequestReject_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_QuoteRequestReject_grpRelatedSym([{'AgreementDesc'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementDesc'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'AgreementID'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementID'                => V}});
decode_QuoteRequestReject_grpRelatedSym([{'AgreementDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementDate'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'AgreementCurrency'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementCurrency'          => V}});
decode_QuoteRequestReject_grpRelatedSym([{'TerminationType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TerminationType'            => V}});
decode_QuoteRequestReject_grpRelatedSym([{'StartDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StartDate'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'EndDate'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EndDate'                    => V}});
decode_QuoteRequestReject_grpRelatedSym([{'DeliveryType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DeliveryType'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'MarginRatio'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MarginRatio'                => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'PrevClosePx'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PrevClosePx'                => V}});
decode_QuoteRequestReject_grpRelatedSym([{'QuoteRequestType'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuoteRequestType'           => V}});
decode_QuoteRequestReject_grpRelatedSym([{'QuoteType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuoteType'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_QuoteRequestReject_grpRelatedSym([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_QuoteRequestReject_grpRelatedSym([{'TradeOriginationDate'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradeOriginationDate'       => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Side'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Side'                       => V}});
decode_QuoteRequestReject_grpRelatedSym([{'QtyType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QtyType'                    => V}});
decode_QuoteRequestReject_grpRelatedSym([{'OrderQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrderQty'                   => V}});
decode_QuoteRequestReject_grpRelatedSym([{'CashOrderQty'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CashOrderQty'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'OrderPercent'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrderPercent'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'RoundingDirection'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RoundingDirection'          => V}});
decode_QuoteRequestReject_grpRelatedSym([{'RoundingModulus'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RoundingModulus'            => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SettlType'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SettlDate'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'SettlDate2'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SettlDate2'                 => V}});
decode_QuoteRequestReject_grpRelatedSym([{'OrderQty2'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrderQty2'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoStipulations'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Account'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Account'                    => V}});
decode_QuoteRequestReject_grpRelatedSym([{'AcctIDSource'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'AccountType'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AccountType'                => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoQuoteQualifiers'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoQuoteQualifiers'          => V}});
decode_QuoteRequestReject_grpRelatedSym([{'QuotePriceType'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuotePriceType'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'OrdType'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OrdType'                    => V}});
decode_QuoteRequestReject_grpRelatedSym([{'ExpireTime'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ExpireTime'                 => V}});
decode_QuoteRequestReject_grpRelatedSym([{'TransactTime'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TransactTime'               => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Spread'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Spread'                     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveCurrency'     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveName'         => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurvePoint'        => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkPrice'             => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkPriceType'         => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkSecurityID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityID'        => V}});
decode_QuoteRequestReject_grpRelatedSym([{'BenchmarkSecurityIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityIDSource'  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'PriceType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PriceType'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Price'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Price'                      => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Price2'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Price2'                     => V}});
decode_QuoteRequestReject_grpRelatedSym([{'YieldType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldType'                  => V}});
decode_QuoteRequestReject_grpRelatedSym([{'Yield'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Yield'                      => V}});
decode_QuoteRequestReject_grpRelatedSym([{'YieldCalcDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldCalcDate'              => V}});
decode_QuoteRequestReject_grpRelatedSym([{'YieldRedemptionDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionDate'        => V}});
decode_QuoteRequestReject_grpRelatedSym([{'YieldRedemptionPrice'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPrice'       => V}});
decode_QuoteRequestReject_grpRelatedSym([{'YieldRedemptionPriceType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPriceType'   => V}});
decode_QuoteRequestReject_grpRelatedSym([{'NoPartyIDs'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'                 => V}});
decode_QuoteRequestReject_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message QuoteRequestReject
decode_QuoteRequestReject_grpSecurityAltID(L, R) -> decode_QuoteRequestReject_grpSecurityAltID(L, undefined, R).
decode_QuoteRequestReject_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_QuoteRequestReject_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_QuoteRequestReject_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message QuoteRequestReject
decode_QuoteRequestReject_grpStipulations(L, R) -> decode_QuoteRequestReject_grpStipulations(L, undefined, R).
decode_QuoteRequestReject_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_QuoteRequestReject_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_QuoteRequestReject_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message QuoteRequestReject
decode_QuoteRequestReject_grpUnderlyingSecurityAltID(L, R) -> decode_QuoteRequestReject_grpUnderlyingSecurityAltID(L, undefined, R).
decode_QuoteRequestReject_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_QuoteRequestReject_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_QuoteRequestReject_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message QuoteRequestReject
decode_QuoteRequestReject_grpUnderlyingStips(L, R) -> decode_QuoteRequestReject_grpUnderlyingStips(L, undefined, R).
decode_QuoteRequestReject_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_QuoteRequestReject_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_QuoteRequestReject_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message QuoteRequestReject
decode_QuoteRequestReject_grpUnderlyings(L, R) -> decode_QuoteRequestReject_grpUnderlyings(L, undefined, R).
decode_QuoteRequestReject_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_QuoteRequestReject_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_QuoteRequestReject_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_QuoteRequestReject_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_QuoteRequestReject_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_QuoteRequestReject_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_QuoteRequestReject_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_QuoteRequestReject_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteRequestReject_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_QuoteRequestReject_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message QuoteResponse
decode_QuoteResponse_grpEvents(L, R) -> decode_QuoteResponse_grpEvents(L, undefined, R).
decode_QuoteResponse_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_QuoteResponse_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_QuoteResponse_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_QuoteResponse_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_QuoteResponse_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message QuoteResponse
decode_QuoteResponse_grpLegSecurityAltID(L, R) -> decode_QuoteResponse_grpLegSecurityAltID(L, undefined, R).
decode_QuoteResponse_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_QuoteResponse_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_QuoteResponse_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message QuoteResponse
decode_QuoteResponse_grpLegStipulations(L, R) -> decode_QuoteResponse_grpLegStipulations(L, undefined, R).
decode_QuoteResponse_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_QuoteResponse_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_QuoteResponse_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message QuoteResponse
decode_QuoteResponse_grpLegs(L, R) -> decode_QuoteResponse_grpLegs(L, undefined, R).
decode_QuoteResponse_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_QuoteResponse_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_QuoteResponse_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_QuoteResponse_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_QuoteResponse_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_QuoteResponse_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_QuoteResponse_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_QuoteResponse_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_QuoteResponse_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_QuoteResponse_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_QuoteResponse_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_QuoteResponse_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_QuoteResponse_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_QuoteResponse_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_QuoteResponse_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_QuoteResponse_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_QuoteResponse_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_QuoteResponse_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_QuoteResponse_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_QuoteResponse_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_QuoteResponse_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_QuoteResponse_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_QuoteResponse_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_QuoteResponse_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_QuoteResponse_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_QuoteResponse_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_QuoteResponse_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_QuoteResponse_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_QuoteResponse_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_QuoteResponse_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_QuoteResponse_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_QuoteResponse_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_QuoteResponse_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_QuoteResponse_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_QuoteResponse_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_QuoteResponse_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_QuoteResponse_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_QuoteResponse_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_QuoteResponse_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_QuoteResponse_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_QuoteResponse_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_QuoteResponse_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_QuoteResponse_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_QuoteResponse_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_QuoteResponse_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_QuoteResponse_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_QuoteResponse_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_QuoteResponse_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_QuoteResponse_grpLegs([{'LegPriceType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPriceType'                  => V}});
decode_QuoteResponse_grpLegs([{'LegBidPx'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBidPx'                      => V}});
decode_QuoteResponse_grpLegs([{'LegOfferPx'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOfferPx'                    => V}});
decode_QuoteResponse_grpLegs([{'LegBenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveCurrency'     => V}});
decode_QuoteResponse_grpLegs([{'LegBenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveName'         => V}});
decode_QuoteResponse_grpLegs([{'LegBenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurvePoint'        => V}});
decode_QuoteResponse_grpLegs([{'LegBenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPrice'             => V}});
decode_QuoteResponse_grpLegs([{'LegBenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPriceType'         => V}});
decode_QuoteResponse_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message QuoteResponse
decode_QuoteResponse_grpNestedPartyIDs(L, R) -> decode_QuoteResponse_grpNestedPartyIDs(L, undefined, R).
decode_QuoteResponse_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_QuoteResponse_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_QuoteResponse_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_QuoteResponse_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_QuoteResponse_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message QuoteResponse
decode_QuoteResponse_grpNestedPartySubIDs(L, R) -> decode_QuoteResponse_grpNestedPartySubIDs(L, undefined, R).
decode_QuoteResponse_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_QuoteResponse_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_QuoteResponse_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message QuoteResponse
decode_QuoteResponse_grpPartyIDs(L, R) -> decode_QuoteResponse_grpPartyIDs(L, undefined, R).
decode_QuoteResponse_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_QuoteResponse_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_QuoteResponse_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_QuoteResponse_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_QuoteResponse_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message QuoteResponse
decode_QuoteResponse_grpPartySubIDs(L, R) -> decode_QuoteResponse_grpPartySubIDs(L, undefined, R).
decode_QuoteResponse_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_QuoteResponse_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_QuoteResponse_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteQualifiers in message QuoteResponse
decode_QuoteResponse_grpQuoteQualifiers(L, R) -> decode_QuoteResponse_grpQuoteQualifiers(L, undefined, R).
decode_QuoteResponse_grpQuoteQualifiers([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpQuoteQualifiers([{'QuoteQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpQuoteQualifiers(T, def(Delim,H), R#group{fields = F#{'QuoteQualifier' => V}});
decode_QuoteResponse_grpQuoteQualifiers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message QuoteResponse
decode_QuoteResponse_grpSecurityAltID(L, R) -> decode_QuoteResponse_grpSecurityAltID(L, undefined, R).
decode_QuoteResponse_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_QuoteResponse_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_QuoteResponse_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message QuoteResponse
decode_QuoteResponse_grpStipulations(L, R) -> decode_QuoteResponse_grpStipulations(L, undefined, R).
decode_QuoteResponse_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_QuoteResponse_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_QuoteResponse_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message QuoteResponse
decode_QuoteResponse_grpUnderlyingSecurityAltID(L, R) -> decode_QuoteResponse_grpUnderlyingSecurityAltID(L, undefined, R).
decode_QuoteResponse_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_QuoteResponse_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_QuoteResponse_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message QuoteResponse
decode_QuoteResponse_grpUnderlyingStips(L, R) -> decode_QuoteResponse_grpUnderlyingStips(L, undefined, R).
decode_QuoteResponse_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_QuoteResponse_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_QuoteResponse_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message QuoteResponse
decode_QuoteResponse_grpUnderlyings(L, R) -> decode_QuoteResponse_grpUnderlyings(L, undefined, R).
decode_QuoteResponse_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_QuoteResponse_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_QuoteResponse_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_QuoteResponse_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_QuoteResponse_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_QuoteResponse_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_QuoteResponse_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_QuoteResponse_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteResponse_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_QuoteResponse_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message QuoteStatusReport
decode_QuoteStatusReport_grpEvents(L, R) -> decode_QuoteStatusReport_grpEvents(L, undefined, R).
decode_QuoteStatusReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_QuoteStatusReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_QuoteStatusReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_QuoteStatusReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_QuoteStatusReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message QuoteStatusReport
decode_QuoteStatusReport_grpLegSecurityAltID(L, R) -> decode_QuoteStatusReport_grpLegSecurityAltID(L, undefined, R).
decode_QuoteStatusReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_QuoteStatusReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_QuoteStatusReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message QuoteStatusReport
decode_QuoteStatusReport_grpLegStipulations(L, R) -> decode_QuoteStatusReport_grpLegStipulations(L, undefined, R).
decode_QuoteStatusReport_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_QuoteStatusReport_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_QuoteStatusReport_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message QuoteStatusReport
decode_QuoteStatusReport_grpLegs(L, R) -> decode_QuoteStatusReport_grpLegs(L, undefined, R).
decode_QuoteStatusReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_QuoteStatusReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_QuoteStatusReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_QuoteStatusReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_QuoteStatusReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_QuoteStatusReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_QuoteStatusReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_QuoteStatusReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_QuoteStatusReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_QuoteStatusReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_QuoteStatusReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_QuoteStatusReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_QuoteStatusReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_QuoteStatusReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_QuoteStatusReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_QuoteStatusReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_QuoteStatusReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_QuoteStatusReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_QuoteStatusReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_QuoteStatusReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_QuoteStatusReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_QuoteStatusReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_QuoteStatusReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_QuoteStatusReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_QuoteStatusReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_QuoteStatusReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_QuoteStatusReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_QuoteStatusReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_QuoteStatusReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_QuoteStatusReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_QuoteStatusReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_QuoteStatusReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_QuoteStatusReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_QuoteStatusReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_QuoteStatusReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_QuoteStatusReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_QuoteStatusReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_QuoteStatusReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_QuoteStatusReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_QuoteStatusReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_QuoteStatusReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_QuoteStatusReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_QuoteStatusReport_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_QuoteStatusReport_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_QuoteStatusReport_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_QuoteStatusReport_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_QuoteStatusReport_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_QuoteStatusReport_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_QuoteStatusReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message QuoteStatusReport
decode_QuoteStatusReport_grpNestedPartyIDs(L, R) -> decode_QuoteStatusReport_grpNestedPartyIDs(L, undefined, R).
decode_QuoteStatusReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_QuoteStatusReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_QuoteStatusReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_QuoteStatusReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_QuoteStatusReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message QuoteStatusReport
decode_QuoteStatusReport_grpNestedPartySubIDs(L, R) -> decode_QuoteStatusReport_grpNestedPartySubIDs(L, undefined, R).
decode_QuoteStatusReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_QuoteStatusReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_QuoteStatusReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message QuoteStatusReport
decode_QuoteStatusReport_grpPartyIDs(L, R) -> decode_QuoteStatusReport_grpPartyIDs(L, undefined, R).
decode_QuoteStatusReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_QuoteStatusReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_QuoteStatusReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_QuoteStatusReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_QuoteStatusReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message QuoteStatusReport
decode_QuoteStatusReport_grpPartySubIDs(L, R) -> decode_QuoteStatusReport_grpPartySubIDs(L, undefined, R).
decode_QuoteStatusReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_QuoteStatusReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_QuoteStatusReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpQuoteQualifiers in message QuoteStatusReport
decode_QuoteStatusReport_grpQuoteQualifiers(L, R) -> decode_QuoteStatusReport_grpQuoteQualifiers(L, undefined, R).
decode_QuoteStatusReport_grpQuoteQualifiers([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpQuoteQualifiers([{'QuoteQualifier'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpQuoteQualifiers(T, def(Delim,H), R#group{fields = F#{'QuoteQualifier' => V}});
decode_QuoteStatusReport_grpQuoteQualifiers(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message QuoteStatusReport
decode_QuoteStatusReport_grpSecurityAltID(L, R) -> decode_QuoteStatusReport_grpSecurityAltID(L, undefined, R).
decode_QuoteStatusReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_QuoteStatusReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_QuoteStatusReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message QuoteStatusReport
decode_QuoteStatusReport_grpStipulations(L, R) -> decode_QuoteStatusReport_grpStipulations(L, undefined, R).
decode_QuoteStatusReport_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_QuoteStatusReport_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_QuoteStatusReport_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message QuoteStatusReport
decode_QuoteStatusReport_grpUnderlyingSecurityAltID(L, R) -> decode_QuoteStatusReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_QuoteStatusReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_QuoteStatusReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_QuoteStatusReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message QuoteStatusReport
decode_QuoteStatusReport_grpUnderlyingStips(L, R) -> decode_QuoteStatusReport_grpUnderlyingStips(L, undefined, R).
decode_QuoteStatusReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_QuoteStatusReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_QuoteStatusReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message QuoteStatusReport
decode_QuoteStatusReport_grpUnderlyings(L, R) -> decode_QuoteStatusReport_grpUnderlyings(L, undefined, R).
decode_QuoteStatusReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_QuoteStatusReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_QuoteStatusReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_QuoteStatusReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_QuoteStatusReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_QuoteStatusReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_QuoteStatusReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_QuoteStatusReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_QuoteStatusReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message QuoteStatusRequest
decode_QuoteStatusRequest_grpEvents(L, R) -> decode_QuoteStatusRequest_grpEvents(L, undefined, R).
decode_QuoteStatusRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_QuoteStatusRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_QuoteStatusRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_QuoteStatusRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_QuoteStatusRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message QuoteStatusRequest
decode_QuoteStatusRequest_grpLegSecurityAltID(L, R) -> decode_QuoteStatusRequest_grpLegSecurityAltID(L, undefined, R).
decode_QuoteStatusRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_QuoteStatusRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_QuoteStatusRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message QuoteStatusRequest
decode_QuoteStatusRequest_grpLegs(L, R) -> decode_QuoteStatusRequest_grpLegs(L, undefined, R).
decode_QuoteStatusRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_QuoteStatusRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_QuoteStatusRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_QuoteStatusRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_QuoteStatusRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_QuoteStatusRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_QuoteStatusRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_QuoteStatusRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_QuoteStatusRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_QuoteStatusRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_QuoteStatusRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_QuoteStatusRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_QuoteStatusRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_QuoteStatusRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_QuoteStatusRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_QuoteStatusRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_QuoteStatusRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_QuoteStatusRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_QuoteStatusRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_QuoteStatusRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_QuoteStatusRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_QuoteStatusRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_QuoteStatusRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_QuoteStatusRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_QuoteStatusRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_QuoteStatusRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_QuoteStatusRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_QuoteStatusRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_QuoteStatusRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_QuoteStatusRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_QuoteStatusRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_QuoteStatusRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_QuoteStatusRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_QuoteStatusRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_QuoteStatusRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_QuoteStatusRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message QuoteStatusRequest
decode_QuoteStatusRequest_grpPartyIDs(L, R) -> decode_QuoteStatusRequest_grpPartyIDs(L, undefined, R).
decode_QuoteStatusRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_QuoteStatusRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_QuoteStatusRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_QuoteStatusRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_QuoteStatusRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message QuoteStatusRequest
decode_QuoteStatusRequest_grpPartySubIDs(L, R) -> decode_QuoteStatusRequest_grpPartySubIDs(L, undefined, R).
decode_QuoteStatusRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_QuoteStatusRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_QuoteStatusRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message QuoteStatusRequest
decode_QuoteStatusRequest_grpSecurityAltID(L, R) -> decode_QuoteStatusRequest_grpSecurityAltID(L, undefined, R).
decode_QuoteStatusRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_QuoteStatusRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_QuoteStatusRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message QuoteStatusRequest
decode_QuoteStatusRequest_grpUnderlyingSecurityAltID(L, R) -> decode_QuoteStatusRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_QuoteStatusRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_QuoteStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_QuoteStatusRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message QuoteStatusRequest
decode_QuoteStatusRequest_grpUnderlyingStips(L, R) -> decode_QuoteStatusRequest_grpUnderlyingStips(L, undefined, R).
decode_QuoteStatusRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_QuoteStatusRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_QuoteStatusRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message QuoteStatusRequest
decode_QuoteStatusRequest_grpUnderlyings(L, R) -> decode_QuoteStatusRequest_grpUnderlyings(L, undefined, R).
decode_QuoteStatusRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_QuoteStatusRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_QuoteStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_QuoteStatusRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message RFQRequest
decode_RFQRequest_grpEvents(L, R) -> decode_RFQRequest_grpEvents(L, undefined, R).
decode_RFQRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_RFQRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_RFQRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_RFQRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_RFQRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message RFQRequest
decode_RFQRequest_grpLegSecurityAltID(L, R) -> decode_RFQRequest_grpLegSecurityAltID(L, undefined, R).
decode_RFQRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_RFQRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_RFQRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message RFQRequest
decode_RFQRequest_grpLegs(L, R) -> decode_RFQRequest_grpLegs(L, undefined, R).
decode_RFQRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_RFQRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_RFQRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_RFQRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_RFQRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_RFQRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_RFQRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_RFQRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_RFQRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_RFQRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_RFQRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_RFQRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_RFQRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_RFQRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_RFQRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_RFQRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_RFQRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_RFQRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_RFQRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_RFQRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_RFQRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_RFQRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_RFQRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_RFQRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_RFQRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_RFQRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_RFQRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_RFQRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_RFQRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_RFQRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_RFQRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_RFQRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_RFQRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_RFQRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_RFQRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_RFQRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_RFQRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_RFQRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_RFQRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_RFQRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_RFQRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_RFQRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_RFQRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message RFQRequest
decode_RFQRequest_grpRelatedSym(L, R) -> decode_RFQRequest_grpRelatedSym(L, undefined, R).
decode_RFQRequest_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_RFQRequest_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_RFQRequest_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_RFQRequest_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_RFQRequest_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_RFQRequest_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_RFQRequest_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_RFQRequest_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_RFQRequest_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_RFQRequest_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_RFQRequest_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_RFQRequest_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_RFQRequest_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_RFQRequest_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_RFQRequest_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_RFQRequest_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_RFQRequest_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_RFQRequest_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_RFQRequest_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_RFQRequest_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_RFQRequest_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_RFQRequest_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_RFQRequest_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_RFQRequest_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_RFQRequest_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_RFQRequest_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_RFQRequest_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_RFQRequest_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_RFQRequest_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_RFQRequest_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_RFQRequest_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_RFQRequest_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_RFQRequest_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_RFQRequest_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_RFQRequest_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_RFQRequest_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_RFQRequest_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_RFQRequest_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_RFQRequest_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_RFQRequest_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_RFQRequest_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_RFQRequest_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_RFQRequest_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_RFQRequest_grpRelatedSym([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_RFQRequest_grpRelatedSym([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_RFQRequest_grpRelatedSym([{'PrevClosePx'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PrevClosePx'                => V}});
decode_RFQRequest_grpRelatedSym([{'QuoteRequestType'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuoteRequestType'           => V}});
decode_RFQRequest_grpRelatedSym([{'QuoteType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'QuoteType'                  => V}});
decode_RFQRequest_grpRelatedSym([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_RFQRequest_grpRelatedSym([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_RFQRequest_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message RFQRequest
decode_RFQRequest_grpSecurityAltID(L, R) -> decode_RFQRequest_grpSecurityAltID(L, undefined, R).
decode_RFQRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_RFQRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_RFQRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message RFQRequest
decode_RFQRequest_grpUnderlyingSecurityAltID(L, R) -> decode_RFQRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_RFQRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_RFQRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_RFQRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message RFQRequest
decode_RFQRequest_grpUnderlyingStips(L, R) -> decode_RFQRequest_grpUnderlyingStips(L, undefined, R).
decode_RFQRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_RFQRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_RFQRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message RFQRequest
decode_RFQRequest_grpUnderlyings(L, R) -> decode_RFQRequest_grpUnderlyings(L, undefined, R).
decode_RFQRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RFQRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_RFQRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_RFQRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_RFQRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_RFQRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_RFQRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_RFQRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_RFQRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RFQRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_RFQRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDistribInsts in message RegistrationInstructions
decode_RegistrationInstructions_grpDistribInsts(L, R) -> decode_RegistrationInstructions_grpDistribInsts(L, undefined, R).
decode_RegistrationInstructions_grpDistribInsts([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructions_grpDistribInsts([{'DistribPaymentMethod'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'DistribPaymentMethod'       => V}});
decode_RegistrationInstructions_grpDistribInsts([{'DistribPercentage'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'DistribPercentage'          => V}});
decode_RegistrationInstructions_grpDistribInsts([{'CashDistribCurr'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'CashDistribCurr'            => V}});
decode_RegistrationInstructions_grpDistribInsts([{'CashDistribAgentName'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'CashDistribAgentName'       => V}});
decode_RegistrationInstructions_grpDistribInsts([{'CashDistribAgentCode'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'CashDistribAgentCode'       => V}});
decode_RegistrationInstructions_grpDistribInsts([{'CashDistribAgentAcctNumber'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'CashDistribAgentAcctNumber' => V}});
decode_RegistrationInstructions_grpDistribInsts([{'CashDistribPayRef'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'CashDistribPayRef'          => V}});
decode_RegistrationInstructions_grpDistribInsts([{'CashDistribAgentAcctName'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpDistribInsts(T, def(Delim,H), R#group{fields = F#{'CashDistribAgentAcctName'   => V}});
decode_RegistrationInstructions_grpDistribInsts(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message RegistrationInstructions
decode_RegistrationInstructions_grpNestedPartyIDs(L, R) -> decode_RegistrationInstructions_grpNestedPartyIDs(L, undefined, R).
decode_RegistrationInstructions_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructions_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_RegistrationInstructions_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_RegistrationInstructions_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_RegistrationInstructions_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_RegistrationInstructions_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message RegistrationInstructions
decode_RegistrationInstructions_grpNestedPartySubIDs(L, R) -> decode_RegistrationInstructions_grpNestedPartySubIDs(L, undefined, R).
decode_RegistrationInstructions_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructions_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_RegistrationInstructions_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_RegistrationInstructions_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message RegistrationInstructions
decode_RegistrationInstructions_grpPartyIDs(L, R) -> decode_RegistrationInstructions_grpPartyIDs(L, undefined, R).
decode_RegistrationInstructions_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructions_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_RegistrationInstructions_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_RegistrationInstructions_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_RegistrationInstructions_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_RegistrationInstructions_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message RegistrationInstructions
decode_RegistrationInstructions_grpPartySubIDs(L, R) -> decode_RegistrationInstructions_grpPartySubIDs(L, undefined, R).
decode_RegistrationInstructions_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructions_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_RegistrationInstructions_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_RegistrationInstructions_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRegistDtls in message RegistrationInstructions
decode_RegistrationInstructions_grpRegistDtls(L, R) -> decode_RegistrationInstructions_grpRegistDtls(L, undefined, R).
decode_RegistrationInstructions_grpRegistDtls([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructions_grpRegistDtls([{'RegistDtls'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'RegistDtls'                 => V}});
decode_RegistrationInstructions_grpRegistDtls([{'RegistEmail'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'RegistEmail'                => V}});
decode_RegistrationInstructions_grpRegistDtls([{'MailingDtls'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'MailingDtls'                => V}});
decode_RegistrationInstructions_grpRegistDtls([{'MailingInst'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'MailingInst'                => V}});
decode_RegistrationInstructions_grpRegistDtls([{'NoNestedPartyIDs'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'           => V}});
decode_RegistrationInstructions_grpRegistDtls([{'OwnerType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'OwnerType'                  => V}});
decode_RegistrationInstructions_grpRegistDtls([{'DateOfBirth'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'DateOfBirth'                => V}});
decode_RegistrationInstructions_grpRegistDtls([{'InvestorCountryOfResidence'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructions_grpRegistDtls(T, def(Delim,H), R#group{fields = F#{'InvestorCountryOfResidence' => V}});
decode_RegistrationInstructions_grpRegistDtls(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message RegistrationInstructionsResponse
decode_RegistrationInstructionsResponse_grpPartyIDs(L, R) -> decode_RegistrationInstructionsResponse_grpPartyIDs(L, undefined, R).
decode_RegistrationInstructionsResponse_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructionsResponse_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructionsResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_RegistrationInstructionsResponse_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructionsResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_RegistrationInstructionsResponse_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructionsResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_RegistrationInstructionsResponse_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructionsResponse_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_RegistrationInstructionsResponse_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message RegistrationInstructionsResponse
decode_RegistrationInstructionsResponse_grpPartySubIDs(L, R) -> decode_RegistrationInstructionsResponse_grpPartySubIDs(L, undefined, R).
decode_RegistrationInstructionsResponse_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RegistrationInstructionsResponse_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructionsResponse_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_RegistrationInstructionsResponse_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RegistrationInstructionsResponse_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_RegistrationInstructionsResponse_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message RequestForPositions
decode_RequestForPositions_grpEvents(L, R) -> decode_RequestForPositions_grpEvents(L, undefined, R).
decode_RequestForPositions_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_RequestForPositions_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_RequestForPositions_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_RequestForPositions_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_RequestForPositions_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message RequestForPositions
decode_RequestForPositions_grpLegSecurityAltID(L, R) -> decode_RequestForPositions_grpLegSecurityAltID(L, undefined, R).
decode_RequestForPositions_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_RequestForPositions_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_RequestForPositions_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message RequestForPositions
decode_RequestForPositions_grpLegs(L, R) -> decode_RequestForPositions_grpLegs(L, undefined, R).
decode_RequestForPositions_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_RequestForPositions_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_RequestForPositions_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_RequestForPositions_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_RequestForPositions_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_RequestForPositions_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_RequestForPositions_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_RequestForPositions_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_RequestForPositions_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_RequestForPositions_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_RequestForPositions_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_RequestForPositions_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_RequestForPositions_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_RequestForPositions_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_RequestForPositions_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_RequestForPositions_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_RequestForPositions_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_RequestForPositions_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_RequestForPositions_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_RequestForPositions_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_RequestForPositions_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_RequestForPositions_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_RequestForPositions_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_RequestForPositions_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_RequestForPositions_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_RequestForPositions_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_RequestForPositions_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_RequestForPositions_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_RequestForPositions_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_RequestForPositions_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_RequestForPositions_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_RequestForPositions_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_RequestForPositions_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_RequestForPositions_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_RequestForPositions_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_RequestForPositions_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_RequestForPositions_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_RequestForPositions_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_RequestForPositions_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_RequestForPositions_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_RequestForPositions_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_RequestForPositions_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_RequestForPositions_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message RequestForPositions
decode_RequestForPositions_grpPartyIDs(L, R) -> decode_RequestForPositions_grpPartyIDs(L, undefined, R).
decode_RequestForPositions_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_RequestForPositions_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_RequestForPositions_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_RequestForPositions_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_RequestForPositions_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message RequestForPositions
decode_RequestForPositions_grpPartySubIDs(L, R) -> decode_RequestForPositions_grpPartySubIDs(L, undefined, R).
decode_RequestForPositions_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_RequestForPositions_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_RequestForPositions_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message RequestForPositions
decode_RequestForPositions_grpSecurityAltID(L, R) -> decode_RequestForPositions_grpSecurityAltID(L, undefined, R).
decode_RequestForPositions_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_RequestForPositions_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_RequestForPositions_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTradingSessions in message RequestForPositions
decode_RequestForPositions_grpTradingSessions(L, R) -> decode_RequestForPositions_grpTradingSessions(L, undefined, R).
decode_RequestForPositions_grpTradingSessions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpTradingSessions([{'TradingSessionID'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'    => V}});
decode_RequestForPositions_grpTradingSessions([{'TradingSessionSubID'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpTradingSessions(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID' => V}});
decode_RequestForPositions_grpTradingSessions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message RequestForPositions
decode_RequestForPositions_grpUnderlyingSecurityAltID(L, R) -> decode_RequestForPositions_grpUnderlyingSecurityAltID(L, undefined, R).
decode_RequestForPositions_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_RequestForPositions_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_RequestForPositions_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message RequestForPositions
decode_RequestForPositions_grpUnderlyingStips(L, R) -> decode_RequestForPositions_grpUnderlyingStips(L, undefined, R).
decode_RequestForPositions_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_RequestForPositions_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_RequestForPositions_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message RequestForPositions
decode_RequestForPositions_grpUnderlyings(L, R) -> decode_RequestForPositions_grpUnderlyings(L, undefined, R).
decode_RequestForPositions_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_RequestForPositions_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_RequestForPositions_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_RequestForPositions_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_RequestForPositions_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_RequestForPositions_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_RequestForPositions_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_RequestForPositions_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositions_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_RequestForPositions_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message RequestForPositionsAck
decode_RequestForPositionsAck_grpEvents(L, R) -> decode_RequestForPositionsAck_grpEvents(L, undefined, R).
decode_RequestForPositionsAck_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_RequestForPositionsAck_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_RequestForPositionsAck_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_RequestForPositionsAck_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_RequestForPositionsAck_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message RequestForPositionsAck
decode_RequestForPositionsAck_grpLegSecurityAltID(L, R) -> decode_RequestForPositionsAck_grpLegSecurityAltID(L, undefined, R).
decode_RequestForPositionsAck_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_RequestForPositionsAck_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_RequestForPositionsAck_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message RequestForPositionsAck
decode_RequestForPositionsAck_grpLegs(L, R) -> decode_RequestForPositionsAck_grpLegs(L, undefined, R).
decode_RequestForPositionsAck_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_RequestForPositionsAck_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_RequestForPositionsAck_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_RequestForPositionsAck_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_RequestForPositionsAck_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_RequestForPositionsAck_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_RequestForPositionsAck_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_RequestForPositionsAck_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_RequestForPositionsAck_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_RequestForPositionsAck_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_RequestForPositionsAck_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_RequestForPositionsAck_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_RequestForPositionsAck_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_RequestForPositionsAck_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_RequestForPositionsAck_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_RequestForPositionsAck_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_RequestForPositionsAck_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_RequestForPositionsAck_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_RequestForPositionsAck_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_RequestForPositionsAck_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_RequestForPositionsAck_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_RequestForPositionsAck_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_RequestForPositionsAck_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_RequestForPositionsAck_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_RequestForPositionsAck_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_RequestForPositionsAck_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_RequestForPositionsAck_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_RequestForPositionsAck_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_RequestForPositionsAck_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_RequestForPositionsAck_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_RequestForPositionsAck_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_RequestForPositionsAck_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_RequestForPositionsAck_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_RequestForPositionsAck_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_RequestForPositionsAck_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_RequestForPositionsAck_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message RequestForPositionsAck
decode_RequestForPositionsAck_grpPartyIDs(L, R) -> decode_RequestForPositionsAck_grpPartyIDs(L, undefined, R).
decode_RequestForPositionsAck_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_RequestForPositionsAck_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_RequestForPositionsAck_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_RequestForPositionsAck_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_RequestForPositionsAck_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message RequestForPositionsAck
decode_RequestForPositionsAck_grpPartySubIDs(L, R) -> decode_RequestForPositionsAck_grpPartySubIDs(L, undefined, R).
decode_RequestForPositionsAck_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_RequestForPositionsAck_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_RequestForPositionsAck_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message RequestForPositionsAck
decode_RequestForPositionsAck_grpSecurityAltID(L, R) -> decode_RequestForPositionsAck_grpSecurityAltID(L, undefined, R).
decode_RequestForPositionsAck_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_RequestForPositionsAck_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_RequestForPositionsAck_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message RequestForPositionsAck
decode_RequestForPositionsAck_grpUnderlyingSecurityAltID(L, R) -> decode_RequestForPositionsAck_grpUnderlyingSecurityAltID(L, undefined, R).
decode_RequestForPositionsAck_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_RequestForPositionsAck_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_RequestForPositionsAck_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message RequestForPositionsAck
decode_RequestForPositionsAck_grpUnderlyingStips(L, R) -> decode_RequestForPositionsAck_grpUnderlyingStips(L, undefined, R).
decode_RequestForPositionsAck_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_RequestForPositionsAck_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_RequestForPositionsAck_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message RequestForPositionsAck
decode_RequestForPositionsAck_grpUnderlyings(L, R) -> decode_RequestForPositionsAck_grpUnderlyings(L, undefined, R).
decode_RequestForPositionsAck_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_RequestForPositionsAck_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_RequestForPositionsAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_RequestForPositionsAck_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message SecurityDefinition
decode_SecurityDefinition_grpEvents(L, R) -> decode_SecurityDefinition_grpEvents(L, undefined, R).
decode_SecurityDefinition_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_SecurityDefinition_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_SecurityDefinition_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_SecurityDefinition_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_SecurityDefinition_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message SecurityDefinition
decode_SecurityDefinition_grpInstrAttrib(L, R) -> decode_SecurityDefinition_grpInstrAttrib(L, undefined, R).
decode_SecurityDefinition_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_SecurityDefinition_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_SecurityDefinition_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message SecurityDefinition
decode_SecurityDefinition_grpLegSecurityAltID(L, R) -> decode_SecurityDefinition_grpLegSecurityAltID(L, undefined, R).
decode_SecurityDefinition_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_SecurityDefinition_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_SecurityDefinition_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message SecurityDefinition
decode_SecurityDefinition_grpLegs(L, R) -> decode_SecurityDefinition_grpLegs(L, undefined, R).
decode_SecurityDefinition_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_SecurityDefinition_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_SecurityDefinition_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_SecurityDefinition_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_SecurityDefinition_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_SecurityDefinition_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_SecurityDefinition_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_SecurityDefinition_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_SecurityDefinition_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_SecurityDefinition_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_SecurityDefinition_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_SecurityDefinition_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_SecurityDefinition_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_SecurityDefinition_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_SecurityDefinition_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_SecurityDefinition_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_SecurityDefinition_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_SecurityDefinition_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_SecurityDefinition_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_SecurityDefinition_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_SecurityDefinition_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_SecurityDefinition_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_SecurityDefinition_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_SecurityDefinition_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_SecurityDefinition_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_SecurityDefinition_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_SecurityDefinition_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_SecurityDefinition_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_SecurityDefinition_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_SecurityDefinition_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_SecurityDefinition_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_SecurityDefinition_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_SecurityDefinition_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_SecurityDefinition_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_SecurityDefinition_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_SecurityDefinition_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_SecurityDefinition_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_SecurityDefinition_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_SecurityDefinition_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_SecurityDefinition_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_SecurityDefinition_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_SecurityDefinition_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_SecurityDefinition_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message SecurityDefinition
decode_SecurityDefinition_grpSecurityAltID(L, R) -> decode_SecurityDefinition_grpSecurityAltID(L, undefined, R).
decode_SecurityDefinition_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_SecurityDefinition_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_SecurityDefinition_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message SecurityDefinition
decode_SecurityDefinition_grpUnderlyingSecurityAltID(L, R) -> decode_SecurityDefinition_grpUnderlyingSecurityAltID(L, undefined, R).
decode_SecurityDefinition_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_SecurityDefinition_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_SecurityDefinition_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message SecurityDefinition
decode_SecurityDefinition_grpUnderlyingStips(L, R) -> decode_SecurityDefinition_grpUnderlyingStips(L, undefined, R).
decode_SecurityDefinition_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_SecurityDefinition_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_SecurityDefinition_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message SecurityDefinition
decode_SecurityDefinition_grpUnderlyings(L, R) -> decode_SecurityDefinition_grpUnderlyings(L, undefined, R).
decode_SecurityDefinition_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_SecurityDefinition_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_SecurityDefinition_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_SecurityDefinition_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_SecurityDefinition_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_SecurityDefinition_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_SecurityDefinition_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_SecurityDefinition_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinition_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_SecurityDefinition_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpEvents(L, R) -> decode_SecurityDefinitionRequest_grpEvents(L, undefined, R).
decode_SecurityDefinitionRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_SecurityDefinitionRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_SecurityDefinitionRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_SecurityDefinitionRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_SecurityDefinitionRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpInstrAttrib(L, R) -> decode_SecurityDefinitionRequest_grpInstrAttrib(L, undefined, R).
decode_SecurityDefinitionRequest_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_SecurityDefinitionRequest_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_SecurityDefinitionRequest_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpLegSecurityAltID(L, R) -> decode_SecurityDefinitionRequest_grpLegSecurityAltID(L, undefined, R).
decode_SecurityDefinitionRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_SecurityDefinitionRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_SecurityDefinitionRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpLegs(L, R) -> decode_SecurityDefinitionRequest_grpLegs(L, undefined, R).
decode_SecurityDefinitionRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_SecurityDefinitionRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_SecurityDefinitionRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_SecurityDefinitionRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_SecurityDefinitionRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_SecurityDefinitionRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_SecurityDefinitionRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_SecurityDefinitionRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpSecurityAltID(L, R) -> decode_SecurityDefinitionRequest_grpSecurityAltID(L, undefined, R).
decode_SecurityDefinitionRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_SecurityDefinitionRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_SecurityDefinitionRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID(L, R) -> decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_SecurityDefinitionRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpUnderlyingStips(L, R) -> decode_SecurityDefinitionRequest_grpUnderlyingStips(L, undefined, R).
decode_SecurityDefinitionRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_SecurityDefinitionRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_SecurityDefinitionRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message SecurityDefinitionRequest
decode_SecurityDefinitionRequest_grpUnderlyings(L, R) -> decode_SecurityDefinitionRequest_grpUnderlyings(L, undefined, R).
decode_SecurityDefinitionRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_SecurityDefinitionRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityDefinitionRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_SecurityDefinitionRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message SecurityList
decode_SecurityList_grpEvents(L, R) -> decode_SecurityList_grpEvents(L, undefined, R).
decode_SecurityList_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_SecurityList_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_SecurityList_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_SecurityList_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_SecurityList_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message SecurityList
decode_SecurityList_grpInstrAttrib(L, R) -> decode_SecurityList_grpInstrAttrib(L, undefined, R).
decode_SecurityList_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_SecurityList_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_SecurityList_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message SecurityList
decode_SecurityList_grpLegSecurityAltID(L, R) -> decode_SecurityList_grpLegSecurityAltID(L, undefined, R).
decode_SecurityList_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_SecurityList_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_SecurityList_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message SecurityList
decode_SecurityList_grpLegStipulations(L, R) -> decode_SecurityList_grpLegStipulations(L, undefined, R).
decode_SecurityList_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_SecurityList_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_SecurityList_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message SecurityList
decode_SecurityList_grpLegs(L, R) -> decode_SecurityList_grpLegs(L, undefined, R).
decode_SecurityList_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_SecurityList_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_SecurityList_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_SecurityList_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_SecurityList_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_SecurityList_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_SecurityList_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_SecurityList_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_SecurityList_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_SecurityList_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_SecurityList_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_SecurityList_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_SecurityList_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_SecurityList_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_SecurityList_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_SecurityList_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_SecurityList_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_SecurityList_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_SecurityList_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_SecurityList_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_SecurityList_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_SecurityList_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_SecurityList_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_SecurityList_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_SecurityList_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_SecurityList_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_SecurityList_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_SecurityList_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_SecurityList_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_SecurityList_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_SecurityList_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_SecurityList_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_SecurityList_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_SecurityList_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_SecurityList_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_SecurityList_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_SecurityList_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_SecurityList_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_SecurityList_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_SecurityList_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_SecurityList_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_SecurityList_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_SecurityList_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_SecurityList_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_SecurityList_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_SecurityList_grpLegs([{'LegBenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveCurrency'     => V}});
decode_SecurityList_grpLegs([{'LegBenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurveName'         => V}});
decode_SecurityList_grpLegs([{'LegBenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkCurvePoint'        => V}});
decode_SecurityList_grpLegs([{'LegBenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPrice'             => V}});
decode_SecurityList_grpLegs([{'LegBenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegBenchmarkPriceType'         => V}});
decode_SecurityList_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpRelatedSym in message SecurityList
decode_SecurityList_grpRelatedSym(L, R) -> decode_SecurityList_grpRelatedSym(L, undefined, R).
decode_SecurityList_grpRelatedSym([{Delim                         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpRelatedSym([{'Symbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Symbol'                     => V}});
decode_SecurityList_grpRelatedSym([{'SymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SymbolSfx'                  => V}});
decode_SecurityList_grpRelatedSym([{'SecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityID'                 => V}});
decode_SecurityList_grpRelatedSym([{'SecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityIDSource'           => V}});
decode_SecurityList_grpRelatedSym([{'NoSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoSecurityAltID'            => V}});
decode_SecurityList_grpRelatedSym([{'Product'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Product'                    => V}});
decode_SecurityList_grpRelatedSym([{'CFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CFICode'                    => V}});
decode_SecurityList_grpRelatedSym([{'SecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityType'               => V}});
decode_SecurityList_grpRelatedSym([{'SecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecuritySubType'            => V}});
decode_SecurityList_grpRelatedSym([{'MaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityMonthYear'          => V}});
decode_SecurityList_grpRelatedSym([{'MaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MaturityDate'               => V}});
decode_SecurityList_grpRelatedSym([{'PutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PutOrCall'                  => V}});
decode_SecurityList_grpRelatedSym([{'CouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponPaymentDate'          => V}});
decode_SecurityList_grpRelatedSym([{'IssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'IssueDate'                  => V}});
decode_SecurityList_grpRelatedSym([{'RepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepoCollateralSecurityType' => V}});
decode_SecurityList_grpRelatedSym([{'RepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseTerm'             => V}});
decode_SecurityList_grpRelatedSym([{'RepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RepurchaseRate'             => V}});
decode_SecurityList_grpRelatedSym([{'Factor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Factor'                     => V}});
decode_SecurityList_grpRelatedSym([{'CreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CreditRating'               => V}});
decode_SecurityList_grpRelatedSym([{'InstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InstrRegistry'              => V}});
decode_SecurityList_grpRelatedSym([{'CountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CountryOfIssue'             => V}});
decode_SecurityList_grpRelatedSym([{'StateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StateOrProvinceOfIssue'     => V}});
decode_SecurityList_grpRelatedSym([{'LocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'LocaleOfIssue'              => V}});
decode_SecurityList_grpRelatedSym([{'RedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RedemptionDate'             => V}});
decode_SecurityList_grpRelatedSym([{'StrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikePrice'                => V}});
decode_SecurityList_grpRelatedSym([{'StrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StrikeCurrency'             => V}});
decode_SecurityList_grpRelatedSym([{'OptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'OptAttribute'               => V}});
decode_SecurityList_grpRelatedSym([{'ContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractMultiplier'         => V}});
decode_SecurityList_grpRelatedSym([{'CouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CouponRate'                 => V}});
decode_SecurityList_grpRelatedSym([{'SecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityExchange'           => V}});
decode_SecurityList_grpRelatedSym([{'Issuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Issuer'                     => V}});
decode_SecurityList_grpRelatedSym([{'EncodedIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuerLen'           => V}});
decode_SecurityList_grpRelatedSym([{'EncodedIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedIssuer'              => V}});
decode_SecurityList_grpRelatedSym([{'SecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'SecurityDesc'               => V}});
decode_SecurityList_grpRelatedSym([{'EncodedSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDescLen'     => V}});
decode_SecurityList_grpRelatedSym([{'EncodedSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedSecurityDesc'        => V}});
decode_SecurityList_grpRelatedSym([{'Pool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Pool'                       => V}});
decode_SecurityList_grpRelatedSym([{'ContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ContractSettlMonth'         => V}});
decode_SecurityList_grpRelatedSym([{'CPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPProgram'                  => V}});
decode_SecurityList_grpRelatedSym([{'CPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'CPRegType'                  => V}});
decode_SecurityList_grpRelatedSym([{'NoEvents'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoEvents'                   => V}});
decode_SecurityList_grpRelatedSym([{'DatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DatedDate'                  => V}});
decode_SecurityList_grpRelatedSym([{'InterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'InterestAccrualDate'        => V}});
decode_SecurityList_grpRelatedSym([{'DeliveryForm'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DeliveryForm'               => V}});
decode_SecurityList_grpRelatedSym([{'PctAtRisk'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'PctAtRisk'                  => V}});
decode_SecurityList_grpRelatedSym([{'NoInstrAttrib'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoInstrAttrib'              => V}});
decode_SecurityList_grpRelatedSym([{'AgreementDesc'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementDesc'              => V}});
decode_SecurityList_grpRelatedSym([{'AgreementID'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementID'                => V}});
decode_SecurityList_grpRelatedSym([{'AgreementDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementDate'              => V}});
decode_SecurityList_grpRelatedSym([{'AgreementCurrency'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'AgreementCurrency'          => V}});
decode_SecurityList_grpRelatedSym([{'TerminationType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TerminationType'            => V}});
decode_SecurityList_grpRelatedSym([{'StartDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'StartDate'                  => V}});
decode_SecurityList_grpRelatedSym([{'EndDate'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EndDate'                    => V}});
decode_SecurityList_grpRelatedSym([{'DeliveryType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'DeliveryType'               => V}});
decode_SecurityList_grpRelatedSym([{'MarginRatio'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MarginRatio'                => V}});
decode_SecurityList_grpRelatedSym([{'NoUnderlyings'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoUnderlyings'              => V}});
decode_SecurityList_grpRelatedSym([{'Currency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Currency'                   => V}});
decode_SecurityList_grpRelatedSym([{'NoStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoStipulations'             => V}});
decode_SecurityList_grpRelatedSym([{'NoLegs'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'NoLegs'                     => V}});
decode_SecurityList_grpRelatedSym([{'Spread'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Spread'                     => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkCurveCurrency'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveCurrency'     => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkCurveName'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurveName'         => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkCurvePoint'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkCurvePoint'        => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkPrice'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkPrice'             => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkPriceType'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkPriceType'         => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkSecurityID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityID'        => V}});
decode_SecurityList_grpRelatedSym([{'BenchmarkSecurityIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'BenchmarkSecurityIDSource'  => V}});
decode_SecurityList_grpRelatedSym([{'YieldType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldType'                  => V}});
decode_SecurityList_grpRelatedSym([{'Yield'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Yield'                      => V}});
decode_SecurityList_grpRelatedSym([{'YieldCalcDate'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldCalcDate'              => V}});
decode_SecurityList_grpRelatedSym([{'YieldRedemptionDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionDate'        => V}});
decode_SecurityList_grpRelatedSym([{'YieldRedemptionPrice'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPrice'       => V}});
decode_SecurityList_grpRelatedSym([{'YieldRedemptionPriceType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'YieldRedemptionPriceType'   => V}});
decode_SecurityList_grpRelatedSym([{'RoundLot'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'RoundLot'                   => V}});
decode_SecurityList_grpRelatedSym([{'MinTradeVol'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'MinTradeVol'                => V}});
decode_SecurityList_grpRelatedSym([{'TradingSessionID'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'           => V}});
decode_SecurityList_grpRelatedSym([{'TradingSessionSubID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'        => V}});
decode_SecurityList_grpRelatedSym([{'ExpirationCycle'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'ExpirationCycle'            => V}});
decode_SecurityList_grpRelatedSym([{'Text'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'Text'                       => V}});
decode_SecurityList_grpRelatedSym([{'EncodedTextLen'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'             => V}});
decode_SecurityList_grpRelatedSym([{'EncodedText'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpRelatedSym(T, def(Delim,H), R#group{fields = F#{'EncodedText'                => V}});
decode_SecurityList_grpRelatedSym(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message SecurityList
decode_SecurityList_grpSecurityAltID(L, R) -> decode_SecurityList_grpSecurityAltID(L, undefined, R).
decode_SecurityList_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_SecurityList_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_SecurityList_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message SecurityList
decode_SecurityList_grpStipulations(L, R) -> decode_SecurityList_grpStipulations(L, undefined, R).
decode_SecurityList_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_SecurityList_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_SecurityList_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message SecurityList
decode_SecurityList_grpUnderlyingSecurityAltID(L, R) -> decode_SecurityList_grpUnderlyingSecurityAltID(L, undefined, R).
decode_SecurityList_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_SecurityList_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_SecurityList_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message SecurityList
decode_SecurityList_grpUnderlyingStips(L, R) -> decode_SecurityList_grpUnderlyingStips(L, undefined, R).
decode_SecurityList_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_SecurityList_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_SecurityList_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message SecurityList
decode_SecurityList_grpUnderlyings(L, R) -> decode_SecurityList_grpUnderlyings(L, undefined, R).
decode_SecurityList_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityList_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_SecurityList_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_SecurityList_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_SecurityList_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_SecurityList_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_SecurityList_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_SecurityList_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_SecurityList_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityList_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_SecurityList_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message SecurityListRequest
decode_SecurityListRequest_grpEvents(L, R) -> decode_SecurityListRequest_grpEvents(L, undefined, R).
decode_SecurityListRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_SecurityListRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_SecurityListRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_SecurityListRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_SecurityListRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message SecurityListRequest
decode_SecurityListRequest_grpInstrAttrib(L, R) -> decode_SecurityListRequest_grpInstrAttrib(L, undefined, R).
decode_SecurityListRequest_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_SecurityListRequest_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_SecurityListRequest_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message SecurityListRequest
decode_SecurityListRequest_grpLegSecurityAltID(L, R) -> decode_SecurityListRequest_grpLegSecurityAltID(L, undefined, R).
decode_SecurityListRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_SecurityListRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_SecurityListRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message SecurityListRequest
decode_SecurityListRequest_grpLegs(L, R) -> decode_SecurityListRequest_grpLegs(L, undefined, R).
decode_SecurityListRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_SecurityListRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_SecurityListRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_SecurityListRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_SecurityListRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_SecurityListRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_SecurityListRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_SecurityListRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_SecurityListRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_SecurityListRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_SecurityListRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_SecurityListRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_SecurityListRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_SecurityListRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_SecurityListRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_SecurityListRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_SecurityListRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_SecurityListRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_SecurityListRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_SecurityListRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_SecurityListRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_SecurityListRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_SecurityListRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_SecurityListRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_SecurityListRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_SecurityListRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_SecurityListRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_SecurityListRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_SecurityListRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_SecurityListRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_SecurityListRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_SecurityListRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_SecurityListRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_SecurityListRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_SecurityListRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_SecurityListRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_SecurityListRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_SecurityListRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_SecurityListRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_SecurityListRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_SecurityListRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_SecurityListRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_SecurityListRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message SecurityListRequest
decode_SecurityListRequest_grpSecurityAltID(L, R) -> decode_SecurityListRequest_grpSecurityAltID(L, undefined, R).
decode_SecurityListRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_SecurityListRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_SecurityListRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message SecurityListRequest
decode_SecurityListRequest_grpUnderlyingSecurityAltID(L, R) -> decode_SecurityListRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_SecurityListRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_SecurityListRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_SecurityListRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message SecurityListRequest
decode_SecurityListRequest_grpUnderlyingStips(L, R) -> decode_SecurityListRequest_grpUnderlyingStips(L, undefined, R).
decode_SecurityListRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_SecurityListRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_SecurityListRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message SecurityListRequest
decode_SecurityListRequest_grpUnderlyings(L, R) -> decode_SecurityListRequest_grpUnderlyings(L, undefined, R).
decode_SecurityListRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_SecurityListRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_SecurityListRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_SecurityListRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_SecurityListRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_SecurityListRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_SecurityListRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_SecurityListRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityListRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_SecurityListRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message SecurityStatus
decode_SecurityStatus_grpEvents(L, R) -> decode_SecurityStatus_grpEvents(L, undefined, R).
decode_SecurityStatus_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_SecurityStatus_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_SecurityStatus_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_SecurityStatus_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_SecurityStatus_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message SecurityStatus
decode_SecurityStatus_grpInstrAttrib(L, R) -> decode_SecurityStatus_grpInstrAttrib(L, undefined, R).
decode_SecurityStatus_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_SecurityStatus_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_SecurityStatus_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message SecurityStatus
decode_SecurityStatus_grpLegSecurityAltID(L, R) -> decode_SecurityStatus_grpLegSecurityAltID(L, undefined, R).
decode_SecurityStatus_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_SecurityStatus_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_SecurityStatus_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message SecurityStatus
decode_SecurityStatus_grpLegs(L, R) -> decode_SecurityStatus_grpLegs(L, undefined, R).
decode_SecurityStatus_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_SecurityStatus_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_SecurityStatus_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_SecurityStatus_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_SecurityStatus_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_SecurityStatus_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_SecurityStatus_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_SecurityStatus_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_SecurityStatus_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_SecurityStatus_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_SecurityStatus_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_SecurityStatus_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_SecurityStatus_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_SecurityStatus_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_SecurityStatus_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_SecurityStatus_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_SecurityStatus_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_SecurityStatus_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_SecurityStatus_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_SecurityStatus_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_SecurityStatus_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_SecurityStatus_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_SecurityStatus_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_SecurityStatus_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_SecurityStatus_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_SecurityStatus_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_SecurityStatus_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_SecurityStatus_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_SecurityStatus_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_SecurityStatus_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_SecurityStatus_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_SecurityStatus_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_SecurityStatus_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_SecurityStatus_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_SecurityStatus_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_SecurityStatus_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_SecurityStatus_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_SecurityStatus_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_SecurityStatus_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_SecurityStatus_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_SecurityStatus_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_SecurityStatus_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_SecurityStatus_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message SecurityStatus
decode_SecurityStatus_grpSecurityAltID(L, R) -> decode_SecurityStatus_grpSecurityAltID(L, undefined, R).
decode_SecurityStatus_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_SecurityStatus_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_SecurityStatus_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message SecurityStatus
decode_SecurityStatus_grpUnderlyingSecurityAltID(L, R) -> decode_SecurityStatus_grpUnderlyingSecurityAltID(L, undefined, R).
decode_SecurityStatus_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_SecurityStatus_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_SecurityStatus_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message SecurityStatus
decode_SecurityStatus_grpUnderlyingStips(L, R) -> decode_SecurityStatus_grpUnderlyingStips(L, undefined, R).
decode_SecurityStatus_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_SecurityStatus_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_SecurityStatus_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message SecurityStatus
decode_SecurityStatus_grpUnderlyings(L, R) -> decode_SecurityStatus_grpUnderlyings(L, undefined, R).
decode_SecurityStatus_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_SecurityStatus_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_SecurityStatus_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_SecurityStatus_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_SecurityStatus_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_SecurityStatus_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_SecurityStatus_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_SecurityStatus_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatus_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_SecurityStatus_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message SecurityStatusRequest
decode_SecurityStatusRequest_grpEvents(L, R) -> decode_SecurityStatusRequest_grpEvents(L, undefined, R).
decode_SecurityStatusRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_SecurityStatusRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_SecurityStatusRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_SecurityStatusRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_SecurityStatusRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message SecurityStatusRequest
decode_SecurityStatusRequest_grpInstrAttrib(L, R) -> decode_SecurityStatusRequest_grpInstrAttrib(L, undefined, R).
decode_SecurityStatusRequest_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_SecurityStatusRequest_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_SecurityStatusRequest_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message SecurityStatusRequest
decode_SecurityStatusRequest_grpLegSecurityAltID(L, R) -> decode_SecurityStatusRequest_grpLegSecurityAltID(L, undefined, R).
decode_SecurityStatusRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_SecurityStatusRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_SecurityStatusRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message SecurityStatusRequest
decode_SecurityStatusRequest_grpLegs(L, R) -> decode_SecurityStatusRequest_grpLegs(L, undefined, R).
decode_SecurityStatusRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_SecurityStatusRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_SecurityStatusRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_SecurityStatusRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_SecurityStatusRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_SecurityStatusRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_SecurityStatusRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_SecurityStatusRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_SecurityStatusRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_SecurityStatusRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_SecurityStatusRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_SecurityStatusRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_SecurityStatusRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_SecurityStatusRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_SecurityStatusRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_SecurityStatusRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_SecurityStatusRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_SecurityStatusRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_SecurityStatusRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_SecurityStatusRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_SecurityStatusRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_SecurityStatusRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_SecurityStatusRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_SecurityStatusRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_SecurityStatusRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_SecurityStatusRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_SecurityStatusRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_SecurityStatusRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_SecurityStatusRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_SecurityStatusRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_SecurityStatusRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_SecurityStatusRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_SecurityStatusRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_SecurityStatusRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_SecurityStatusRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_SecurityStatusRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message SecurityStatusRequest
decode_SecurityStatusRequest_grpSecurityAltID(L, R) -> decode_SecurityStatusRequest_grpSecurityAltID(L, undefined, R).
decode_SecurityStatusRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_SecurityStatusRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_SecurityStatusRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message SecurityStatusRequest
decode_SecurityStatusRequest_grpUnderlyingSecurityAltID(L, R) -> decode_SecurityStatusRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_SecurityStatusRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_SecurityStatusRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_SecurityStatusRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message SecurityStatusRequest
decode_SecurityStatusRequest_grpUnderlyingStips(L, R) -> decode_SecurityStatusRequest_grpUnderlyingStips(L, undefined, R).
decode_SecurityStatusRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_SecurityStatusRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_SecurityStatusRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message SecurityStatusRequest
decode_SecurityStatusRequest_grpUnderlyings(L, R) -> decode_SecurityStatusRequest_grpUnderlyings(L, undefined, R).
decode_SecurityStatusRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_SecurityStatusRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityStatusRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_SecurityStatusRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityTypes in message SecurityTypes
decode_SecurityTypes_grpSecurityTypes(L, R) -> decode_SecurityTypes_grpSecurityTypes(L, undefined, R).
decode_SecurityTypes_grpSecurityTypes([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SecurityTypes_grpSecurityTypes([{'SecurityType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityTypes_grpSecurityTypes(T, def(Delim,H), R#group{fields = F#{'SecurityType'    => V}});
decode_SecurityTypes_grpSecurityTypes([{'SecuritySubType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityTypes_grpSecurityTypes(T, def(Delim,H), R#group{fields = F#{'SecuritySubType' => V}});
decode_SecurityTypes_grpSecurityTypes([{'Product'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityTypes_grpSecurityTypes(T, def(Delim,H), R#group{fields = F#{'Product'         => V}});
decode_SecurityTypes_grpSecurityTypes([{'CFICode'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SecurityTypes_grpSecurityTypes(T, def(Delim,H), R#group{fields = F#{'CFICode'         => V}});
decode_SecurityTypes_grpSecurityTypes(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message SettlementInstructionRequest
decode_SettlementInstructionRequest_grpPartyIDs(L, R) -> decode_SettlementInstructionRequest_grpPartyIDs(L, undefined, R).
decode_SettlementInstructionRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructionRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructionRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_SettlementInstructionRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructionRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_SettlementInstructionRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructionRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_SettlementInstructionRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructionRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_SettlementInstructionRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message SettlementInstructionRequest
decode_SettlementInstructionRequest_grpPartySubIDs(L, R) -> decode_SettlementInstructionRequest_grpPartySubIDs(L, undefined, R).
decode_SettlementInstructionRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructionRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructionRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_SettlementInstructionRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructionRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_SettlementInstructionRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDlvyInst in message SettlementInstructions
decode_SettlementInstructions_grpDlvyInst(L, R) -> decode_SettlementInstructions_grpDlvyInst(L, undefined, R).
decode_SettlementInstructions_grpDlvyInst([{Delim              ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructions_grpDlvyInst([{'SettlInstSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'SettlInstSource' => V}});
decode_SettlementInstructions_grpDlvyInst([{'DlvyInstType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'DlvyInstType'    => V}});
decode_SettlementInstructions_grpDlvyInst([{'NoSettlPartyIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpDlvyInst(T, def(Delim,H), R#group{fields = F#{'NoSettlPartyIDs' => V}});
decode_SettlementInstructions_grpDlvyInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message SettlementInstructions
decode_SettlementInstructions_grpPartyIDs(L, R) -> decode_SettlementInstructions_grpPartyIDs(L, undefined, R).
decode_SettlementInstructions_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructions_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_SettlementInstructions_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_SettlementInstructions_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_SettlementInstructions_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_SettlementInstructions_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message SettlementInstructions
decode_SettlementInstructions_grpPartySubIDs(L, R) -> decode_SettlementInstructions_grpPartySubIDs(L, undefined, R).
decode_SettlementInstructions_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructions_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_SettlementInstructions_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_SettlementInstructions_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlInst in message SettlementInstructions
decode_SettlementInstructions_grpSettlInst(L, R) -> decode_SettlementInstructions_grpSettlInst(L, undefined, R).
decode_SettlementInstructions_grpSettlInst([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructions_grpSettlInst([{'SettlInstID'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'SettlInstID'        => V}});
decode_SettlementInstructions_grpSettlInst([{'SettlInstTransType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'SettlInstTransType' => V}});
decode_SettlementInstructions_grpSettlInst([{'SettlInstRefID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'SettlInstRefID'     => V}});
decode_SettlementInstructions_grpSettlInst([{'NoPartyIDs'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'         => V}});
decode_SettlementInstructions_grpSettlInst([{'Side'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'Side'               => V}});
decode_SettlementInstructions_grpSettlInst([{'Product'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'Product'            => V}});
decode_SettlementInstructions_grpSettlInst([{'SecurityType'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'SecurityType'       => V}});
decode_SettlementInstructions_grpSettlInst([{'CFICode'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'CFICode'            => V}});
decode_SettlementInstructions_grpSettlInst([{'EffectiveTime'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'EffectiveTime'      => V}});
decode_SettlementInstructions_grpSettlInst([{'ExpireTime'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'ExpireTime'         => V}});
decode_SettlementInstructions_grpSettlInst([{'LastUpdateTime'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'LastUpdateTime'     => V}});
decode_SettlementInstructions_grpSettlInst([{'SettlDeliveryType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'SettlDeliveryType'  => V}});
decode_SettlementInstructions_grpSettlInst([{'StandInstDbType'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'StandInstDbType'    => V}});
decode_SettlementInstructions_grpSettlInst([{'StandInstDbName'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'StandInstDbName'    => V}});
decode_SettlementInstructions_grpSettlInst([{'StandInstDbID'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'StandInstDbID'      => V}});
decode_SettlementInstructions_grpSettlInst([{'NoDlvyInst'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'NoDlvyInst'         => V}});
decode_SettlementInstructions_grpSettlInst([{'PaymentMethod'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'PaymentMethod'      => V}});
decode_SettlementInstructions_grpSettlInst([{'PaymentRef'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'PaymentRef'         => V}});
decode_SettlementInstructions_grpSettlInst([{'CardHolderName'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'CardHolderName'     => V}});
decode_SettlementInstructions_grpSettlInst([{'CardNumber'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'CardNumber'         => V}});
decode_SettlementInstructions_grpSettlInst([{'CardStartDate'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'CardStartDate'      => V}});
decode_SettlementInstructions_grpSettlInst([{'CardExpDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'CardExpDate'        => V}});
decode_SettlementInstructions_grpSettlInst([{'CardIssNum'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'CardIssNum'         => V}});
decode_SettlementInstructions_grpSettlInst([{'PaymentDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'PaymentDate'        => V}});
decode_SettlementInstructions_grpSettlInst([{'PaymentRemitterID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlInst(T, def(Delim,H), R#group{fields = F#{'PaymentRemitterID'  => V}});
decode_SettlementInstructions_grpSettlInst(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartyIDs in message SettlementInstructions
decode_SettlementInstructions_grpSettlPartyIDs(L, R) -> decode_SettlementInstructions_grpSettlPartyIDs(L, undefined, R).
decode_SettlementInstructions_grpSettlPartyIDs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructions_grpSettlPartyIDs([{'SettlPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyID'       => V}});
decode_SettlementInstructions_grpSettlPartyIDs([{'SettlPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyIDSource' => V}});
decode_SettlementInstructions_grpSettlPartyIDs([{'SettlPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartyRole'     => V}});
decode_SettlementInstructions_grpSettlPartyIDs([{'NoSettlPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoSettlPartySubIDs' => V}});
decode_SettlementInstructions_grpSettlPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSettlPartySubIDs in message SettlementInstructions
decode_SettlementInstructions_grpSettlPartySubIDs(L, R) -> decode_SettlementInstructions_grpSettlPartySubIDs(L, undefined, R).
decode_SettlementInstructions_grpSettlPartySubIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_SettlementInstructions_grpSettlPartySubIDs([{'SettlPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubID'     => V}});
decode_SettlementInstructions_grpSettlPartySubIDs([{'SettlPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_SettlementInstructions_grpSettlPartySubIDs(T, def(Delim,H), R#group{fields = F#{'SettlPartySubIDType' => V}});
decode_SettlementInstructions_grpSettlPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message TradeCaptureReport
decode_TradeCaptureReport_grpAllocs(L, R) -> decode_TradeCaptureReport_grpAllocs(L, undefined, R).
decode_TradeCaptureReport_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_TradeCaptureReport_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_TradeCaptureReport_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_TradeCaptureReport_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_TradeCaptureReport_grpAllocs([{'NoNested2PartyIDs'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs'  => V}});
decode_TradeCaptureReport_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_TradeCaptureReport_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpClearingInstructions in message TradeCaptureReport
decode_TradeCaptureReport_grpClearingInstructions(L, R) -> decode_TradeCaptureReport_grpClearingInstructions(L, undefined, R).
decode_TradeCaptureReport_grpClearingInstructions([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpClearingInstructions([{'ClearingInstruction'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpClearingInstructions(T, def(Delim,H), R#group{fields = F#{'ClearingInstruction' => V}});
decode_TradeCaptureReport_grpClearingInstructions(L, _Delim, R) -> {L, R}.

%% Parse Group: grpContAmts in message TradeCaptureReport
decode_TradeCaptureReport_grpContAmts(L, R) -> decode_TradeCaptureReport_grpContAmts(L, undefined, R).
decode_TradeCaptureReport_grpContAmts([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpContAmts([{'ContAmtType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpContAmts(T, def(Delim,H), R#group{fields = F#{'ContAmtType'  => V}});
decode_TradeCaptureReport_grpContAmts([{'ContAmtValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpContAmts(T, def(Delim,H), R#group{fields = F#{'ContAmtValue' => V}});
decode_TradeCaptureReport_grpContAmts([{'ContAmtCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpContAmts(T, def(Delim,H), R#group{fields = F#{'ContAmtCurr'  => V}});
decode_TradeCaptureReport_grpContAmts(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message TradeCaptureReport
decode_TradeCaptureReport_grpEvents(L, R) -> decode_TradeCaptureReport_grpEvents(L, undefined, R).
decode_TradeCaptureReport_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_TradeCaptureReport_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_TradeCaptureReport_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_TradeCaptureReport_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_TradeCaptureReport_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message TradeCaptureReport
decode_TradeCaptureReport_grpLegSecurityAltID(L, R) -> decode_TradeCaptureReport_grpLegSecurityAltID(L, undefined, R).
decode_TradeCaptureReport_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_TradeCaptureReport_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_TradeCaptureReport_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message TradeCaptureReport
decode_TradeCaptureReport_grpLegStipulations(L, R) -> decode_TradeCaptureReport_grpLegStipulations(L, undefined, R).
decode_TradeCaptureReport_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_TradeCaptureReport_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_TradeCaptureReport_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message TradeCaptureReport
decode_TradeCaptureReport_grpLegs(L, R) -> decode_TradeCaptureReport_grpLegs(L, undefined, R).
decode_TradeCaptureReport_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_TradeCaptureReport_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_TradeCaptureReport_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_TradeCaptureReport_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_TradeCaptureReport_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_TradeCaptureReport_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_TradeCaptureReport_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_TradeCaptureReport_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_TradeCaptureReport_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_TradeCaptureReport_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_TradeCaptureReport_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_TradeCaptureReport_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_TradeCaptureReport_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_TradeCaptureReport_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_TradeCaptureReport_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_TradeCaptureReport_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_TradeCaptureReport_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_TradeCaptureReport_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReport_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_TradeCaptureReport_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_TradeCaptureReport_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_TradeCaptureReport_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_TradeCaptureReport_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_TradeCaptureReport_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_TradeCaptureReport_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_TradeCaptureReport_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_TradeCaptureReport_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_TradeCaptureReport_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_TradeCaptureReport_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_TradeCaptureReport_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_TradeCaptureReport_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_TradeCaptureReport_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_TradeCaptureReport_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_TradeCaptureReport_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_TradeCaptureReport_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_TradeCaptureReport_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_TradeCaptureReport_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_TradeCaptureReport_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_TradeCaptureReport_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_TradeCaptureReport_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegPositionEffect'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPositionEffect'             => V}});
decode_TradeCaptureReport_grpLegs([{'LegCoveredOrUncovered'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCoveredOrUncovered'         => V}});
decode_TradeCaptureReport_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_TradeCaptureReport_grpLegs([{'LegRefID'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRefID'                      => V}});
decode_TradeCaptureReport_grpLegs([{'LegPrice'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPrice'                      => V}});
decode_TradeCaptureReport_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_TradeCaptureReport_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_TradeCaptureReport_grpLegs([{'LegLastPx'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLastPx'                     => V}});
decode_TradeCaptureReport_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpMiscFees in message TradeCaptureReport
decode_TradeCaptureReport_grpMiscFees(L, R) -> decode_TradeCaptureReport_grpMiscFees(L, undefined, R).
decode_TradeCaptureReport_grpMiscFees([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpMiscFees([{'MiscFeeAmt'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeAmt'   => V}});
decode_TradeCaptureReport_grpMiscFees([{'MiscFeeCurr'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeCurr'  => V}});
decode_TradeCaptureReport_grpMiscFees([{'MiscFeeType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeType'  => V}});
decode_TradeCaptureReport_grpMiscFees([{'MiscFeeBasis'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpMiscFees(T, def(Delim,H), R#group{fields = F#{'MiscFeeBasis' => V}});
decode_TradeCaptureReport_grpMiscFees(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message TradeCaptureReport
decode_TradeCaptureReport_grpNested2PartyIDs(L, R) -> decode_TradeCaptureReport_grpNested2PartyIDs(L, undefined, R).
decode_TradeCaptureReport_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_TradeCaptureReport_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_TradeCaptureReport_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_TradeCaptureReport_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_TradeCaptureReport_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message TradeCaptureReport
decode_TradeCaptureReport_grpNested2PartySubIDs(L, R) -> decode_TradeCaptureReport_grpNested2PartySubIDs(L, undefined, R).
decode_TradeCaptureReport_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_TradeCaptureReport_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_TradeCaptureReport_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message TradeCaptureReport
decode_TradeCaptureReport_grpNestedPartyIDs(L, R) -> decode_TradeCaptureReport_grpNestedPartyIDs(L, undefined, R).
decode_TradeCaptureReport_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_TradeCaptureReport_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_TradeCaptureReport_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_TradeCaptureReport_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_TradeCaptureReport_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message TradeCaptureReport
decode_TradeCaptureReport_grpNestedPartySubIDs(L, R) -> decode_TradeCaptureReport_grpNestedPartySubIDs(L, undefined, R).
decode_TradeCaptureReport_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_TradeCaptureReport_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_TradeCaptureReport_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message TradeCaptureReport
decode_TradeCaptureReport_grpPartyIDs(L, R) -> decode_TradeCaptureReport_grpPartyIDs(L, undefined, R).
decode_TradeCaptureReport_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_TradeCaptureReport_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_TradeCaptureReport_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_TradeCaptureReport_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_TradeCaptureReport_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message TradeCaptureReport
decode_TradeCaptureReport_grpPartySubIDs(L, R) -> decode_TradeCaptureReport_grpPartySubIDs(L, undefined, R).
decode_TradeCaptureReport_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_TradeCaptureReport_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_TradeCaptureReport_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPosAmt in message TradeCaptureReport
decode_TradeCaptureReport_grpPosAmt(L, R) -> decode_TradeCaptureReport_grpPosAmt(L, undefined, R).
decode_TradeCaptureReport_grpPosAmt([{Delim         ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpPosAmt([{'PosAmtType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmtType' => V}});
decode_TradeCaptureReport_grpPosAmt([{'PosAmt'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpPosAmt(T, def(Delim,H), R#group{fields = F#{'PosAmt'     => V}});
decode_TradeCaptureReport_grpPosAmt(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message TradeCaptureReport
decode_TradeCaptureReport_grpSecurityAltID(L, R) -> decode_TradeCaptureReport_grpSecurityAltID(L, undefined, R).
decode_TradeCaptureReport_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_TradeCaptureReport_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_TradeCaptureReport_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSides in message TradeCaptureReport
decode_TradeCaptureReport_grpSides(L, R) -> decode_TradeCaptureReport_grpSides(L, undefined, R).
decode_TradeCaptureReport_grpSides([{Delim                        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpSides([{'Side'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'Side'                      => V}});
decode_TradeCaptureReport_grpSides([{'OrderID'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderID'                   => V}});
decode_TradeCaptureReport_grpSides([{'SecondaryOrderID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SecondaryOrderID'          => V}});
decode_TradeCaptureReport_grpSides([{'ClOrdID'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ClOrdID'                   => V}});
decode_TradeCaptureReport_grpSides([{'SecondaryClOrdID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SecondaryClOrdID'          => V}});
decode_TradeCaptureReport_grpSides([{'ListID'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ListID'                    => V}});
decode_TradeCaptureReport_grpSides([{'NoPartyIDs'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NoPartyIDs'                => V}});
decode_TradeCaptureReport_grpSides([{'Account'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'Account'                   => V}});
decode_TradeCaptureReport_grpSides([{'AcctIDSource'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'AcctIDSource'              => V}});
decode_TradeCaptureReport_grpSides([{'AccountType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'AccountType'               => V}});
decode_TradeCaptureReport_grpSides([{'ProcessCode'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ProcessCode'               => V}});
decode_TradeCaptureReport_grpSides([{'OddLot'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'OddLot'                    => V}});
decode_TradeCaptureReport_grpSides([{'NoClearingInstructions'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NoClearingInstructions'    => V}});
decode_TradeCaptureReport_grpSides([{'TradeInputSource'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeInputSource'          => V}});
decode_TradeCaptureReport_grpSides([{'TradeInputDevice'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeInputDevice'          => V}});
decode_TradeCaptureReport_grpSides([{'OrderInputDevice'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderInputDevice'          => V}});
decode_TradeCaptureReport_grpSides([{'Currency'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'Currency'                  => V}});
decode_TradeCaptureReport_grpSides([{'ComplianceID'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ComplianceID'              => V}});
decode_TradeCaptureReport_grpSides([{'SolicitedFlag'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SolicitedFlag'             => V}});
decode_TradeCaptureReport_grpSides([{'OrderCapacity'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderCapacity'             => V}});
decode_TradeCaptureReport_grpSides([{'OrderRestrictions'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'OrderRestrictions'         => V}});
decode_TradeCaptureReport_grpSides([{'CustOrderCapacity'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'CustOrderCapacity'         => V}});
decode_TradeCaptureReport_grpSides([{'OrdType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'OrdType'                   => V}});
decode_TradeCaptureReport_grpSides([{'ExecInst'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ExecInst'                  => V}});
decode_TradeCaptureReport_grpSides([{'TransBkdTime'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TransBkdTime'              => V}});
decode_TradeCaptureReport_grpSides([{'TradingSessionID'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TradingSessionID'          => V}});
decode_TradeCaptureReport_grpSides([{'TradingSessionSubID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TradingSessionSubID'       => V}});
decode_TradeCaptureReport_grpSides([{'TimeBracket'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TimeBracket'               => V}});
decode_TradeCaptureReport_grpSides([{'Commission'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'Commission'                => V}});
decode_TradeCaptureReport_grpSides([{'CommType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'CommType'                  => V}});
decode_TradeCaptureReport_grpSides([{'CommCurrency'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'CommCurrency'              => V}});
decode_TradeCaptureReport_grpSides([{'FundRenewWaiv'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'FundRenewWaiv'             => V}});
decode_TradeCaptureReport_grpSides([{'GrossTradeAmt'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'GrossTradeAmt'             => V}});
decode_TradeCaptureReport_grpSides([{'NumDaysInterest'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NumDaysInterest'           => V}});
decode_TradeCaptureReport_grpSides([{'ExDate'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ExDate'                    => V}});
decode_TradeCaptureReport_grpSides([{'AccruedInterestRate'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'AccruedInterestRate'       => V}});
decode_TradeCaptureReport_grpSides([{'AccruedInterestAmt'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'AccruedInterestAmt'        => V}});
decode_TradeCaptureReport_grpSides([{'InterestAtMaturity'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'InterestAtMaturity'        => V}});
decode_TradeCaptureReport_grpSides([{'EndAccruedInterestAmt'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'EndAccruedInterestAmt'     => V}});
decode_TradeCaptureReport_grpSides([{'StartCash'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'StartCash'                 => V}});
decode_TradeCaptureReport_grpSides([{'EndCash'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'EndCash'                   => V}});
decode_TradeCaptureReport_grpSides([{'Concession'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'Concession'                => V}});
decode_TradeCaptureReport_grpSides([{'TotalTakedown'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TotalTakedown'             => V}});
decode_TradeCaptureReport_grpSides([{'NetMoney'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NetMoney'                  => V}});
decode_TradeCaptureReport_grpSides([{'SettlCurrAmt'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SettlCurrAmt'              => V}});
decode_TradeCaptureReport_grpSides([{'SettlCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SettlCurrency'             => V}});
decode_TradeCaptureReport_grpSides([{'SettlCurrFxRate'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SettlCurrFxRate'           => V}});
decode_TradeCaptureReport_grpSides([{'SettlCurrFxRateCalc'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SettlCurrFxRateCalc'       => V}});
decode_TradeCaptureReport_grpSides([{'PositionEffect'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'PositionEffect'            => V}});
decode_TradeCaptureReport_grpSides([{'Text'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'Text'                      => V}});
decode_TradeCaptureReport_grpSides([{'EncodedTextLen'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedTextLen'            => V}});
decode_TradeCaptureReport_grpSides([{'EncodedText'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'EncodedText'               => V}});
decode_TradeCaptureReport_grpSides([{'SideMultiLegReportingType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'SideMultiLegReportingType' => V}});
decode_TradeCaptureReport_grpSides([{'NoContAmts'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NoContAmts'                => V}});
decode_TradeCaptureReport_grpSides([{'NoStipulations'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NoStipulations'            => V}});
decode_TradeCaptureReport_grpSides([{'NoMiscFees'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NoMiscFees'                => V}});
decode_TradeCaptureReport_grpSides([{'ExchangeRule'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'ExchangeRule'              => V}});
decode_TradeCaptureReport_grpSides([{'TradeAllocIndicator'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'TradeAllocIndicator'       => V}});
decode_TradeCaptureReport_grpSides([{'PreallocMethod'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'PreallocMethod'            => V}});
decode_TradeCaptureReport_grpSides([{'AllocID'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'AllocID'                   => V}});
decode_TradeCaptureReport_grpSides([{'NoAllocs'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpSides(T, def(Delim,H), R#group{fields = F#{'NoAllocs'                  => V}});
decode_TradeCaptureReport_grpSides(L, _Delim, R) -> {L, R}.

%% Parse Group: grpStipulations in message TradeCaptureReport
decode_TradeCaptureReport_grpStipulations(L, R) -> decode_TradeCaptureReport_grpStipulations(L, undefined, R).
decode_TradeCaptureReport_grpStipulations([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpStipulations([{'StipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationType'  => V}});
decode_TradeCaptureReport_grpStipulations([{'StipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpStipulations(T, def(Delim,H), R#group{fields = F#{'StipulationValue' => V}});
decode_TradeCaptureReport_grpStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message TradeCaptureReport
decode_TradeCaptureReport_grpTrdRegTimestamps(L, R) -> decode_TradeCaptureReport_grpTrdRegTimestamps(L, undefined, R).
decode_TradeCaptureReport_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_TradeCaptureReport_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_TradeCaptureReport_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_TradeCaptureReport_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message TradeCaptureReport
decode_TradeCaptureReport_grpUnderlyingSecurityAltID(L, R) -> decode_TradeCaptureReport_grpUnderlyingSecurityAltID(L, undefined, R).
decode_TradeCaptureReport_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_TradeCaptureReport_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_TradeCaptureReport_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message TradeCaptureReport
decode_TradeCaptureReport_grpUnderlyingStips(L, R) -> decode_TradeCaptureReport_grpUnderlyingStips(L, undefined, R).
decode_TradeCaptureReport_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_TradeCaptureReport_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_TradeCaptureReport_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message TradeCaptureReport
decode_TradeCaptureReport_grpUnderlyings(L, R) -> decode_TradeCaptureReport_grpUnderlyings(L, undefined, R).
decode_TradeCaptureReport_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_TradeCaptureReport_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_TradeCaptureReport_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_TradeCaptureReport_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_TradeCaptureReport_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_TradeCaptureReport_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_TradeCaptureReport_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_TradeCaptureReport_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReport_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_TradeCaptureReport_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpAllocs in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpAllocs(L, R) -> decode_TradeCaptureReportAck_grpAllocs(L, undefined, R).
decode_TradeCaptureReportAck_grpAllocs([{Delim                 ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpAllocs([{'AllocAccount'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAccount'       => V}});
decode_TradeCaptureReportAck_grpAllocs([{'AllocAcctIDSource'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocAcctIDSource'  => V}});
decode_TradeCaptureReportAck_grpAllocs([{'AllocSettlCurrency'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocSettlCurrency' => V}});
decode_TradeCaptureReportAck_grpAllocs([{'IndividualAllocID'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'IndividualAllocID'  => V}});
decode_TradeCaptureReportAck_grpAllocs([{'NoNested2PartyIDs'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartyIDs'  => V}});
decode_TradeCaptureReportAck_grpAllocs([{'AllocQty'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpAllocs(T, def(Delim,H), R#group{fields = F#{'AllocQty'           => V}});
decode_TradeCaptureReportAck_grpAllocs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpEvents(L, R) -> decode_TradeCaptureReportAck_grpEvents(L, undefined, R).
decode_TradeCaptureReportAck_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_TradeCaptureReportAck_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_TradeCaptureReportAck_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_TradeCaptureReportAck_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_TradeCaptureReportAck_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpLegSecurityAltID(L, R) -> decode_TradeCaptureReportAck_grpLegSecurityAltID(L, undefined, R).
decode_TradeCaptureReportAck_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_TradeCaptureReportAck_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_TradeCaptureReportAck_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegStipulations in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpLegStipulations(L, R) -> decode_TradeCaptureReportAck_grpLegStipulations(L, undefined, R).
decode_TradeCaptureReportAck_grpLegStipulations([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpLegStipulations([{'LegStipulationType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationType'  => V}});
decode_TradeCaptureReportAck_grpLegStipulations([{'LegStipulationValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegStipulations(T, def(Delim,H), R#group{fields = F#{'LegStipulationValue' => V}});
decode_TradeCaptureReportAck_grpLegStipulations(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpLegs(L, R) -> decode_TradeCaptureReportAck_grpLegs(L, undefined, R).
decode_TradeCaptureReportAck_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_TradeCaptureReportAck_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_TradeCaptureReportAck_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_TradeCaptureReportAck_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_TradeCaptureReportAck_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_TradeCaptureReportAck_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegQty'                        => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSwapType'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSwapType'                   => V}});
decode_TradeCaptureReportAck_grpLegs([{'NoLegStipulations'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegStipulations'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegPositionEffect'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPositionEffect'             => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegCoveredOrUncovered'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCoveredOrUncovered'         => V}});
decode_TradeCaptureReportAck_grpLegs([{'NoNestedPartyIDs'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartyIDs'              => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegRefID'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRefID'                      => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegPrice'=H                     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPrice'                      => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSettlType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlType'                  => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegSettlDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSettlDate'                  => V}});
decode_TradeCaptureReportAck_grpLegs([{'LegLastPx'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLastPx'                     => V}});
decode_TradeCaptureReportAck_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartyIDs in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpNested2PartyIDs(L, R) -> decode_TradeCaptureReportAck_grpNested2PartyIDs(L, undefined, R).
decode_TradeCaptureReportAck_grpNested2PartyIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpNested2PartyIDs([{'Nested2PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyID'       => V}});
decode_TradeCaptureReportAck_grpNested2PartyIDs([{'Nested2PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyIDSource' => V}});
decode_TradeCaptureReportAck_grpNested2PartyIDs([{'Nested2PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartyRole'     => V}});
decode_TradeCaptureReportAck_grpNested2PartyIDs([{'NoNested2PartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNested2PartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNested2PartySubIDs' => V}});
decode_TradeCaptureReportAck_grpNested2PartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNested2PartySubIDs in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpNested2PartySubIDs(L, R) -> decode_TradeCaptureReportAck_grpNested2PartySubIDs(L, undefined, R).
decode_TradeCaptureReportAck_grpNested2PartySubIDs([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpNested2PartySubIDs([{'Nested2PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubID'     => V}});
decode_TradeCaptureReportAck_grpNested2PartySubIDs([{'Nested2PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNested2PartySubIDs(T, def(Delim,H), R#group{fields = F#{'Nested2PartySubIDType' => V}});
decode_TradeCaptureReportAck_grpNested2PartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartyIDs in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpNestedPartyIDs(L, R) -> decode_TradeCaptureReportAck_grpNestedPartyIDs(L, undefined, R).
decode_TradeCaptureReportAck_grpNestedPartyIDs([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpNestedPartyIDs([{'NestedPartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyID'       => V}});
decode_TradeCaptureReportAck_grpNestedPartyIDs([{'NestedPartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyIDSource' => V}});
decode_TradeCaptureReportAck_grpNestedPartyIDs([{'NestedPartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartyRole'     => V}});
decode_TradeCaptureReportAck_grpNestedPartyIDs([{'NoNestedPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNestedPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoNestedPartySubIDs' => V}});
decode_TradeCaptureReportAck_grpNestedPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpNestedPartySubIDs in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpNestedPartySubIDs(L, R) -> decode_TradeCaptureReportAck_grpNestedPartySubIDs(L, undefined, R).
decode_TradeCaptureReportAck_grpNestedPartySubIDs([{Delim                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpNestedPartySubIDs([{'NestedPartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubID'     => V}});
decode_TradeCaptureReportAck_grpNestedPartySubIDs([{'NestedPartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpNestedPartySubIDs(T, def(Delim,H), R#group{fields = F#{'NestedPartySubIDType' => V}});
decode_TradeCaptureReportAck_grpNestedPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpSecurityAltID(L, R) -> decode_TradeCaptureReportAck_grpSecurityAltID(L, undefined, R).
decode_TradeCaptureReportAck_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_TradeCaptureReportAck_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_TradeCaptureReportAck_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpTrdRegTimestamps in message TradeCaptureReportAck
decode_TradeCaptureReportAck_grpTrdRegTimestamps(L, R) -> decode_TradeCaptureReportAck_grpTrdRegTimestamps(L, undefined, R).
decode_TradeCaptureReportAck_grpTrdRegTimestamps([{Delim                    ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportAck_grpTrdRegTimestamps([{'TrdRegTimestamp'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestamp'       => V}});
decode_TradeCaptureReportAck_grpTrdRegTimestamps([{'TrdRegTimestampType'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampType'   => V}});
decode_TradeCaptureReportAck_grpTrdRegTimestamps([{'TrdRegTimestampOrigin'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportAck_grpTrdRegTimestamps(T, def(Delim,H), R#group{fields = F#{'TrdRegTimestampOrigin' => V}});
decode_TradeCaptureReportAck_grpTrdRegTimestamps(L, _Delim, R) -> {L, R}.

%% Parse Group: grpDates in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpDates(L, R) -> decode_TradeCaptureReportRequest_grpDates(L, undefined, R).
decode_TradeCaptureReportRequest_grpDates([{Delim           ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpDates([{'TradeDate'=H   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpDates(T, def(Delim,H), R#group{fields = F#{'TradeDate'    => V}});
decode_TradeCaptureReportRequest_grpDates([{'TransactTime'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpDates(T, def(Delim,H), R#group{fields = F#{'TransactTime' => V}});
decode_TradeCaptureReportRequest_grpDates(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpEvents(L, R) -> decode_TradeCaptureReportRequest_grpEvents(L, undefined, R).
decode_TradeCaptureReportRequest_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_TradeCaptureReportRequest_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_TradeCaptureReportRequest_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_TradeCaptureReportRequest_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_TradeCaptureReportRequest_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpInstrAttrib in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpInstrAttrib(L, R) -> decode_TradeCaptureReportRequest_grpInstrAttrib(L, undefined, R).
decode_TradeCaptureReportRequest_grpInstrAttrib([{Delim               ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpInstrAttrib([{'InstrAttribType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribType'  => V}});
decode_TradeCaptureReportRequest_grpInstrAttrib([{'InstrAttribValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpInstrAttrib(T, def(Delim,H), R#group{fields = F#{'InstrAttribValue' => V}});
decode_TradeCaptureReportRequest_grpInstrAttrib(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpLegSecurityAltID(L, R) -> decode_TradeCaptureReportRequest_grpLegSecurityAltID(L, undefined, R).
decode_TradeCaptureReportRequest_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_TradeCaptureReportRequest_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_TradeCaptureReportRequest_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpLegs(L, R) -> decode_TradeCaptureReportRequest_grpLegs(L, undefined, R).
decode_TradeCaptureReportRequest_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_TradeCaptureReportRequest_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_TradeCaptureReportRequest_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_TradeCaptureReportRequest_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_TradeCaptureReportRequest_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_TradeCaptureReportRequest_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_TradeCaptureReportRequest_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_TradeCaptureReportRequest_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartyIDs in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpPartyIDs(L, R) -> decode_TradeCaptureReportRequest_grpPartyIDs(L, undefined, R).
decode_TradeCaptureReportRequest_grpPartyIDs([{Delim            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpPartyIDs([{'PartyID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyID'       => V}});
decode_TradeCaptureReportRequest_grpPartyIDs([{'PartyIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyIDSource' => V}});
decode_TradeCaptureReportRequest_grpPartyIDs([{'PartyRole'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'PartyRole'     => V}});
decode_TradeCaptureReportRequest_grpPartyIDs([{'NoPartySubIDs'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpPartyIDs(T, def(Delim,H), R#group{fields = F#{'NoPartySubIDs' => V}});
decode_TradeCaptureReportRequest_grpPartyIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpPartySubIDs in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpPartySubIDs(L, R) -> decode_TradeCaptureReportRequest_grpPartySubIDs(L, undefined, R).
decode_TradeCaptureReportRequest_grpPartySubIDs([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpPartySubIDs([{'PartySubID'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubID'     => V}});
decode_TradeCaptureReportRequest_grpPartySubIDs([{'PartySubIDType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpPartySubIDs(T, def(Delim,H), R#group{fields = F#{'PartySubIDType' => V}});
decode_TradeCaptureReportRequest_grpPartySubIDs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpSecurityAltID(L, R) -> decode_TradeCaptureReportRequest_grpSecurityAltID(L, undefined, R).
decode_TradeCaptureReportRequest_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_TradeCaptureReportRequest_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_TradeCaptureReportRequest_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID(L, R) -> decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID(L, undefined, R).
decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_TradeCaptureReportRequest_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpUnderlyingStips(L, R) -> decode_TradeCaptureReportRequest_grpUnderlyingStips(L, undefined, R).
decode_TradeCaptureReportRequest_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_TradeCaptureReportRequest_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_TradeCaptureReportRequest_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message TradeCaptureReportRequest
decode_TradeCaptureReportRequest_grpUnderlyings(L, R) -> decode_TradeCaptureReportRequest_grpUnderlyings(L, undefined, R).
decode_TradeCaptureReportRequest_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_TradeCaptureReportRequest_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequest_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_TradeCaptureReportRequest_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpEvents in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpEvents(L, R) -> decode_TradeCaptureReportRequestAck_grpEvents(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpEvents([{Delim        ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpEvents([{'EventType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventType' => V}});
decode_TradeCaptureReportRequestAck_grpEvents([{'EventDate'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventDate' => V}});
decode_TradeCaptureReportRequestAck_grpEvents([{'EventPx'=H  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventPx'   => V}});
decode_TradeCaptureReportRequestAck_grpEvents([{'EventText'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpEvents(T, def(Delim,H), R#group{fields = F#{'EventText' => V}});
decode_TradeCaptureReportRequestAck_grpEvents(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegSecurityAltID in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpLegSecurityAltID(L, R) -> decode_TradeCaptureReportRequestAck_grpLegSecurityAltID(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpLegSecurityAltID([{Delim                     ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpLegSecurityAltID([{'LegSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltID'       => V}});
decode_TradeCaptureReportRequestAck_grpLegSecurityAltID([{'LegSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegSecurityAltID(T, def(Delim,H), R#group{fields = F#{'LegSecurityAltIDSource' => V}});
decode_TradeCaptureReportRequestAck_grpLegSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpLegs in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpLegs(L, R) -> decode_TradeCaptureReportRequestAck_grpLegs(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpLegs([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbol'                     => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSymbolSfx'                  => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityID'                 => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityIDSource'           => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'NoLegSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'NoLegSecurityAltID'            => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegProduct'                    => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCFICode'                    => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityType'               => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecuritySubType'            => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityMonthYear'          => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegMaturityDate'               => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponPaymentDate'          => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssueDate'                  => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepoCollateralSecurityType' => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseTerm'             => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRepurchaseRate'             => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegFactor'                     => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCreditRating'               => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInstrRegistry'              => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCountryOfIssue'             => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegLocaleOfIssue'              => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRedemptionDate'             => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikePrice'                => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegStrikeCurrency'             => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegOptAttribute'               => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractMultiplier'         => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCouponRate'                 => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityExchange'           => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegIssuer'                     => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'EncodedLegIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuerLen'           => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'EncodedLegIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegIssuer'              => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSecurityDesc'               => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'EncodedLegSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDescLen'     => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'EncodedLegSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'EncodedLegSecurityDesc'        => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegRatioQty'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegRatioQty'                   => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegSide'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegSide'                       => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegCurrency'                   => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegPool'=H                      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegPool'                       => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegDatedDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegDatedDate'                  => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegContractSettlMonth'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegContractSettlMonth'         => V}});
decode_TradeCaptureReportRequestAck_grpLegs([{'LegInterestAccrualDate'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpLegs(T, def(Delim,H), R#group{fields = F#{'LegInterestAccrualDate'        => V}});
decode_TradeCaptureReportRequestAck_grpLegs(L, _Delim, R) -> {L, R}.

%% Parse Group: grpSecurityAltID in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpSecurityAltID(L, R) -> decode_TradeCaptureReportRequestAck_grpSecurityAltID(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpSecurityAltID([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpSecurityAltID([{'SecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltID'       => V}});
decode_TradeCaptureReportRequestAck_grpSecurityAltID([{'SecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpSecurityAltID(T, def(Delim,H), R#group{fields = F#{'SecurityAltIDSource' => V}});
decode_TradeCaptureReportRequestAck_grpSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingSecurityAltID in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID(L, R) -> decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID([{Delim                            ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltID'       => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID([{'UnderlyingSecurityAltIDSource'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityAltIDSource' => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyingSecurityAltID(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyingStips in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpUnderlyingStips(L, R) -> decode_TradeCaptureReportRequestAck_grpUnderlyingStips(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpUnderlyingStips([{Delim                  ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpUnderlyingStips([{'UnderlyingStipType'=H ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipType'  => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyingStips([{'UnderlyingStipValue'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyingStips(T, def(Delim,H), R#group{fields = F#{'UnderlyingStipValue' => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyingStips(L, _Delim, R) -> {L, R}.

%% Parse Group: grpUnderlyings in message TradeCaptureReportRequestAck
decode_TradeCaptureReportRequestAck_grpUnderlyings(L, R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(L, undefined, R).
decode_TradeCaptureReportRequestAck_grpUnderlyings([{Delim                                   ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSymbol'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbol'                     => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSymbolSfx'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSymbolSfx'                  => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSecurityID'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityID'                 => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSecurityIDSource'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityIDSource'           => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'NoUnderlyingSecurityAltID'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingSecurityAltID'            => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingProduct'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingProduct'                    => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCFICode'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCFICode'                    => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSecurityType'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityType'               => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSecuritySubType'=H           ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecuritySubType'            => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingMaturityMonthYear'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityMonthYear'          => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingMaturityDate'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingMaturityDate'               => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingPutOrCall'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPutOrCall'                  => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCouponPaymentDate'=H         ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponPaymentDate'          => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingIssueDate'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssueDate'                  => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingRepoCollateralSecurityType'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepoCollateralSecurityType' => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingRepurchaseTerm'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseTerm'             => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingRepurchaseRate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRepurchaseRate'             => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingFactor'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingFactor'                     => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCreditRating'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCreditRating'               => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingInstrRegistry'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingInstrRegistry'              => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCountryOfIssue'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCountryOfIssue'             => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingStateOrProvinceOfIssue'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStateOrProvinceOfIssue'     => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingLocaleOfIssue'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingLocaleOfIssue'              => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingRedemptionDate'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingRedemptionDate'             => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingStrikePrice'=H               ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikePrice'                => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingStrikeCurrency'=H            ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStrikeCurrency'             => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingOptAttribute'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingOptAttribute'               => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingContractMultiplier'=H        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingContractMultiplier'         => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCouponRate'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCouponRate'                 => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSecurityExchange'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityExchange'           => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingIssuer'=H                    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingIssuer'                     => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'EncodedUnderlyingIssuerLen'=H          ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuerLen'           => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'EncodedUnderlyingIssuer'=H             ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingIssuer'              => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingSecurityDesc'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingSecurityDesc'               => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'EncodedUnderlyingSecurityDescLen'=H    ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDescLen'     => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'EncodedUnderlyingSecurityDesc'=H       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'EncodedUnderlyingSecurityDesc'        => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCPProgram'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPProgram'                  => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCPRegType'=H                 ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCPRegType'                  => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCurrency'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrency'                   => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingQty'=H                       ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingQty'                        => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingPx'=H                        ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingPx'                         => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingDirtyPrice'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingDirtyPrice'                 => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingEndPrice'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndPrice'                   => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingStartValue'=H                ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingStartValue'                 => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingCurrentValue'=H              ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingCurrentValue'               => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'UnderlyingEndValue'=H                  ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'UnderlyingEndValue'                   => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings([{'NoUnderlyingStips'=H                   ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_TradeCaptureReportRequestAck_grpUnderlyings(T, def(Delim,H), R#group{fields = F#{'NoUnderlyingStips'                    => V}});
decode_TradeCaptureReportRequestAck_grpUnderlyings(L, _Delim, R) -> {L, R}.

%% Parse Group: grpHops in message header
decode_header_grpHops(L, R) -> decode_header_grpHops(L, undefined, R).
decode_header_grpHops([{Delim             ,_,_,_}|_]=L, Delim, R) -> {L, R};
decode_header_grpHops([{'HopCompID'=H     ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_header_grpHops(T, def(Delim,H), R#group{fields = F#{'HopCompID'      => V}});
decode_header_grpHops([{'HopSendingTime'=H,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_header_grpHops(T, def(Delim,H), R#group{fields = F#{'HopSendingTime' => V}});
decode_header_grpHops([{'HopRefID'=H      ,V,_,_}|T], Delim, #group{fields=F} = R) -> decode_header_grpHops(T, def(Delim,H), R#group{fields = F#{'HopRefID'       => V}});
decode_header_grpHops(L, _Delim, R) -> {L, R}.


def(undefined,N) -> N;
def(Other,   _N) -> Other.
